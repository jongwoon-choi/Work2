
743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  24000010  080030a0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000048  080030a0  00020048  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010127  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fdd  00000000  00000000  00030165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000780  00000000  00000000  00032148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000006c8  00000000  00000000  000328c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034359  00000000  00000000  00032f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000092bd  00000000  00000000  000672e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014cac1  00000000  00000000  000705a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001bd067  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cb4  00000000  00000000  001bd0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003060 	.word	0x08003060

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003060 	.word	0x08003060

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fa42 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f824 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f8a4 	bl	8000430 <MX_GPIO_Init>
  MX_RNG_Init();
 80002e8:	f000 f88c 	bl	8000404 <MX_RNG_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_RNG_GenerateRandomNumber(&hrng,&rng);
 80002ec:	490b      	ldr	r1, [pc, #44]	; (800031c <main+0x44>)
 80002ee:	480c      	ldr	r0, [pc, #48]	; (8000320 <main+0x48>)
 80002f0:	f002 fe3b 	bl	8002f6a <HAL_RNG_GenerateRandomNumber>

		HAL_GPIO_TogglePin(PE3_GPIO_Port,PE3_Pin);
 80002f4:	2108      	movs	r1, #8
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <main+0x4c>)
 80002f8:	f000 fda3 	bl	8000e42 <HAL_GPIO_TogglePin>
		HAL_Delay(rng%600);
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <main+0x44>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <main+0x50>)
 8000302:	fba2 1203 	umull	r1, r2, r2, r3
 8000306:	0992      	lsrs	r2, r2, #6
 8000308:	f44f 7116 	mov.w	r1, #600	; 0x258
 800030c:	fb01 f202 	mul.w	r2, r1, r2
 8000310:	1a9b      	subs	r3, r3, r2
 8000312:	b29b      	uxth	r3, r3
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fab7 	bl	8000888 <HAL_Delay>
		HAL_RNG_GenerateRandomNumber(&hrng,&rng);
 800031a:	e7e7      	b.n	80002ec <main+0x14>
 800031c:	2400002c 	.word	0x2400002c
 8000320:	24000030 	.word	0x24000030
 8000324:	58021000 	.word	0x58021000
 8000328:	1b4e81b5 	.word	0x1b4e81b5

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09c      	sub	sp, #112	; 0x70
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000336:	224c      	movs	r2, #76	; 0x4c
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fe88 	bl	8003050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2220      	movs	r2, #32
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fe82 	bl	8003050 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800034c:	2002      	movs	r0, #2
 800034e:	f000 fd93 	bl	8000e78 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	4b29      	ldr	r3, [pc, #164]	; (80003fc <SystemClock_Config+0xd0>)
 8000358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035a:	4a28      	ldr	r2, [pc, #160]	; (80003fc <SystemClock_Config+0xd0>)
 800035c:	f023 0301 	bic.w	r3, r3, #1
 8000360:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000362:	4b26      	ldr	r3, [pc, #152]	; (80003fc <SystemClock_Config+0xd0>)
 8000364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <SystemClock_Config+0xd4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000374:	4a22      	ldr	r2, [pc, #136]	; (8000400 <SystemClock_Config+0xd4>)
 8000376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b20      	ldr	r3, [pc, #128]	; (8000400 <SystemClock_Config+0xd4>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000388:	bf00      	nop
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <SystemClock_Config+0xd4>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000396:	d1f8      	bne.n	800038a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000398:	2322      	movs	r3, #34	; 0x22
 800039a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800039c:	2301      	movs	r3, #1
 800039e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a0:	2340      	movs	r3, #64	; 0x40
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003a4:	2301      	movs	r3, #1
 80003a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fd9b 	bl	8000eec <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003bc:	f000 f89a 	bl	80004f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	233f      	movs	r3, #63	; 0x3f
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2101      	movs	r1, #1
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 f991 	bl	800170c <HAL_RCC_ClockConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80003f0:	f000 f880 	bl	80004f4 <Error_Handler>
  }
}
 80003f4:	bf00      	nop
 80003f6:	3770      	adds	r7, #112	; 0x70
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	58000400 	.word	0x58000400
 8000400:	58024800 	.word	0x58024800

08000404 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <MX_RNG_Init+0x24>)
 800040a:	4a08      	ldr	r2, [pc, #32]	; (800042c <MX_RNG_Init+0x28>)
 800040c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_RNG_Init+0x24>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_RNG_Init+0x24>)
 8000416:	f002 fd4d 	bl	8002eb4 <HAL_RNG_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000420:	f000 f868 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	24000030 	.word	0x24000030
 800042c:	48021800 	.word	0x48021800

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000446:	4b29      	ldr	r3, [pc, #164]	; (80004ec <MX_GPIO_Init+0xbc>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a27      	ldr	r2, [pc, #156]	; (80004ec <MX_GPIO_Init+0xbc>)
 800044e:	f043 0310 	orr.w	r3, r3, #16
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <MX_GPIO_Init+0xbc>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0310 	and.w	r3, r3, #16
 8000460:	613b      	str	r3, [r7, #16]
 8000462:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000464:	4b21      	ldr	r3, [pc, #132]	; (80004ec <MX_GPIO_Init+0xbc>)
 8000466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046a:	4a20      	ldr	r2, [pc, #128]	; (80004ec <MX_GPIO_Init+0xbc>)
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <MX_GPIO_Init+0xbc>)
 8000476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047a:	f003 0304 	and.w	r3, r3, #4
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_GPIO_Init+0xbc>)
 8000484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000488:	4a18      	ldr	r2, [pc, #96]	; (80004ec <MX_GPIO_Init+0xbc>)
 800048a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800048e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_GPIO_Init+0xbc>)
 8000494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_GPIO_Init+0xbc>)
 80004a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a6:	4a11      	ldr	r2, [pc, #68]	; (80004ec <MX_GPIO_Init+0xbc>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_GPIO_Init+0xbc>)
 80004b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	2108      	movs	r1, #8
 80004c2:	480b      	ldr	r0, [pc, #44]	; (80004f0 <MX_GPIO_Init+0xc0>)
 80004c4:	f000 fca4 	bl	8000e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3_Pin */
  GPIO_InitStruct.Pin = PE3_Pin;
 80004c8:	2308      	movs	r3, #8
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	2301      	movs	r3, #1
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <MX_GPIO_Init+0xc0>)
 80004e0:	f000 fae6 	bl	8000ab0 <HAL_GPIO_Init>

}
 80004e4:	bf00      	nop
 80004e6:	3728      	adds	r7, #40	; 0x28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	58024400 	.word	0x58024400
 80004f0:	58021000 	.word	0x58021000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>
	...

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_MspInit+0x30>)
 8000508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <HAL_MspInit+0x30>)
 800050e:	f043 0302 	orr.w	r3, r3, #2
 8000512:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_MspInit+0x30>)
 8000518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800051c:	f003 0302 	and.w	r3, r3, #2
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	58024400 	.word	0x58024400

08000534 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0b2      	sub	sp, #200	; 0xc8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	22bc      	movs	r2, #188	; 0xbc
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fd83 	bl	8003050 <memset>
  if(hrng->Instance==RNG)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a13      	ldr	r2, [pc, #76]	; (800059c <HAL_RNG_MspInit+0x68>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d11e      	bne.n	8000592 <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000558:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800055a:	2300      	movs	r3, #0
 800055c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4618      	mov	r0, r3
 8000566:	f001 fc01 	bl	8001d6c <HAL_RCCEx_PeriphCLKConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000570:	f7ff ffc0 	bl	80004f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <HAL_RNG_MspInit+0x6c>)
 8000576:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800057a:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <HAL_RNG_MspInit+0x6c>)
 800057c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000580:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_RNG_MspInit+0x6c>)
 8000586:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800058a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000592:	bf00      	nop
 8000594:	37c8      	adds	r7, #200	; 0xc8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	48021800 	.word	0x48021800
 80005a0:	58024400 	.word	0x58024400

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <NMI_Handler+0x4>

080005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <MemManage_Handler+0x4>

080005b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f0:	f000 f92a 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005fc:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <SystemInit+0xec>)
 80005fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000602:	4a38      	ldr	r2, [pc, #224]	; (80006e4 <SystemInit+0xec>)
 8000604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <SystemInit+0xf0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <SystemInit+0xf0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a31      	ldr	r2, [pc, #196]	; (80006e8 <SystemInit+0xf0>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemInit+0xf4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <SystemInit+0xf4>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <SystemInit+0xf4>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemInit+0xf4>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492b      	ldr	r1, [pc, #172]	; (80006ec <SystemInit+0xf4>)
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemInit+0xf8>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemInit+0xf0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemInit+0xf0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <SystemInit+0xf0>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemInit+0xf4>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <SystemInit+0xf4>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemInit+0xf4>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <SystemInit+0xf4>)
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <SystemInit+0xfc>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <SystemInit+0xf4>)
 800067c:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <SystemInit+0x100>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <SystemInit+0xf4>)
 8000682:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <SystemInit+0x104>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemInit+0xf4>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <SystemInit+0xf4>)
 800068e:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <SystemInit+0x104>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <SystemInit+0xf4>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <SystemInit+0xf4>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <SystemInit+0x104>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0xf4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <SystemInit+0xf4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <SystemInit+0xf4>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <SystemInit+0xf4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <SystemInit+0x108>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <SystemInit+0x10c>)
 80006bc:	4013      	ands	r3, r2
 80006be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c2:	d202      	bcs.n	80006ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <SystemInit+0x110>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <SystemInit+0x114>)
 80006cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <SystemInit+0xec>)
 80006d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	52002000 	.word	0x52002000
 80006ec:	58024400 	.word	0x58024400
 80006f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f4:	02020200 	.word	0x02020200
 80006f8:	01ff0000 	.word	0x01ff0000
 80006fc:	01010280 	.word	0x01010280
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000714:	f7ff ff70 	bl	80005f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f002 fc63 	bl	8003008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000742:	f7ff fdc9 	bl	80002d8 <main>
  bx  lr
 8000746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000748:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800074c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000750:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000754:	08003090 	.word	0x08003090
  ldr r2, =_sbss
 8000758:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800075c:	24000048 	.word	0x24000048

08000760 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC3_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076a:	2003      	movs	r0, #3
 800076c:	f000 f96e 	bl	8000a4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000770:	f001 f982 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8000774:	4602      	mov	r2, r0
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_Init+0x68>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	f003 030f 	and.w	r3, r3, #15
 8000780:	4913      	ldr	r1, [pc, #76]	; (80007d0 <HAL_Init+0x6c>)
 8000782:	5ccb      	ldrb	r3, [r1, r3]
 8000784:	f003 031f 	and.w	r3, r3, #31
 8000788:	fa22 f303 	lsr.w	r3, r2, r3
 800078c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_Init+0x68>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <HAL_Init+0x6c>)
 8000798:	5cd3      	ldrb	r3, [r2, r3]
 800079a:	f003 031f 	and.w	r3, r3, #31
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	fa22 f303 	lsr.w	r3, r2, r3
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <HAL_Init+0x70>)
 80007a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <HAL_Init+0x74>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ae:	200f      	movs	r0, #15
 80007b0:	f000 f814 	bl	80007dc <HAL_InitTick>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e002      	b.n	80007c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007be:	f7ff fe9f 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58024400 	.word	0x58024400
 80007d0:	08003078 	.word	0x08003078
 80007d4:	24000004 	.word	0x24000004
 80007d8:	24000000 	.word	0x24000000

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_InitTick+0x60>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	e021      	b.n	8000834 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_InitTick+0x64>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_InitTick+0x60>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f945 	bl	8000a96 <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e00e      	b.n	8000834 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d80a      	bhi.n	8000832 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f000 f91d 	bl	8000a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_InitTick+0x68>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2400000c 	.word	0x2400000c
 8000840:	24000000 	.word	0x24000000
 8000844:	24000008 	.word	0x24000008

08000848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x20>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x24>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_IncTick+0x24>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2400000c 	.word	0x2400000c
 800086c:	24000044 	.word	0x24000044

08000870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_GetTick+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	24000044 	.word	0x24000044

08000888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000890:	f7ff ffee 	bl	8000870 <HAL_GetTick>
 8000894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d005      	beq.n	80008ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_Delay+0x44>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ae:	bf00      	nop
 80008b0:	f7ff ffde 	bl	8000870 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d8f7      	bhi.n	80008b0 <HAL_Delay+0x28>
  {
  }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2400000c 	.word	0x2400000c

080008d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_GetREVID+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	0c1b      	lsrs	r3, r3, #16
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	5c001000 	.word	0x5c001000

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <__NVIC_SetPriorityGrouping+0x40>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	4313      	orrs	r3, r2
 8000914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <__NVIC_SetPriorityGrouping+0x40>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	60d3      	str	r3, [r2, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	05fa0000 	.word	0x05fa0000

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db0a      	blt.n	8000976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	490c      	ldr	r1, [pc, #48]	; (8000998 <__NVIC_SetPriority+0x4c>)
 8000966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000974:	e00a      	b.n	800098c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4908      	ldr	r1, [pc, #32]	; (800099c <__NVIC_SetPriority+0x50>)
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	3b04      	subs	r3, #4
 8000984:	0112      	lsls	r2, r2, #4
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	440b      	add	r3, r1
 800098a:	761a      	strb	r2, [r3, #24]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	bf28      	it	cs
 80009be:	2304      	movcs	r3, #4
 80009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3304      	adds	r3, #4
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <NVIC_EncodePriority+0x30>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b03      	subs	r3, #3
 80009ce:	e000      	b.n	80009d2 <NVIC_EncodePriority+0x32>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	401a      	ands	r2, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43d9      	mvns	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	4313      	orrs	r3, r2
         );
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a18:	d301      	bcc.n	8000a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00f      	b.n	8000a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <SysTick_Config+0x40>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a26:	210f      	movs	r1, #15
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f7ff ff8e 	bl	800094c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <SysTick_Config+0x40>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SysTick_Config+0x40>)
 8000a38:	2207      	movs	r2, #7
 8000a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	e000e010 	.word	0xe000e010

08000a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff47 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a70:	f7ff ff5e 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff90 	bl	80009a0 <NVIC_EncodePriority>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff5f 	bl	800094c <__NVIC_SetPriority>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffb2 	bl	8000a08 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000abe:	4b89      	ldr	r3, [pc, #548]	; (8000ce4 <HAL_GPIO_Init+0x234>)
 8000ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ac2:	e194      	b.n	8000dee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8186 	beq.w	8000de8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d00b      	beq.n	8000afc <HAL_GPIO_Init+0x4c>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d007      	beq.n	8000afc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af0:	2b11      	cmp	r3, #17
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b12      	cmp	r3, #18
 8000afa:	d130      	bne.n	8000b5e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2203      	movs	r2, #3
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b32:	2201      	movs	r2, #1
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	091b      	lsrs	r3, r3, #4
 8000b48:	f003 0201 	and.w	r2, r3, #1
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0xee>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d123      	bne.n	8000be6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	08da      	lsrs	r2, r3, #3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	69b9      	ldr	r1, [r7, #24]
 8000be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0203 	and.w	r2, r3, #3
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80e0 	beq.w	8000de8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_GPIO_Init+0x238>)
 8000c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <HAL_GPIO_Init+0x238>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_GPIO_Init+0x238>)
 8000c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c46:	4a29      	ldr	r2, [pc, #164]	; (8000cec <HAL_GPIO_Init+0x23c>)
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <HAL_GPIO_Init+0x240>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d052      	beq.n	8000d18 <HAL_GPIO_Init+0x268>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <HAL_GPIO_Init+0x244>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d031      	beq.n	8000cde <HAL_GPIO_Init+0x22e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_GPIO_Init+0x248>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d02b      	beq.n	8000cda <HAL_GPIO_Init+0x22a>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <HAL_GPIO_Init+0x24c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d025      	beq.n	8000cd6 <HAL_GPIO_Init+0x226>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_GPIO_Init+0x250>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d01f      	beq.n	8000cd2 <HAL_GPIO_Init+0x222>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_GPIO_Init+0x254>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d019      	beq.n	8000cce <HAL_GPIO_Init+0x21e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <HAL_GPIO_Init+0x258>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0x21a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_GPIO_Init+0x25c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d00d      	beq.n	8000cc6 <HAL_GPIO_Init+0x216>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <HAL_GPIO_Init+0x260>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d007      	beq.n	8000cc2 <HAL_GPIO_Init+0x212>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <HAL_GPIO_Init+0x264>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_GPIO_Init+0x20e>
 8000cba:	2309      	movs	r3, #9
 8000cbc:	e02d      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	e02b      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	e029      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	e027      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cca:	2306      	movs	r3, #6
 8000ccc:	e025      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cce:	2305      	movs	r3, #5
 8000cd0:	e023      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	e021      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e01f      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e01d      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e01b      	b.n	8000d1a <HAL_GPIO_Init+0x26a>
 8000ce2:	bf00      	nop
 8000ce4:	58000080 	.word	0x58000080
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58000400 	.word	0x58000400
 8000cf0:	58020000 	.word	0x58020000
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	58020c00 	.word	0x58020c00
 8000d00:	58021000 	.word	0x58021000
 8000d04:	58021400 	.word	0x58021400
 8000d08:	58021800 	.word	0x58021800
 8000d0c:	58021c00 	.word	0x58021c00
 8000d10:	58022000 	.word	0x58022000
 8000d14:	58022400 	.word	0x58022400
 8000d18:	2300      	movs	r3, #0
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	f002 0203 	and.w	r2, r2, #3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4093      	lsls	r3, r2
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d2a:	4938      	ldr	r1, [pc, #224]	; (8000e0c <HAL_GPIO_Init+0x35c>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	3301      	adds	r3, #1
 8000dec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa22 f303 	lsr.w	r3, r2, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f47f ae63 	bne.w	8000ac4 <HAL_GPIO_Init+0x14>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3724      	adds	r7, #36	; 0x24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	58000400 	.word	0x58000400

08000e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e20:	787b      	ldrb	r3, [r7, #1]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000e2c:	e003      	b.n	8000e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	041a      	lsls	r2, r3, #16
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	619a      	str	r2, [r3, #24]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e54:	887a      	ldrh	r2, [r7, #2]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	041a      	lsls	r2, r3, #16
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	400b      	ands	r3, r1
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	619a      	str	r2, [r3, #24]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d00a      	beq.n	8000ea2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d001      	beq.n	8000e9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e01f      	b.n	8000ede <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e01d      	b.n	8000ede <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	f023 0207 	bic.w	r2, r3, #7
 8000eaa:	490f      	ldr	r1, [pc, #60]	; (8000ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000eb2:	f7ff fcdd 	bl	8000870 <HAL_GetTick>
 8000eb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000eb8:	e009      	b.n	8000ece <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000eba:	f7ff fcd9 	bl	8000870 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ec8:	d901      	bls.n	8000ece <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e007      	b.n	8000ede <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eda:	d1ee      	bne.n	8000eba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	58024800 	.word	0x58024800

08000eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e3ff      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8087 	beq.w	800101a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f0c:	4b99      	ldr	r3, [pc, #612]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f16:	4b97      	ldr	r3, [pc, #604]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	2b10      	cmp	r3, #16
 8000f20:	d007      	beq.n	8000f32 <HAL_RCC_OscConfig+0x46>
 8000f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f24:	2b18      	cmp	r3, #24
 8000f26:	d110      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5e>
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d10b      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f32:	4b90      	ldr	r3, [pc, #576]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d06c      	beq.n	8001018 <HAL_RCC_OscConfig+0x12c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d168      	bne.n	8001018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e3d9      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x76>
 8000f54:	4b87      	ldr	r3, [pc, #540]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a86      	ldr	r2, [pc, #536]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e02e      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x98>
 8000f6a:	4b82      	ldr	r3, [pc, #520]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a81      	ldr	r2, [pc, #516]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b7f      	ldr	r3, [pc, #508]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a7e      	ldr	r2, [pc, #504]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e01d      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0xbc>
 8000f8e:	4b79      	ldr	r3, [pc, #484]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a78      	ldr	r2, [pc, #480]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b76      	ldr	r3, [pc, #472]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a75      	ldr	r2, [pc, #468]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000fa8:	4b72      	ldr	r3, [pc, #456]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a71      	ldr	r2, [pc, #452]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a6e      	ldr	r2, [pc, #440]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fc52 	bl	8000870 <HAL_GetTick>
 8000fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fc4e 	bl	8000870 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e38d      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fe2:	4b64      	ldr	r3, [pc, #400]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xe4>
 8000fee:	e014      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fc3e 	bl	8000870 <HAL_GetTick>
 8000ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fc3a 	bl	8000870 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e379      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800100a:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x10c>
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 80ae 	beq.w	8001184 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001028:	4b52      	ldr	r3, [pc, #328]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001030:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <HAL_RCC_OscConfig+0x162>
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	2b18      	cmp	r3, #24
 8001042:	d13a      	bne.n	80010ba <HAL_RCC_OscConfig+0x1ce>
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d135      	bne.n	80010ba <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800104e:	4b49      	ldr	r3, [pc, #292]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d005      	beq.n	8001066 <HAL_RCC_OscConfig+0x17a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e34b      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001066:	f7ff fc33 	bl	80008d0 <HAL_GetREVID>
 800106a:	4603      	mov	r3, r0
 800106c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001070:	4293      	cmp	r3, r2
 8001072:	d817      	bhi.n	80010a4 <HAL_RCC_OscConfig+0x1b8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b40      	cmp	r3, #64	; 0x40
 800107a:	d108      	bne.n	800108e <HAL_RCC_OscConfig+0x1a2>
 800107c:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001084:	4a3b      	ldr	r2, [pc, #236]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800108c:	e07a      	b.n	8001184 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	031b      	lsls	r3, r3, #12
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a2:	e06f      	b.n	8001184 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b33      	ldr	r3, [pc, #204]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	061b      	lsls	r3, r3, #24
 80010b2:	4930      	ldr	r1, [pc, #192]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b8:	e064      	b.n	8001184 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d045      	beq.n	800114e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 0219 	bic.w	r2, r3, #25
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	4929      	ldr	r1, [pc, #164]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d4:	f7ff fbcc 	bl	8000870 <HAL_GetTick>
 80010d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fbc8 	bl	8000870 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e307      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	f7ff fbe9 	bl	80008d0 <HAL_GetREVID>
 80010fe:	4603      	mov	r3, r0
 8001100:	f241 0203 	movw	r2, #4099	; 0x1003
 8001104:	4293      	cmp	r3, r2
 8001106:	d817      	bhi.n	8001138 <HAL_RCC_OscConfig+0x24c>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	2b40      	cmp	r3, #64	; 0x40
 800110e:	d108      	bne.n	8001122 <HAL_RCC_OscConfig+0x236>
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001118:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 800111a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111e:	6053      	str	r3, [r2, #4]
 8001120:	e030      	b.n	8001184 <HAL_RCC_OscConfig+0x298>
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	031b      	lsls	r3, r3, #12
 8001130:	4910      	ldr	r1, [pc, #64]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
 8001136:	e025      	b.n	8001184 <HAL_RCC_OscConfig+0x298>
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	061b      	lsls	r3, r3, #24
 8001146:	490b      	ldr	r1, [pc, #44]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
 800114c:	e01a      	b.n	8001184 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_RCC_OscConfig+0x288>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115a:	f7ff fb89 	bl	8000870 <HAL_GetTick>
 800115e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001162:	f7ff fb85 	bl	8000870 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d903      	bls.n	8001178 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e2c4      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
 8001174:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001178:	4ba4      	ldr	r3, [pc, #656]	; (800140c <HAL_RCC_OscConfig+0x520>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ee      	bne.n	8001162 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80a9 	beq.w	80012e4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001192:	4b9e      	ldr	r3, [pc, #632]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800119a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800119c:	4b9b      	ldr	r3, [pc, #620]	; (800140c <HAL_RCC_OscConfig+0x520>)
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d007      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2cc>
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b18      	cmp	r3, #24
 80011ac:	d13a      	bne.n	8001224 <HAL_RCC_OscConfig+0x338>
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d135      	bne.n	8001224 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011b8:	4b94      	ldr	r3, [pc, #592]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_OscConfig+0x2e4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	2b80      	cmp	r3, #128	; 0x80
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e296      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011d0:	f7ff fb7e 	bl	80008d0 <HAL_GetREVID>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80011da:	4293      	cmp	r3, r2
 80011dc:	d817      	bhi.n	800120e <HAL_RCC_OscConfig+0x322>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	2b20      	cmp	r3, #32
 80011e4:	d108      	bne.n	80011f8 <HAL_RCC_OscConfig+0x30c>
 80011e6:	4b89      	ldr	r3, [pc, #548]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80011ee:	4a87      	ldr	r2, [pc, #540]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80011f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011f6:	e075      	b.n	80012e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	069b      	lsls	r3, r3, #26
 8001206:	4981      	ldr	r1, [pc, #516]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800120c:	e06a      	b.n	80012e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800120e:	4b7f      	ldr	r3, [pc, #508]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	061b      	lsls	r3, r3, #24
 800121c:	497b      	ldr	r1, [pc, #492]	; (800140c <HAL_RCC_OscConfig+0x520>)
 800121e:	4313      	orrs	r3, r2
 8001220:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001222:	e05f      	b.n	80012e4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d042      	beq.n	80012b2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800122c:	4b77      	ldr	r3, [pc, #476]	; (800140c <HAL_RCC_OscConfig+0x520>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a76      	ldr	r2, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fb1a 	bl	8000870 <HAL_GetTick>
 800123c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001240:	f7ff fb16 	bl	8000870 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e255      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001252:	4b6e      	ldr	r3, [pc, #440]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800125e:	f7ff fb37 	bl	80008d0 <HAL_GetREVID>
 8001262:	4603      	mov	r3, r0
 8001264:	f241 0203 	movw	r2, #4099	; 0x1003
 8001268:	4293      	cmp	r3, r2
 800126a:	d817      	bhi.n	800129c <HAL_RCC_OscConfig+0x3b0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	2b20      	cmp	r3, #32
 8001272:	d108      	bne.n	8001286 <HAL_RCC_OscConfig+0x39a>
 8001274:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800127c:	4a63      	ldr	r2, [pc, #396]	; (800140c <HAL_RCC_OscConfig+0x520>)
 800127e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001282:	6053      	str	r3, [r2, #4]
 8001284:	e02e      	b.n	80012e4 <HAL_RCC_OscConfig+0x3f8>
 8001286:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	069b      	lsls	r3, r3, #26
 8001294:	495d      	ldr	r1, [pc, #372]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]
 800129a:	e023      	b.n	80012e4 <HAL_RCC_OscConfig+0x3f8>
 800129c:	4b5b      	ldr	r3, [pc, #364]	; (800140c <HAL_RCC_OscConfig+0x520>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	061b      	lsls	r3, r3, #24
 80012aa:	4958      	ldr	r1, [pc, #352]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60cb      	str	r3, [r1, #12]
 80012b0:	e018      	b.n	80012e4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80012b2:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a55      	ldr	r2, [pc, #340]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80012b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012be:	f7ff fad7 	bl	8000870 <HAL_GetTick>
 80012c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80012c6:	f7ff fad3 	bl	8000870 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e212      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d036      	beq.n	800135e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d019      	beq.n	800132c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f8:	4b44      	ldr	r3, [pc, #272]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80012fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fc:	4a43      	ldr	r2, [pc, #268]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fab4 	bl	8000870 <HAL_GetTick>
 8001308:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fab0 	bl	8000870 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1ef      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x420>
 800132a:	e018      	b.n	800135e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_RCC_OscConfig+0x520>)
 800132e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001330:	4a36      	ldr	r2, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fa9a 	bl	8000870 <HAL_GetTick>
 800133c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fa96 	bl	8000870 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1d5      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	2b00      	cmp	r3, #0
 8001368:	d036      	beq.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d019      	beq.n	80013a6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <HAL_RCC_OscConfig+0x520>)
 8001378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800137e:	f7ff fa77 	bl	8000870 <HAL_GetTick>
 8001382:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001386:	f7ff fa73 	bl	8000870 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1b2      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_RCC_OscConfig+0x520>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x49a>
 80013a4:	e018      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a18      	ldr	r2, [pc, #96]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80013ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fa5d 	bl	8000870 <HAL_GetTick>
 80013b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80013ba:	f7ff fa59 	bl	8000870 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e198      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_RCC_OscConfig+0x520>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8085 	beq.w	80014f0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_RCC_OscConfig+0x524>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <HAL_RCC_OscConfig+0x524>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80013f2:	f7ff fa3d 	bl	8000870 <HAL_GetTick>
 80013f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013f8:	e00c      	b.n	8001414 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fa39 	bl	8000870 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b64      	cmp	r3, #100	; 0x64
 8001406:	d905      	bls.n	8001414 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e178      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
 800140c:	58024400 	.word	0x58024400
 8001410:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001414:	4b96      	ldr	r3, [pc, #600]	; (8001670 <HAL_RCC_OscConfig+0x784>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0ec      	beq.n	80013fa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x54a>
 8001428:	4b92      	ldr	r3, [pc, #584]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a91      	ldr	r2, [pc, #580]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
 8001434:	e02d      	b.n	8001492 <HAL_RCC_OscConfig+0x5a6>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x56c>
 800143e:	4b8d      	ldr	r3, [pc, #564]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a8c      	ldr	r2, [pc, #560]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	4b8a      	ldr	r3, [pc, #552]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a89      	ldr	r2, [pc, #548]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	e01c      	b.n	8001492 <HAL_RCC_OscConfig+0x5a6>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x58e>
 8001460:	4b84      	ldr	r3, [pc, #528]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	4a83      	ldr	r2, [pc, #524]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	4a80      	ldr	r2, [pc, #512]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x5a6>
 800147a:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a7d      	ldr	r2, [pc, #500]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a7a      	ldr	r2, [pc, #488]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149a:	f7ff f9e9 	bl	8000870 <HAL_GetTick>
 800149e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff f9e5 	bl	8000870 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e122      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014b8:	4b6e      	ldr	r3, [pc, #440]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ee      	beq.n	80014a2 <HAL_RCC_OscConfig+0x5b6>
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff f9d3 	bl	8000870 <HAL_GetTick>
 80014ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f9cf 	bl	8000870 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e10c      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014e4:	4b63      	ldr	r3, [pc, #396]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ee      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8101 	beq.w	80016fc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80014fa:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001502:	2b18      	cmp	r3, #24
 8001504:	f000 80bc 	beq.w	8001680 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	2b02      	cmp	r3, #2
 800150e:	f040 8095 	bne.w	800163c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001512:	4b58      	ldr	r3, [pc, #352]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a57      	ldr	r2, [pc, #348]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800151c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff f9a7 	bl	8000870 <HAL_GetTick>
 8001522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff f9a3 	bl	8000870 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0e2      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001538:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001544:	4b4b      	ldr	r3, [pc, #300]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_RCC_OscConfig+0x78c>)
 800154a:	4013      	ands	r3, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	430a      	orrs	r2, r1
 8001558:	4946      	ldr	r1, [pc, #280]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800155a:	4313      	orrs	r3, r2
 800155c:	628b      	str	r3, [r1, #40]	; 0x28
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	3b01      	subs	r3, #1
 8001564:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	3b01      	subs	r3, #1
 800156e:	025b      	lsls	r3, r3, #9
 8001570:	b29b      	uxth	r3, r3
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001578:	3b01      	subs	r3, #1
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001586:	3b01      	subs	r3, #1
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800158e:	4939      	ldr	r1, [pc, #228]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001590:	4313      	orrs	r3, r2
 8001592:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001594:	4b37      	ldr	r3, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	4a36      	ldr	r2, [pc, #216]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a4:	4b35      	ldr	r3, [pc, #212]	; (800167c <HAL_RCC_OscConfig+0x790>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015ac:	00d2      	lsls	r2, r2, #3
 80015ae:	4931      	ldr	r1, [pc, #196]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	f023 020c 	bic.w	r2, r3, #12
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	492c      	ldr	r1, [pc, #176]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80015c6:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	f023 0202 	bic.w	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4928      	ldr	r1, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	4a25      	ldr	r2, [pc, #148]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800160e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff f92c 	bl	8000870 <HAL_GetTick>
 8001618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff f928 	bl	8000870 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e067      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x730>
 800163a:	e05f      	b.n	80016fc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff f912 	bl	8000870 <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff f90e 	bl	8000870 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e04d      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_RCC_OscConfig+0x788>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x764>
 800166e:	e045      	b.n	80016fc <HAL_RCC_OscConfig+0x810>
 8001670:	58024800 	.word	0x58024800
 8001674:	58024400 	.word	0x58024400
 8001678:	fffffc0c 	.word	0xfffffc0c
 800167c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x81c>)
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_RCC_OscConfig+0x81c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	2b01      	cmp	r3, #1
 8001692:	d031      	beq.n	80016f8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f003 0203 	and.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d12a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d122      	bne.n	80016f8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	0a5b      	lsrs	r3, r3, #9
 80016c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d111      	bne.n	80016f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d108      	bne.n	80016f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	0e1b      	lsrs	r3, r3, #24
 80016ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3730      	adds	r7, #48	; 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	58024400 	.word	0x58024400

0800170c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e19c      	b.n	8001a5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b8a      	ldr	r3, [pc, #552]	; (800194c <HAL_RCC_ClockConfig+0x240>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d910      	bls.n	8001750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b87      	ldr	r3, [pc, #540]	; (800194c <HAL_RCC_ClockConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 020f 	bic.w	r2, r3, #15
 8001736:	4985      	ldr	r1, [pc, #532]	; (800194c <HAL_RCC_ClockConfig+0x240>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b83      	ldr	r3, [pc, #524]	; (800194c <HAL_RCC_ClockConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e184      	b.n	8001a5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d010      	beq.n	800177e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001768:	429a      	cmp	r2, r3
 800176a:	d908      	bls.n	800177e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800176c:	4b78      	ldr	r3, [pc, #480]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	4975      	ldr	r1, [pc, #468]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 800177a:	4313      	orrs	r3, r2
 800177c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d010      	beq.n	80017ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	4b70      	ldr	r3, [pc, #448]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001796:	429a      	cmp	r2, r3
 8001798:	d908      	bls.n	80017ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800179a:	4b6d      	ldr	r3, [pc, #436]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	496a      	ldr	r1, [pc, #424]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d010      	beq.n	80017da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	4b64      	ldr	r3, [pc, #400]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d908      	bls.n	80017da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017c8:	4b61      	ldr	r3, [pc, #388]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	495e      	ldr	r1, [pc, #376]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d010      	beq.n	8001808 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d908      	bls.n	8001808 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80017f6:	4b56      	ldr	r3, [pc, #344]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4953      	ldr	r1, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001804:	4313      	orrs	r3, r2
 8001806:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d010      	beq.n	8001836 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	429a      	cmp	r2, r3
 8001822:	d908      	bls.n	8001836 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f023 020f 	bic.w	r2, r3, #15
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4947      	ldr	r1, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001832:	4313      	orrs	r3, r2
 8001834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d055      	beq.n	80018ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	4940      	ldr	r1, [pc, #256]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001850:	4313      	orrs	r3, r2
 8001852:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d107      	bne.n	800186c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800185c:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d121      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0f6      	b.n	8001a5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d107      	bne.n	8001884 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d115      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0ea      	b.n	8001a5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0de      	b.n	8001a5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d6      	b.n	8001a5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f023 0207 	bic.w	r2, r3, #7
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4925      	ldr	r1, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7fe ffd7 	bl	8000870 <HAL_GetTick>
 80018c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c6:	f7fe ffd3 	bl	8000870 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e0be      	b.n	8001a5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d1eb      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d010      	beq.n	800191c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	429a      	cmp	r2, r3
 8001908:	d208      	bcs.n	800191c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f023 020f 	bic.w	r2, r3, #15
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x244>)
 8001918:	4313      	orrs	r3, r2
 800191a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x240>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d214      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_RCC_ClockConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 020f 	bic.w	r2, r3, #15
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_RCC_ClockConfig+0x240>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_RCC_ClockConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e086      	b.n	8001a5a <HAL_RCC_ClockConfig+0x34e>
 800194c:	52002000 	.word	0x52002000
 8001950:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800196c:	429a      	cmp	r2, r3
 800196e:	d208      	bcs.n	8001982 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 800197e:	4313      	orrs	r3, r2
 8001980:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d010      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800199a:	429a      	cmp	r2, r3
 800199c:	d208      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	492e      	ldr	r1, [pc, #184]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699a      	ldr	r2, [r3, #24]
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d208      	bcs.n	80019de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4922      	ldr	r1, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d010      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d208      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4917      	ldr	r1, [pc, #92]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a0c:	f000 f834 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4912      	ldr	r1, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x35c>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_RCC_ClockConfig+0x358>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_RCC_ClockConfig+0x35c>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x360>)
 8001a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_RCC_ClockConfig+0x364>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_RCC_ClockConfig+0x368>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fec4 	bl	80007dc <HAL_InitTick>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	58024400 	.word	0x58024400
 8001a68:	08003078 	.word	0x08003078
 8001a6c:	24000004 	.word	0x24000004
 8001a70:	24000000 	.word	0x24000000
 8001a74:	24000008 	.word	0x24000008

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7e:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a86:	2b18      	cmp	r3, #24
 8001a88:	f200 8155 	bhi.w	8001d36 <HAL_RCC_GetSysClockFreq+0x2be>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001af9 	.word	0x08001af9
 8001a98:	08001d37 	.word	0x08001d37
 8001a9c:	08001d37 	.word	0x08001d37
 8001aa0:	08001d37 	.word	0x08001d37
 8001aa4:	08001d37 	.word	0x08001d37
 8001aa8:	08001d37 	.word	0x08001d37
 8001aac:	08001d37 	.word	0x08001d37
 8001ab0:	08001d37 	.word	0x08001d37
 8001ab4:	08001b1f 	.word	0x08001b1f
 8001ab8:	08001d37 	.word	0x08001d37
 8001abc:	08001d37 	.word	0x08001d37
 8001ac0:	08001d37 	.word	0x08001d37
 8001ac4:	08001d37 	.word	0x08001d37
 8001ac8:	08001d37 	.word	0x08001d37
 8001acc:	08001d37 	.word	0x08001d37
 8001ad0:	08001d37 	.word	0x08001d37
 8001ad4:	08001b25 	.word	0x08001b25
 8001ad8:	08001d37 	.word	0x08001d37
 8001adc:	08001d37 	.word	0x08001d37
 8001ae0:	08001d37 	.word	0x08001d37
 8001ae4:	08001d37 	.word	0x08001d37
 8001ae8:	08001d37 	.word	0x08001d37
 8001aec:	08001d37 	.word	0x08001d37
 8001af0:	08001d37 	.word	0x08001d37
 8001af4:	08001b2b 	.word	0x08001b2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001af8:	4b94      	ldr	r3, [pc, #592]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b04:	4b91      	ldr	r3, [pc, #580]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001b16:	e111      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001b18:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b1a:	61bb      	str	r3, [r7, #24]
    break;
 8001b1c:	e10e      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001b1e:	4b8d      	ldr	r3, [pc, #564]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b20:	61bb      	str	r3, [r7, #24]
    break;
 8001b22:	e10b      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001b24:	4b8c      	ldr	r3, [pc, #560]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001b26:	61bb      	str	r3, [r7, #24]
    break;
 8001b28:	e108      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001b2a:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001b34:	4b85      	ldr	r3, [pc, #532]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001b40:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001b4a:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	08db      	lsrs	r3, r3, #3
 8001b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80e1 	beq.w	8001d30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	f000 8083 	beq.w	8001c7c <HAL_RCC_GetSysClockFreq+0x204>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	f200 80a1 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x248>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x114>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d056      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b8a:	e099      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b8c:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d02d      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b98:	4b6c      	ldr	r3, [pc, #432]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	08db      	lsrs	r3, r3, #3
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	4a6b      	ldr	r2, [pc, #428]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bc2:	4b62      	ldr	r3, [pc, #392]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bd6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001bf2:	e087      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001d60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c06:	4b51      	ldr	r3, [pc, #324]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c36:	e065      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c4a:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c7a:	e043      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001d68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ca2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001cbe:	e021      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ce6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	0a5b      	lsrs	r3, r3, #9
 8001d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d0e:	3301      	adds	r3, #1
 8001d10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d28:	ee17 3a90 	vmov	r3, s15
 8001d2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001d2e:	e005      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
    break;
 8001d34:	e002      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d38:	61bb      	str	r3, [r7, #24]
    break;
 8001d3a:	bf00      	nop
  }

  return sysclockfreq;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	03d09000 	.word	0x03d09000
 8001d54:	003d0900 	.word	0x003d0900
 8001d58:	017d7840 	.word	0x017d7840
 8001d5c:	46000000 	.word	0x46000000
 8001d60:	4c742400 	.word	0x4c742400
 8001d64:	4a742400 	.word	0x4a742400
 8001d68:	4bbebc20 	.word	0x4bbebc20

08001d6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d74:	2300      	movs	r3, #0
 8001d76:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d78:	2300      	movs	r3, #0
 8001d7a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d03f      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001d90:	d02a      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001d96:	d824      	bhi.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d9c:	d018      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001da2:	d81e      	bhi.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dac:	d007      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dae:	e018      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001db0:	4bab      	ldr	r3, [pc, #684]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	4aaa      	ldr	r2, [pc, #680]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001dbc:	e015      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 ff11 	bl	8002bec <RCCEx_PLL2_Config>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001dce:	e00c      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3324      	adds	r3, #36	; 0x24
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 ffba 	bl	8002d50 <RCCEx_PLL3_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001de0:	e003      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
      break;
 8001de6:	e000      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001df0:	4b9b      	ldr	r3, [pc, #620]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dfc:	4998      	ldr	r1, [pc, #608]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	650b      	str	r3, [r1, #80]	; 0x50
 8001e02:	e001      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d03d      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d826      	bhi.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001e1c:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e39 	.word	0x08001e39
 8001e28:	08001e47 	.word	0x08001e47
 8001e2c:	08001e59 	.word	0x08001e59
 8001e30:	08001e71 	.word	0x08001e71
 8001e34:	08001e71 	.word	0x08001e71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e38:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	4a88      	ldr	r2, [pc, #544]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001e44:	e015      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fecd 	bl	8002bec <RCCEx_PLL2_Config>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001e56:	e00c      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3324      	adds	r3, #36	; 0x24
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 ff76 	bl	8002d50 <RCCEx_PLL3_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001e68:	e003      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8001e6e:	e000      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	f023 0207 	bic.w	r2, r3, #7
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	4976      	ldr	r1, [pc, #472]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	650b      	str	r3, [r1, #80]	; 0x50
 8001e8a:	e001      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d042      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea4:	d02b      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8001ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eaa:	d825      	bhi.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001eac:	2bc0      	cmp	r3, #192	; 0xc0
 8001eae:	d028      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8001eb2:	d821      	bhi.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001eb4:	2b80      	cmp	r3, #128	; 0x80
 8001eb6:	d016      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d81d      	bhi.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d007      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001ec4:	e018      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ec6:	4b66      	ldr	r3, [pc, #408]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	4a65      	ldr	r2, [pc, #404]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001ed2:	e017      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fe86 	bl	8002bec <RCCEx_PLL2_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001ee4:	e00e      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3324      	adds	r3, #36	; 0x24
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 ff2f 	bl	8002d50 <RCCEx_PLL3_Config>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001ef6:	e005      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
      break;
 8001efc:	e002      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8001f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001f0a:	4b55      	ldr	r3, [pc, #340]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4952      	ldr	r1, [pc, #328]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	650b      	str	r3, [r1, #80]	; 0x50
 8001f1c:	e001      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d049      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f38:	d030      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8001f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f3e:	d82a      	bhi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001f40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001f44:	d02c      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8001f46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001f4a:	d824      	bhi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f50:	d018      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8001f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f56:	d81e      	bhi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f60:	d007      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8001f62:	e018      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f64:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f70:	e017      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fe37 	bl	8002bec <RCCEx_PLL2_Config>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001f82:	e00e      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3324      	adds	r3, #36	; 0x24
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fee0 	bl	8002d50 <RCCEx_PLL3_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f94:	e005      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8001f9c:	bf00      	nop
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8001fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001fb6:	492a      	ldr	r1, [pc, #168]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	658b      	str	r3, [r1, #88]	; 0x58
 8001fbc:	e001      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04c      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fd8:	d030      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8001fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fde:	d82a      	bhi.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8001fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fe4:	d02c      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001fe6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fea:	d824      	bhi.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8001fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff0:	d018      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8001ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff6:	d81e      	bhi.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d007      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002002:	e018      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800200a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002010:	e017      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fde7 	bl	8002bec <RCCEx_PLL2_Config>
 800201e:	4603      	mov	r3, r0
 8002020:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002022:	e00e      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3324      	adds	r3, #36	; 0x24
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fe90 	bl	8002d50 <RCCEx_PLL3_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002034:	e005      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
      break;
 800203a:	e002      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800203c:	bf00      	nop
 800203e:	e000      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002056:	4902      	ldr	r1, [pc, #8]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	658b      	str	r3, [r1, #88]	; 0x58
 800205c:	e004      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800205e:	bf00      	nop
 8002060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d032      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	2b30      	cmp	r3, #48	; 0x30
 800207a:	d01c      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800207c:	2b30      	cmp	r3, #48	; 0x30
 800207e:	d817      	bhi.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002080:	2b20      	cmp	r3, #32
 8002082:	d00c      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002084:	2b20      	cmp	r3, #32
 8002086:	d813      	bhi.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d016      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800208c:	2b10      	cmp	r3, #16
 800208e:	d10f      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002090:	4baf      	ldr	r3, [pc, #700]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	4aae      	ldr	r2, [pc, #696]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800209c:	e00e      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2102      	movs	r1, #2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fda1 	bl	8002bec <RCCEx_PLL2_Config>
 80020aa:	4603      	mov	r3, r0
 80020ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80020ae:	e005      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	75fb      	strb	r3, [r7, #23]
      break;
 80020b4:	e002      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80020b6:	bf00      	nop
 80020b8:	e000      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80020ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020c2:	4ba3      	ldr	r3, [pc, #652]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	49a0      	ldr	r1, [pc, #640]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80020d4:	e001      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d047      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020ee:	d030      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80020f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020f4:	d82a      	bhi.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80020f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80020fa:	d02c      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80020fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002100:	d824      	bhi.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002106:	d018      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210c:	d81e      	bhi.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002116:	d007      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002118:	e018      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800211a:	4b8d      	ldr	r3, [pc, #564]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	4a8c      	ldr	r2, [pc, #560]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002126:	e017      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fd5c 	bl	8002bec <RCCEx_PLL2_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002138:	e00e      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3324      	adds	r3, #36	; 0x24
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fe05 	bl	8002d50 <RCCEx_PLL3_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800214a:	e005      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	75fb      	strb	r3, [r7, #23]
      break;
 8002150:	e002      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002152:	bf00      	nop
 8002154:	e000      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800215e:	4b7c      	ldr	r3, [pc, #496]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002162:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	4979      	ldr	r1, [pc, #484]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800216c:	4313      	orrs	r3, r2
 800216e:	650b      	str	r3, [r1, #80]	; 0x50
 8002170:	e001      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d049      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218a:	d02e      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002190:	d828      	bhi.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002196:	d02a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800219c:	d822      	bhi.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800219e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021a2:	d026      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80021a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021a8:	d81c      	bhi.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80021aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ae:	d010      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80021b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021b4:	d816      	bhi.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01d      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80021ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021be:	d111      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	2101      	movs	r1, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fd10 	bl	8002bec <RCCEx_PLL2_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80021d0:	e012      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3324      	adds	r3, #36	; 0x24
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fdb9 	bl	8002d50 <RCCEx_PLL3_Config>
 80021de:	4603      	mov	r3, r0
 80021e0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80021e2:	e009      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
      break;
 80021e8:	e006      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80021ea:	bf00      	nop
 80021ec:	e004      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80021f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80021fe:	4b54      	ldr	r3, [pc, #336]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002202:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	4951      	ldr	r1, [pc, #324]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	650b      	str	r3, [r1, #80]	; 0x50
 8002210:	e001      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d04b      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800222c:	d02e      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800222e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002232:	d828      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002238:	d02a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d822      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002244:	d026      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002246:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800224a:	d81c      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800224c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002250:	d010      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002256:	d816      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01d      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800225c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002260:	d111      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	2101      	movs	r1, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fcbf 	bl	8002bec <RCCEx_PLL2_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002272:	e012      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3324      	adds	r3, #36	; 0x24
 8002278:	2101      	movs	r1, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fd68 	bl	8002d50 <RCCEx_PLL3_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002284:	e009      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
      break;
 800228a:	e006      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800228c:	bf00      	nop
 800228e:	e004      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002290:	bf00      	nop
 8002292:	e002      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002294:	bf00      	nop
 8002296:	e000      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80022ae:	4928      	ldr	r1, [pc, #160]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	658b      	str	r3, [r1, #88]	; 0x58
 80022b4:	e001      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d02f      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ce:	d00e      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 80022d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d4:	d814      	bhi.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d015      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80022da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022de:	d10f      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80022e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80022ec:	e00c      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fc79 	bl	8002bec <RCCEx_PLL2_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80022fe:	e003      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
      break;
 8002304:	e000      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231a:	490d      	ldr	r1, [pc, #52]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	650b      	str	r3, [r1, #80]	; 0x50
 8002320:	e001      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d033      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	2b03      	cmp	r3, #3
 8002338:	d81c      	bhi.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	0800237b 	.word	0x0800237b
 8002344:	08002355 	.word	0x08002355
 8002348:	08002363 	.word	0x08002363
 800234c:	0800237b 	.word	0x0800237b
 8002350:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002354:	4bb8      	ldr	r3, [pc, #736]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	4ab7      	ldr	r2, [pc, #732]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800235a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002360:	e00c      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2102      	movs	r1, #2
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fc3f 	bl	8002bec <RCCEx_PLL2_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002372:	e003      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	75fb      	strb	r3, [r7, #23]
      break;
 8002378:	e000      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800237a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002382:	4bad      	ldr	r3, [pc, #692]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	49aa      	ldr	r1, [pc, #680]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002390:	4313      	orrs	r3, r2
 8002392:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002394:	e001      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8086 	beq.w	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a8:	4ba4      	ldr	r3, [pc, #656]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4aa3      	ldr	r2, [pc, #652]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023b4:	f7fe fa5c 	bl	8000870 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ba:	e009      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7fe fa58 	bl	8000870 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d902      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	75fb      	strb	r3, [r7, #23]
        break;
 80023ce:	e005      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023d0:	4b9a      	ldr	r3, [pc, #616]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d166      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80023e2:	4b95      	ldr	r3, [pc, #596]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80023e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80023ec:	4053      	eors	r3, r2
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d013      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023f6:	4b90      	ldr	r3, [pc, #576]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002400:	4b8d      	ldr	r3, [pc, #564]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a8c      	ldr	r2, [pc, #560]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800240c:	4b8a      	ldr	r3, [pc, #552]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a89      	ldr	r2, [pc, #548]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002418:	4a87      	ldr	r2, [pc, #540]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002428:	d115      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7fe fa21 	bl	8000870 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002430:	e00b      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe fa1d 	bl	8000870 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d902      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	75fb      	strb	r3, [r7, #23]
            break;
 8002448:	e005      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800244a:	4b7b      	ldr	r3, [pc, #492]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ed      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002456:	7dfb      	ldrb	r3, [r7, #23]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d126      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800246a:	d10d      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800246c:	4b72      	ldr	r3, [pc, #456]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800247a:	0919      	lsrs	r1, r3, #4
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800247e:	400b      	ands	r3, r1
 8002480:	496d      	ldr	r1, [pc, #436]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	610b      	str	r3, [r1, #16]
 8002486:	e005      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002488:	4b6b      	ldr	r3, [pc, #428]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800248e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002492:	6113      	str	r3, [r2, #16]
 8002494:	4b68      	ldr	r3, [pc, #416]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	670b      	str	r3, [r1, #112]	; 0x70
 80024a8:	e004      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	75bb      	strb	r3, [r7, #22]
 80024ae:	e001      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d07e      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c4:	2b28      	cmp	r3, #40	; 0x28
 80024c6:	d867      	bhi.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	0800259f 	.word	0x0800259f
 80024d4:	08002599 	.word	0x08002599
 80024d8:	08002599 	.word	0x08002599
 80024dc:	08002599 	.word	0x08002599
 80024e0:	08002599 	.word	0x08002599
 80024e4:	08002599 	.word	0x08002599
 80024e8:	08002599 	.word	0x08002599
 80024ec:	08002599 	.word	0x08002599
 80024f0:	08002575 	.word	0x08002575
 80024f4:	08002599 	.word	0x08002599
 80024f8:	08002599 	.word	0x08002599
 80024fc:	08002599 	.word	0x08002599
 8002500:	08002599 	.word	0x08002599
 8002504:	08002599 	.word	0x08002599
 8002508:	08002599 	.word	0x08002599
 800250c:	08002599 	.word	0x08002599
 8002510:	08002587 	.word	0x08002587
 8002514:	08002599 	.word	0x08002599
 8002518:	08002599 	.word	0x08002599
 800251c:	08002599 	.word	0x08002599
 8002520:	08002599 	.word	0x08002599
 8002524:	08002599 	.word	0x08002599
 8002528:	08002599 	.word	0x08002599
 800252c:	08002599 	.word	0x08002599
 8002530:	0800259f 	.word	0x0800259f
 8002534:	08002599 	.word	0x08002599
 8002538:	08002599 	.word	0x08002599
 800253c:	08002599 	.word	0x08002599
 8002540:	08002599 	.word	0x08002599
 8002544:	08002599 	.word	0x08002599
 8002548:	08002599 	.word	0x08002599
 800254c:	08002599 	.word	0x08002599
 8002550:	0800259f 	.word	0x0800259f
 8002554:	08002599 	.word	0x08002599
 8002558:	08002599 	.word	0x08002599
 800255c:	08002599 	.word	0x08002599
 8002560:	08002599 	.word	0x08002599
 8002564:	08002599 	.word	0x08002599
 8002568:	08002599 	.word	0x08002599
 800256c:	08002599 	.word	0x08002599
 8002570:	0800259f 	.word	0x0800259f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fb36 	bl	8002bec <RCCEx_PLL2_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002584:	e00c      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3324      	adds	r3, #36	; 0x24
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fbdf 	bl	8002d50 <RCCEx_PLL3_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002596:	e003      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	75fb      	strb	r3, [r7, #23]
      break;
 800259c:	e000      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800259e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b2:	4921      	ldr	r1, [pc, #132]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	654b      	str	r3, [r1, #84]	; 0x54
 80025b8:	e001      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d03e      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d820      	bhi.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80025d2:	a201      	add	r2, pc, #4	; (adr r2, 80025d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80025d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d8:	0800261b 	.word	0x0800261b
 80025dc:	080025f1 	.word	0x080025f1
 80025e0:	08002603 	.word	0x08002603
 80025e4:	0800261b 	.word	0x0800261b
 80025e8:	0800261b 	.word	0x0800261b
 80025ec:	0800261b 	.word	0x0800261b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 faf8 	bl	8002bec <RCCEx_PLL2_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002600:	e00c      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3324      	adds	r3, #36	; 0x24
 8002606:	2101      	movs	r1, #1
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fba1 	bl	8002d50 <RCCEx_PLL3_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002612:	e003      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	75fb      	strb	r3, [r7, #23]
      break;
 8002618:	e000      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800261a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d110      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	4902      	ldr	r1, [pc, #8]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	654b      	str	r3, [r1, #84]	; 0x54
 8002634:	e008      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002636:	bf00      	nop
 8002638:	58024400 	.word	0x58024400
 800263c:	58024800 	.word	0x58024800
 8002640:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d039      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	2b05      	cmp	r3, #5
 800265c:	d820      	bhi.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	080026a7 	.word	0x080026a7
 8002668:	0800267d 	.word	0x0800267d
 800266c:	0800268f 	.word	0x0800268f
 8002670:	080026a7 	.word	0x080026a7
 8002674:	080026a7 	.word	0x080026a7
 8002678:	080026a7 	.word	0x080026a7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fab2 	bl	8002bec <RCCEx_PLL2_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800268c:	e00c      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3324      	adds	r3, #36	; 0x24
 8002692:	2101      	movs	r1, #1
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fb5b 	bl	8002d50 <RCCEx_PLL3_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800269e:	e003      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	75fb      	strb	r3, [r7, #23]
      break;
 80026a4:	e000      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80026a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ae:	4bb7      	ldr	r3, [pc, #732]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	49b3      	ldr	r1, [pc, #716]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	658b      	str	r3, [r1, #88]	; 0x58
 80026c2:	e001      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d04b      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026de:	d02e      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80026e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e4:	d828      	bhi.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ea:	d02a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f0:	d822      	bhi.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80026f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026f6:	d026      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80026f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026fc:	d81c      	bhi.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80026fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002702:	d010      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002708:	d816      	bhi.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01d      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800270e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002712:	d111      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fa66 	bl	8002bec <RCCEx_PLL2_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002724:	e012      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3324      	adds	r3, #36	; 0x24
 800272a:	2102      	movs	r1, #2
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fb0f 	bl	8002d50 <RCCEx_PLL3_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002736:	e009      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	75fb      	strb	r3, [r7, #23]
      break;
 800273c:	e006      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800273e:	bf00      	nop
 8002740:	e004      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800274a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002752:	4b8e      	ldr	r3, [pc, #568]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002760:	498a      	ldr	r1, [pc, #552]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002762:	4313      	orrs	r3, r2
 8002764:	654b      	str	r3, [r1, #84]	; 0x54
 8002766:	e001      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d04b      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002782:	d02e      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002784:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002788:	d828      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	d02a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002794:	d822      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002796:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800279a:	d026      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800279c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027a0:	d81c      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80027a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a6:	d010      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80027a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ac:	d816      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01d      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d111      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fa14 	bl	8002bec <RCCEx_PLL2_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80027c8:	e012      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3324      	adds	r3, #36	; 0x24
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fabd 	bl	8002d50 <RCCEx_PLL3_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80027da:	e009      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	75fb      	strb	r3, [r7, #23]
      break;
 80027e0:	e006      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80027e2:	bf00      	nop
 80027e4:	e004      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80027ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002804:	4961      	ldr	r1, [pc, #388]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002806:	4313      	orrs	r3, r2
 8002808:	658b      	str	r3, [r1, #88]	; 0x58
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b00      	cmp	r3, #0
 800281a:	d04b      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002822:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002826:	d02e      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8002828:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800282c:	d828      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800282e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002832:	d02a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8002834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002838:	d822      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800283a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800283e:	d026      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002840:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002844:	d81c      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800284a:	d010      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800284c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002850:	d816      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01d      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285a:	d111      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f9c2 	bl	8002bec <RCCEx_PLL2_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800286c:	e012      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3324      	adds	r3, #36	; 0x24
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fa6b 	bl	8002d50 <RCCEx_PLL3_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800287e:	e009      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
      break;
 8002884:	e006      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002886:	bf00      	nop
 8002888:	e004      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800288a:	bf00      	nop
 800288c:	e002      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800288e:	bf00      	nop
 8002890:	e000      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800289a:	4b3c      	ldr	r3, [pc, #240]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028a8:	4938      	ldr	r1, [pc, #224]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	658b      	str	r3, [r1, #88]	; 0x58
 80028ae:	e001      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ca:	d10a      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3324      	adds	r3, #36	; 0x24
 80028d0:	2102      	movs	r1, #2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fa3c 	bl	8002d50 <RCCEx_PLL3_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f0:	4926      	ldr	r1, [pc, #152]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290c:	d10a      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3324      	adds	r3, #36	; 0x24
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fa1b 	bl	8002d50 <RCCEx_PLL3_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002934:	4313      	orrs	r3, r2
 8002936:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d036      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800294a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800294e:	d01f      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002954:	d817      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295e:	d009      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002960:	e011      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f93f 	bl	8002bec <RCCEx_PLL2_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002972:	e00e      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3324      	adds	r3, #36	; 0x24
 8002978:	2102      	movs	r1, #2
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f9e8 	bl	8002d50 <RCCEx_PLL3_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002984:	e005      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800298c:	58024400 	.word	0x58024400
      break;
 8002990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002998:	4b93      	ldr	r3, [pc, #588]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029a6:	4990      	ldr	r1, [pc, #576]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	658b      	str	r3, [r1, #88]	; 0x58
 80029ac:	e001      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d033      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029c8:	d01c      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80029ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029ce:	d816      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80029d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d4:	d003      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80029d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029da:	d007      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80029dc:	e00f      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029de:	4b82      	ldr	r3, [pc, #520]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	4a81      	ldr	r2, [pc, #516]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80029ea:	e00c      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3324      	adds	r3, #36	; 0x24
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f9ac 	bl	8002d50 <RCCEx_PLL3_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80029fc:	e003      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
      break;
 8002a02:	e000      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8002a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a0c:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1a:	4973      	ldr	r1, [pc, #460]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	654b      	str	r3, [r1, #84]	; 0x54
 8002a20:	e001      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d029      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d007      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8002a40:	e00f      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a42:	4b69      	ldr	r3, [pc, #420]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	4a68      	ldr	r2, [pc, #416]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	2102      	movs	r1, #2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f8c8 	bl	8002bec <RCCEx_PLL2_Config>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002a60:	e002      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
      break;
 8002a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002a6e:	4b5e      	ldr	r3, [pc, #376]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	495b      	ldr	r1, [pc, #364]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a80:	e001      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3324      	adds	r3, #36	; 0x24
 8002a96:	2102      	movs	r1, #2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f959 	bl	8002d50 <RCCEx_PLL3_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d030      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002abc:	d017      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8002abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ac2:	d811      	bhi.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8002ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac8:	d013      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ace:	d80b      	bhi.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ada:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	4a42      	ldr	r2, [pc, #264]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002ae6:	e007      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	75fb      	strb	r3, [r7, #23]
      break;
 8002aec:	e004      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002aee:	bf00      	nop
 8002af0:	e002      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002af2:	bf00      	nop
 8002af4:	e000      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8002af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b0a:	4937      	ldr	r1, [pc, #220]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	654b      	str	r3, [r1, #84]	; 0x54
 8002b10:	e001      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	492e      	ldr	r1, [pc, #184]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b4e:	4926      	ldr	r1, [pc, #152]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6c:	491e      	ldr	r1, [pc, #120]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b88:	6113      	str	r3, [r2, #16]
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002b94:	4914      	ldr	r1, [pc, #80]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	da08      	bge.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bae:	490e      	ldr	r1, [pc, #56]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	4906      	ldr	r1, [pc, #24]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002bd4:	7dbb      	ldrb	r3, [r7, #22]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	58024400 	.word	0x58024400

08002bec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d101      	bne.n	8002c0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e099      	b.n	8002d3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002c0a:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c16:	f7fd fe2b 	bl	8000870 <HAL_GetTick>
 8002c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002c1c:	e008      	b.n	8002c30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002c1e:	f7fd fe27 	bl	8000870 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e086      	b.n	8002d3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002c30:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002c3c:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	031b      	lsls	r3, r3, #12
 8002c4a:	493f      	ldr	r1, [pc, #252]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	025b      	lsls	r3, r3, #9
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c80:	4931      	ldr	r1, [pc, #196]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	492d      	ldr	r1, [pc, #180]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	f023 0220 	bic.w	r2, r3, #32
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	4928      	ldr	r1, [pc, #160]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002cb0:	f023 0310 	bic.w	r3, r3, #16
 8002cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <RCCEx_PLL2_Config+0x160>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	69d2      	ldr	r2, [r2, #28]
 8002cc2:	00d2      	lsls	r2, r2, #3
 8002cc4:	4920      	ldr	r1, [pc, #128]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ce8:	e00f      	b.n	8002d0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002cfc:	e005      	b.n	8002d0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002d10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d16:	f7fd fdab 	bl	8000870 <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002d1c:	e008      	b.n	8002d30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002d1e:	f7fd fda7 	bl	8000870 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e006      	b.n	8002d3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <RCCEx_PLL2_Config+0x15c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	ffff0007 	.word	0xffff0007

08002d50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002d5e:	4b53      	ldr	r3, [pc, #332]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d101      	bne.n	8002d6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e099      	b.n	8002ea2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002d6e:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7a:	f7fd fd79 	bl	8000870 <HAL_GetTick>
 8002d7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002d82:	f7fd fd75 	bl	8000870 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e086      	b.n	8002ea2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002d94:	4b45      	ldr	r3, [pc, #276]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002da0:	4b42      	ldr	r3, [pc, #264]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	051b      	lsls	r3, r3, #20
 8002dae:	493f      	ldr	r1, [pc, #252]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	628b      	str	r3, [r1, #40]	; 0x28
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	025b      	lsls	r3, r3, #9
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002de4:	4931      	ldr	r1, [pc, #196]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002dea:	4b30      	ldr	r3, [pc, #192]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	492d      	ldr	r1, [pc, #180]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4928      	ldr	r1, [pc, #160]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002e0e:	4b27      	ldr	r3, [pc, #156]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	4a26      	ldr	r2, [pc, #152]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002e1a:	4b24      	ldr	r3, [pc, #144]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <RCCEx_PLL3_Config+0x160>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	69d2      	ldr	r2, [r2, #28]
 8002e26:	00d2      	lsls	r2, r2, #3
 8002e28:	4920      	ldr	r1, [pc, #128]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e4c:	e00f      	b.n	8002e6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d106      	bne.n	8002e62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	4a14      	ldr	r2, [pc, #80]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e60:	e005      	b.n	8002e6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a0e      	ldr	r2, [pc, #56]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7a:	f7fd fcf9 	bl	8000870 <HAL_GetTick>
 8002e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002e80:	e008      	b.n	8002e94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002e82:	f7fd fcf5 	bl	8000870 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e006      	b.n	8002ea2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <RCCEx_PLL3_Config+0x15c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	ffff0007 	.word	0xffff0007

08002eb4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e04d      	b.n	8002f62 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7a5b      	ldrb	r3, [r3, #9]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fb2c 	bl	8000534 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 0120 	bic.w	r1, r3, #32
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0204 	orr.w	r2, r2, #4
 8002f06:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d104      	bne.n	8002f20 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e020      	b.n	8002f62 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f20:	f7fd fca6 	bl	8000870 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002f26:	e00e      	b.n	8002f46 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002f28:	f7fd fca2 	bl	8000870 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d907      	bls.n	8002f46 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00d      	b.n	8002f62 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d0e9      	beq.n	8002f28 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7a1b      	ldrb	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e03d      	b.n	8003000 <HAL_RNG_GenerateRandomNumber+0x96>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7a5b      	ldrb	r3, [r3, #9]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d12c      	bne.n	8002fee <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f9a:	f7fd fc69 	bl	8000870 <HAL_GetTick>
 8002f9e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002fa0:	e011      	b.n	8002fc6 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002fa2:	f7fd fc65 	bl	8000870 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d90a      	bls.n	8002fc6 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e01c      	b.n	8003000 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d1e6      	bne.n	8002fa2 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	725a      	strb	r2, [r3, #9]
 8002fec:	e004      	b.n	8002ff8 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	721a      	strb	r2, [r3, #8]

  return status;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <__libc_init_array>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	4d0d      	ldr	r5, [pc, #52]	; (8003040 <__libc_init_array+0x38>)
 800300c:	4c0d      	ldr	r4, [pc, #52]	; (8003044 <__libc_init_array+0x3c>)
 800300e:	1b64      	subs	r4, r4, r5
 8003010:	10a4      	asrs	r4, r4, #2
 8003012:	2600      	movs	r6, #0
 8003014:	42a6      	cmp	r6, r4
 8003016:	d109      	bne.n	800302c <__libc_init_array+0x24>
 8003018:	4d0b      	ldr	r5, [pc, #44]	; (8003048 <__libc_init_array+0x40>)
 800301a:	4c0c      	ldr	r4, [pc, #48]	; (800304c <__libc_init_array+0x44>)
 800301c:	f000 f820 	bl	8003060 <_init>
 8003020:	1b64      	subs	r4, r4, r5
 8003022:	10a4      	asrs	r4, r4, #2
 8003024:	2600      	movs	r6, #0
 8003026:	42a6      	cmp	r6, r4
 8003028:	d105      	bne.n	8003036 <__libc_init_array+0x2e>
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003030:	4798      	blx	r3
 8003032:	3601      	adds	r6, #1
 8003034:	e7ee      	b.n	8003014 <__libc_init_array+0xc>
 8003036:	f855 3b04 	ldr.w	r3, [r5], #4
 800303a:	4798      	blx	r3
 800303c:	3601      	adds	r6, #1
 800303e:	e7f2      	b.n	8003026 <__libc_init_array+0x1e>
 8003040:	08003088 	.word	0x08003088
 8003044:	08003088 	.word	0x08003088
 8003048:	08003088 	.word	0x08003088
 800304c:	0800308c 	.word	0x0800308c

08003050 <memset>:
 8003050:	4402      	add	r2, r0
 8003052:	4603      	mov	r3, r0
 8003054:	4293      	cmp	r3, r2
 8003056:	d100      	bne.n	800305a <memset+0xa>
 8003058:	4770      	bx	lr
 800305a:	f803 1b01 	strb.w	r1, [r3], #1
 800305e:	e7f9      	b.n	8003054 <memset+0x4>

08003060 <_init>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr

0800306c <_fini>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr
