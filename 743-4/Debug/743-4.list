
743-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbc0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800ce58  0800ce58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ced4  0800ced4  0001ced4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  24000000  0800ced8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a5c  24000168  0800d040  00020168  2**2
                  ALLOC
  7 ._user_heap_stack 00004004  24001bc4  0800d040  00021bc4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002af13  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004f56  00000000  00000000  0004b0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012c8  00000000  00000000  00050000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000010f8  00000000  00000000  000512c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000732d  00000000  00000000  000523c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a708  00000000  00000000  000596ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00157aa9  00000000  00000000  00073df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001cb89e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004ba8  00000000  00000000  001cb8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000168 	.word	0x24000168
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ce40 	.word	0x0800ce40

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400016c 	.word	0x2400016c
 80002d4:	0800ce40 	.word	0x0800ce40

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <MX_GPIO_Init+0xdc>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a2f      	ldr	r2, [pc, #188]	; (80003b4 <MX_GPIO_Init+0xdc>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b2d      	ldr	r3, [pc, #180]	; (80003b4 <MX_GPIO_Init+0xdc>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800030c:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <MX_GPIO_Init+0xdc>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a28      	ldr	r2, [pc, #160]	; (80003b4 <MX_GPIO_Init+0xdc>)
 8000314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <MX_GPIO_Init+0xdc>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032a:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <MX_GPIO_Init+0xdc>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a20      	ldr	r2, [pc, #128]	; (80003b4 <MX_GPIO_Init+0xdc>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <MX_GPIO_Init+0xdc>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_GPIO_Init+0xdc>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a19      	ldr	r2, [pc, #100]	; (80003b4 <MX_GPIO_Init+0xdc>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_GPIO_Init+0xdc>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <MX_GPIO_Init+0xdc>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	4a11      	ldr	r2, [pc, #68]	; (80003b4 <MX_GPIO_Init+0xdc>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_GPIO_Init+0xdc>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2108      	movs	r1, #8
 8000388:	480b      	ldr	r0, [pc, #44]	; (80003b8 <MX_GPIO_Init+0xe0>)
 800038a:	f000 ff9f 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PE3_Pin;
 800038e:	2308      	movs	r3, #8
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2300      	movs	r3, #0
 800039c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <MX_GPIO_Init+0xe0>)
 80003a6:	f000 fde1 	bl	8000f6c <HAL_GPIO_Init>

}
 80003aa:	bf00      	nop
 80003ac:	3728      	adds	r7, #40	; 0x28
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	58024400 	.word	0x58024400
 80003b8:	58021000 	.word	0x58021000

080003bc <MPU_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80003c2:	463b      	mov	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80003ce:	f000 fd51 	bl	8000e74 <HAL_MPU_Disable>
	
  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80003d2:	2301      	movs	r3, #1
 80003d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80003da:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80003de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80003e0:	231b      	movs	r3, #27
 80003e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80003e4:	2300      	movs	r3, #0
 80003e6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80003f4:	2301      	movs	r3, #1
 80003f6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80003f8:	2301      	movs	r3, #1
 80003fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80003fc:	2300      	movs	r3, #0
 80003fe:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000400:	463b      	mov	r3, r7
 8000402:	4618      	mov	r0, r3
 8000404:	f000 fd6e 	bl	8000ee4 <HAL_MPU_ConfigRegion>
	
  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000408:	2301      	movs	r3, #1
 800040a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 800040c:	2301      	movs	r3, #1
 800040e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 8000410:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000414:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000416:	2316      	movs	r3, #22
 8000418:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 800041a:	2305      	movs	r3, #5
 800041c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 800041e:	2301      	movs	r3, #1
 8000420:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000422:	2301      	movs	r3, #1
 8000424:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000426:	2300      	movs	r3, #0
 8000428:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 800042e:	2301      	movs	r3, #1
 8000430:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000432:	2300      	movs	r3, #0
 8000434:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000436:	463b      	mov	r3, r7
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fd53 	bl	8000ee4 <HAL_MPU_ConfigRegion>
	
  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800043e:	2301      	movs	r3, #1
 8000440:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 8000442:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000446:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000448:	2312      	movs	r3, #18
 800044a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800044c:	2303      	movs	r3, #3
 800044e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000450:	2301      	movs	r3, #1
 8000452:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000454:	2301      	movs	r3, #1
 8000456:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8000458:	2301      	movs	r3, #1
 800045a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 800045c:	2302      	movs	r3, #2
 800045e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000460:	2301      	movs	r3, #1
 8000462:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000464:	2300      	movs	r3, #0
 8000466:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000468:	2300      	movs	r3, #0
 800046a:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800046c:	463b      	mov	r3, r7
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fd38 	bl	8000ee4 <HAL_MPU_ConfigRegion>
	
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000474:	2004      	movs	r0, #4
 8000476:	f000 fd15 	bl	8000ea4 <HAL_MPU_Enable>
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <CPU_CACHE_Enable>:

static void CPU_CACHE_Enable(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800048a:	4b34      	ldr	r3, [pc, #208]	; (800055c <CPU_CACHE_Enable+0xd8>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000492:	2b00      	cmp	r3, #0
 8000494:	d11b      	bne.n	80004ce <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000496:	f3bf 8f4f 	dsb	sy
}
 800049a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800049c:	f3bf 8f6f 	isb	sy
}
 80004a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004a2:	4b2e      	ldr	r3, [pc, #184]	; (800055c <CPU_CACHE_Enable+0xd8>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004aa:	f3bf 8f4f 	dsb	sy
}
 80004ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b0:	f3bf 8f6f 	isb	sy
}
 80004b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <CPU_CACHE_Enable+0xd8>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a28      	ldr	r2, [pc, #160]	; (800055c <CPU_CACHE_Enable+0xd8>)
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004c2:	f3bf 8f4f 	dsb	sy
}
 80004c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c8:	f3bf 8f6f 	isb	sy
}
 80004cc:	e000      	b.n	80004d0 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004d0:	4b22      	ldr	r3, [pc, #136]	; (800055c <CPU_CACHE_Enable+0xd8>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d138      	bne.n	800054e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <CPU_CACHE_Enable+0xd8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004e4:	f3bf 8f4f 	dsb	sy
}
 80004e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <CPU_CACHE_Enable+0xd8>)
 80004ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	0b5b      	lsrs	r3, r3, #13
 80004f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	08db      	lsrs	r3, r3, #3
 8000500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000504:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	015a      	lsls	r2, r3, #5
 800050a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800050e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000514:	4911      	ldr	r1, [pc, #68]	; (800055c <CPU_CACHE_Enable+0xd8>)
 8000516:	4313      	orrs	r3, r2
 8000518:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	1e5a      	subs	r2, r3, #1
 8000520:	607a      	str	r2, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1ef      	bne.n	8000506 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	1e5a      	subs	r2, r3, #1
 800052a:	60ba      	str	r2, [r7, #8]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1e5      	bne.n	80004fc <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <CPU_CACHE_Enable+0xd8>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <CPU_CACHE_Enable+0xd8>)
 800053c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000540:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000542:	f3bf 8f4f 	dsb	sy
}
 8000546:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000548:	f3bf 8f6f 	isb	sy
}
 800054c:	e000      	b.n	8000550 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800054e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <LED_Blink>:

void LED_Blink(uint32_t delay)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2108      	movs	r1, #8
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <LED_Blink+0x38>)
 800056e:	f000 fead 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_Delay(delay - 1);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3b01      	subs	r3, #1
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fb3c 	bl	8000bf4 <HAL_Delay>
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2108      	movs	r1, #8
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <LED_Blink+0x38>)
 8000582:	f000 fea3 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_Delay(500-1);
 8000586:	f240 10f3 	movw	r0, #499	; 0x1f3
 800058a:	f000 fb33 	bl	8000bf4 <HAL_Delay>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	58021000 	.word	0x58021000

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  #ifdef W25Qxx
    SCB->VTOR = QSPI_BASE;
	#endif
  MPU_Config();
 80005a0:	f7ff ff0c 	bl	80003bc <MPU_Config>
  CPU_CACHE_Enable();
 80005a4:	f7ff ff6e 	bl	8000484 <CPU_CACHE_Enable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fa92 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f822 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f7ff fe92 	bl	80002d8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80005b4:	f000 f90a 	bl	80007cc <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

	HAL_SD_GetCardCID(&hsd1, &pCID);
 80005b8:	490a      	ldr	r1, [pc, #40]	; (80005e4 <main+0x48>)
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <main+0x4c>)
 80005bc:	f005 fcf3 	bl	8005fa6 <HAL_SD_GetCardCID>
  HAL_SD_GetCardCSD(&hsd1, &pCSD);
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <main+0x50>)
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <main+0x4c>)
 80005c4:	f005 fd42 	bl	800604c <HAL_SD_GetCardCSD>
	HAL_SD_GetCardInfo(&hsd1, &pCardInfo);
 80005c8:	4909      	ldr	r1, [pc, #36]	; (80005f0 <main+0x54>)
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x4c>)
 80005cc:	f005 ff98 	bl	8006500 <HAL_SD_GetCardInfo>
	
	HAL_Delay(50);
 80005d0:	2032      	movs	r0, #50	; 0x32
 80005d2:	f000 fb0f 	bl	8000bf4 <HAL_Delay>
	MX_USB_DEVICE_Init();
 80005d6:	f00b ff0b 	bl	800c3f0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		LED_Blink(5);
 80005da:	2005      	movs	r0, #5
 80005dc:	f7ff ffc0 	bl	8000560 <LED_Blink>
 80005e0:	e7fb      	b.n	80005da <main+0x3e>
 80005e2:	bf00      	nop
 80005e4:	24001200 	.word	0x24001200
 80005e8:	24001268 	.word	0x24001268
 80005ec:	24001218 	.word	0x24001218
 80005f0:	24001244 	.word	0x24001244

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0cc      	sub	sp, #304	; 0x130
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80005fe:	224c      	movs	r2, #76	; 0x4c
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f00c fc14 	bl	800ce30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800060c:	2220      	movs	r2, #32
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f00c fc0d 	bl	800ce30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4618      	mov	r0, r3
 800061c:	23bc      	movs	r3, #188	; 0xbc
 800061e:	461a      	mov	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f00c fc05 	bl	800ce30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000626:	2002      	movs	r0, #2
 8000628:	f002 f872 	bl	8002710 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	4b5f      	ldr	r3, [pc, #380]	; (80007b0 <SystemClock_Config+0x1bc>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	4a5e      	ldr	r2, [pc, #376]	; (80007b0 <SystemClock_Config+0x1bc>)
 8000638:	f023 0301 	bic.w	r3, r3, #1
 800063c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800063e:	4b5c      	ldr	r3, [pc, #368]	; (80007b0 <SystemClock_Config+0x1bc>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	f003 0201 	and.w	r2, r3, #1
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	4b5a      	ldr	r3, [pc, #360]	; (80007b4 <SystemClock_Config+0x1c0>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000652:	4a58      	ldr	r2, [pc, #352]	; (80007b4 <SystemClock_Config+0x1c0>)
 8000654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b56      	ldr	r3, [pc, #344]	; (80007b4 <SystemClock_Config+0x1c0>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066a:	bf00      	nop
 800066c:	4b51      	ldr	r3, [pc, #324]	; (80007b4 <SystemClock_Config+0x1c0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000678:	d1f8      	bne.n	800066c <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800067a:	4b4f      	ldr	r3, [pc, #316]	; (80007b8 <SystemClock_Config+0x1c4>)
 800067c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067e:	f023 0303 	bic.w	r3, r3, #3
 8000682:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <SystemClock_Config+0x1c4>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006a4:	2305      	movs	r3, #5
 80006a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006aa:	2360      	movs	r3, #96	; 0x60
 80006ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80006b6:	230a      	movs	r3, #10
 80006b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006c2:	2308      	movs	r3, #8
 80006c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f863 	bl	80027a4 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006e4:	f000 f86a 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	233f      	movs	r3, #63	; 0x3f
 80006ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006fa:	2308      	movs	r3, #8
 80006fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000718:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fc50 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800072a:	f000 f847 	bl	80007bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000736:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2202      	movs	r2, #2
 800073e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	220c      	movs	r2, #12
 8000746:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2202      	movs	r2, #2
 800074e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2202      	movs	r2, #2
 8000756:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2201      	movs	r2, #1
 800075e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	22c0      	movs	r2, #192	; 0xc0
 8000766:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2220      	movs	r2, #32
 800076e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000780:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800078a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4618      	mov	r0, r3
 8000794:	f002 ff76 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x1ae>
  {
    Error_Handler();
 800079e:	f000 f80d 	bl	80007bc <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80007a2:	f001 ffef 	bl	8002784 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80007a6:	bf00      	nop
 80007a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58000400 	.word	0x58000400
 80007b4:	58024800 	.word	0x58024800
 80007b8:	58024400 	.word	0x58024400

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
		LED_Blink(500);
 80007c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c4:	f7ff fecc 	bl	8000560 <LED_Blink>
 80007c8:	e7fa      	b.n	80007c0 <Error_Handler+0x4>
	...

080007cc <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SDMMC1_SD_Init+0x44>)
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <MX_SDMMC1_SD_Init+0x48>)
 80007d4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SDMMC1_SD_Init+0x44>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SDMMC1_SD_Init+0x44>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_SDMMC1_SD_Init+0x44>)
 80007e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SDMMC1_SD_Init+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SDMMC1_SD_Init+0x44>)
 80007f2:	2205      	movs	r2, #5
 80007f4:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SDMMC1_SD_Init+0x44>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_SDMMC1_SD_Init+0x44>)
 80007fe:	f005 f8c7 	bl	8005990 <HAL_SD_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000808:	f7ff ffd8 	bl	80007bc <Error_Handler>
  }

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24001268 	.word	0x24001268
 8000814:	52007000 	.word	0x52007000

08000818 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <HAL_SD_MspInit+0xd8>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d155      	bne.n	80008e6 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 800083c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000840:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 8000842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000846:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 800084c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <HAL_SD_MspInit+0xdc>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000894:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000898:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80008a6:	230c      	movs	r3, #12
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <HAL_SD_MspInit+0xe0>)
 80008b2:	f000 fb5b 	bl	8000f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80008c6:	230c      	movs	r3, #12
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <HAL_SD_MspInit+0xe4>)
 80008d2:	f000 fb4b 	bl	8000f6c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2031      	movs	r0, #49	; 0x31
 80008dc:	f000 fa95 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008e0:	2031      	movs	r0, #49	; 0x31
 80008e2:	f000 faac 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	52007000 	.word	0x52007000
 80008f4:	58024400 	.word	0x58024400
 80008f8:	58020800 	.word	0x58020800
 80008fc:	58020c00 	.word	0x58020c00

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_MspInit+0x30>)
 8000908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800090c:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x30>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x30>)
 8000918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	58024400 	.word	0x58024400

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f914 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <SDMMC1_IRQHandler+0x10>)
 8000996:	f005 f927 	bl	8005be8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	24001268 	.word	0x24001268

080009a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <OTG_FS_IRQHandler+0x10>)
 80009aa:	f000 fdff 	bl	80015ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240017bc 	.word	0x240017bc

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <SystemInit+0xac>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <SystemInit+0xac>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <SystemInit+0xb0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <SystemInit+0xb0>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <SystemInit+0xb0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <SystemInit+0xb0>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4921      	ldr	r1, [pc, #132]	; (8000a68 <SystemInit+0xb0>)
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <SystemInit+0xb4>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <SystemInit+0xb0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <SystemInit+0xb0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <SystemInit+0xb0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <SystemInit+0xb0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <SystemInit+0xb0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <SystemInit+0xb0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <SystemInit+0xb0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <SystemInit+0xb0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <SystemInit+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0xb0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <SystemInit+0xb0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <SystemInit+0xb0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <SystemInit+0xb0>)
 8000a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <SystemInit+0xb0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <SystemInit+0xb8>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <SystemInit+0xbc>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a4a:	d202      	bcs.n	8000a52 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <SystemInit+0xc0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SystemInit+0xac>)
 8000a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a70:	5c001000 	.word	0x5c001000
 8000a74:	ffff0000 	.word	0xffff0000
 8000a78:	51008108 	.word	0x51008108

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a80:	f7ff ff9a 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f00c f99d 	bl	800cde8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd75 	bl	800059c <main>
  bx  lr
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ab8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000abc:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8000ac0:	0800ced8 	.word	0x0800ced8
  ldr r2, =_sbss
 8000ac4:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8000ac8:	24001bc4 	.word	0x24001bc4

08000acc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC3_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 f98c 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000adc:	f002 fc28 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_Init+0x68>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	4913      	ldr	r1, [pc, #76]	; (8000b3c <HAL_Init+0x6c>)
 8000aee:	5ccb      	ldrb	r3, [r1, r3]
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	fa22 f303 	lsr.w	r3, r2, r3
 8000af8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_Init+0x68>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_Init+0x6c>)
 8000b04:	5cd3      	ldrb	r3, [r2, r3]
 8000b06:	f003 031f 	and.w	r3, r3, #31
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b10:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_Init+0x70>)
 8000b12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_Init+0x74>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f814 	bl	8000b48 <HAL_InitTick>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e002      	b.n	8000b30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2a:	f7ff fee9 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	0800ce9c 	.word	0x0800ce9c
 8000b40:	24000004 	.word	0x24000004
 8000b44:	24000000 	.word	0x24000000

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_InitTick+0x60>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e021      	b.n	8000ba0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_InitTick+0x64>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_InitTick+0x60>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f971 	bl	8000e5a <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f93b 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x68>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2400000c 	.word	0x2400000c
 8000bac:	24000000 	.word	0x24000000
 8000bb0:	24000008 	.word	0x24000008

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2400000c 	.word	0x2400000c
 8000bd8:	240012e8 	.word	0x240012e8

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	240012e8 	.word	0x240012e8

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff ffee 	bl	8000bdc <HAL_GetTick>
 8000c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Delay+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c1a:	bf00      	nop
 8000c1c:	f7ff ffde 	bl	8000bdc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2400000c 	.word	0x2400000c

08000c3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetREVID+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0c1b      	lsrs	r3, r3, #16
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	5c001000 	.word	0x5c001000

08000c54 <__NVIC_SetPriorityGrouping>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <__NVIC_SetPriorityGrouping+0x40>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x40>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	05fa0000 	.word	0x05fa0000

08000c9c <__NVIC_GetPriorityGrouping>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff40 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff33 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa4 	bl	8000db0 <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e78:	f3bf 8f5f 	dmb	sy
}
 8000e7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_MPU_Disable+0x28>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_MPU_Disable+0x28>)
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_MPU_Disable+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	e000ed90 	.word	0xe000ed90

08000ea4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_MPU_Enable+0x38>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_MPU_Enable+0x3c>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_MPU_Enable+0x3c>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec2:	f3bf 8f4f 	dsb	sy
}
 8000ec6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec8:	f3bf 8f6f 	isb	sy
}
 8000ecc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed90 	.word	0xe000ed90
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	785a      	ldrb	r2, [r3, #1]
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_MPU_ConfigRegion+0x84>)
 8000ef2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d029      	beq.n	8000f50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000efc:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <HAL_MPU_ConfigRegion+0x84>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7b1b      	ldrb	r3, [r3, #12]
 8000f08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7adb      	ldrb	r3, [r3, #11]
 8000f0e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7a9b      	ldrb	r3, [r3, #10]
 8000f16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7b5b      	ldrb	r3, [r3, #13]
 8000f1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7b9b      	ldrb	r3, [r3, #14]
 8000f26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7bdb      	ldrb	r3, [r3, #15]
 8000f2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7a5b      	ldrb	r3, [r3, #9]
 8000f36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7a1b      	ldrb	r3, [r3, #8]
 8000f3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f40:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f4a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f4c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000f4e:	e005      	b.n	8000f5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_MPU_ConfigRegion+0x84>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_MPU_ConfigRegion+0x84>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed90 	.word	0xe000ed90

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <HAL_GPIO_Init+0x234>)
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f7e:	e194      	b.n	80012aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8186 	beq.w	80012a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d00b      	beq.n	8000fb8 <HAL_GPIO_Init+0x4c>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fac:	2b11      	cmp	r3, #17
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b12      	cmp	r3, #18
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0xee>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b12      	cmp	r3, #18
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	69b9      	ldr	r1, [r7, #24]
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0203 	and.w	r2, r3, #3
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80e0 	beq.w	80012a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x238>)
 80010e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ea:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <HAL_GPIO_Init+0x238>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_GPIO_Init+0x238>)
 80010f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <HAL_GPIO_Init+0x23c>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <HAL_GPIO_Init+0x240>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d052      	beq.n	80011d4 <HAL_GPIO_Init+0x268>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <HAL_GPIO_Init+0x244>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d031      	beq.n	800119a <HAL_GPIO_Init+0x22e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <HAL_GPIO_Init+0x248>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x22a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <HAL_GPIO_Init+0x24c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x226>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <HAL_GPIO_Init+0x250>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x222>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_GPIO_Init+0x254>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x21e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_GPIO_Init+0x258>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x21a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_GPIO_Init+0x25c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x216>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_GPIO_Init+0x260>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x212>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_GPIO_Init+0x264>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x20e>
 8001176:	2309      	movs	r3, #9
 8001178:	e02d      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800117a:	230a      	movs	r3, #10
 800117c:	e02b      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800117e:	2308      	movs	r3, #8
 8001180:	e029      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001182:	2307      	movs	r3, #7
 8001184:	e027      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001186:	2306      	movs	r3, #6
 8001188:	e025      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800118a:	2305      	movs	r3, #5
 800118c:	e023      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800118e:	2304      	movs	r3, #4
 8001190:	e021      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001192:	2303      	movs	r3, #3
 8001194:	e01f      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001196:	2302      	movs	r3, #2
 8001198:	e01d      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800119a:	2301      	movs	r3, #1
 800119c:	e01b      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800119e:	bf00      	nop
 80011a0:	58000080 	.word	0x58000080
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58000400 	.word	0x58000400
 80011ac:	58020000 	.word	0x58020000
 80011b0:	58020400 	.word	0x58020400
 80011b4:	58020800 	.word	0x58020800
 80011b8:	58020c00 	.word	0x58020c00
 80011bc:	58021000 	.word	0x58021000
 80011c0:	58021400 	.word	0x58021400
 80011c4:	58021800 	.word	0x58021800
 80011c8:	58021c00 	.word	0x58021c00
 80011cc:	58022000 	.word	0x58022000
 80011d0:	58022400 	.word	0x58022400
 80011d4:	2300      	movs	r3, #0
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e6:	4938      	ldr	r1, [pc, #224]	; (80012c8 <HAL_GPIO_Init+0x35c>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800126e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800129c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f ae63 	bne.w	8000f80 <HAL_GPIO_Init+0x14>
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3724      	adds	r7, #36	; 0x24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	58000400 	.word	0x58000400

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001300:	b08f      	sub	sp, #60	; 0x3c
 8001302:	af0a      	add	r7, sp, #40	; 0x28
 8001304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e116      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f00b fa06 	bl	800c73c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f006 fd91 	bl	8007e76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	687e      	ldr	r6, [r7, #4]
 800135c:	466d      	mov	r5, sp
 800135e:	f106 0410 	add.w	r4, r6, #16
 8001362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800136e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001372:	1d33      	adds	r3, r6, #4
 8001374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001376:	6838      	ldr	r0, [r7, #0]
 8001378:	f006 fc5c 	bl	8007c34 <USB_CoreInit>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2202      	movs	r2, #2
 8001386:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0d7      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f006 fd7f 	bl	8007e98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e04a      	b.n	8001436 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	333d      	adds	r3, #61	; 0x3d
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	333c      	adds	r3, #60	; 0x3c
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	b298      	uxth	r0, r3
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3342      	adds	r3, #66	; 0x42
 80013dc:	4602      	mov	r2, r0
 80013de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	333f      	adds	r3, #63	; 0x3f
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3344      	adds	r3, #68	; 0x44
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3348      	adds	r3, #72	; 0x48
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	3350      	adds	r3, #80	; 0x50
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3af      	bcc.n	80013a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e044      	b.n	80014d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	1a9b      	subs	r3, r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3b5      	bcc.n	8001446 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	687e      	ldr	r6, [r7, #4]
 80014e2:	466d      	mov	r5, sp
 80014e4:	f106 0410 	add.w	r4, r6, #16
 80014e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f8:	1d33      	adds	r3, r6, #4
 80014fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f006 fcf5 	bl	8007eec <USB_DevInit>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e014      	b.n	800153e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	2b01      	cmp	r3, #1
 800152a:	d102      	bne.n	8001532 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f001 f8bf 	bl	80026b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f007 fd75 	bl	8009026 <USB_DevDisconnect>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001546 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_PCD_Start+0x1c>
 800155e:	2302      	movs	r3, #2
 8001560:	e020      	b.n	80015a4 <HAL_PCD_Start+0x5e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	2b01      	cmp	r3, #1
 8001570:	d109      	bne.n	8001586 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001576:	2b01      	cmp	r3, #1
 8001578:	d005      	beq.n	8001586 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f006 fc62 	bl	8007e54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f007 fd25 	bl	8008fe4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b08d      	sub	sp, #52	; 0x34
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f007 fde3 	bl	800918e <USB_GetMode>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 83ca 	bne.w	8001d64 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f007 fd47 	bl	8009068 <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 83c0 	beq.w	8001d62 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f007 fd3e 	bl	8009068 <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d107      	bne.n	8001606 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f002 0202 	and.w	r2, r2, #2
 8001604:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f007 fd2c 	bl	8009068 <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b10      	cmp	r3, #16
 8001618:	d161      	bne.n	80016de <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0210 	bic.w	r2, r2, #16
 8001628:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f003 020f 	and.w	r2, r3, #15
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	3304      	adds	r3, #4
 8001648:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	0c5b      	lsrs	r3, r3, #17
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	2b02      	cmp	r3, #2
 8001654:	d124      	bne.n	80016a0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d035      	beq.n	80016ce <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800166c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001670:	b29b      	uxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	6a38      	ldr	r0, [r7, #32]
 8001676:	f007 fb63 	bl	8008d40 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001686:	441a      	add	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001698:	441a      	add	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	e016      	b.n	80016ce <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	0c5b      	lsrs	r3, r3, #17
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	d110      	bne.n	80016ce <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016b2:	2208      	movs	r2, #8
 80016b4:	4619      	mov	r1, r3
 80016b6:	6a38      	ldr	r0, [r7, #32]
 80016b8:	f007 fb42 	bl	8008d40 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c8:	441a      	add	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0210 	orr.w	r2, r2, #16
 80016dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f007 fcc0 	bl	8009068 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016f2:	d16e      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f007 fcc6 	bl	800908e <USB_ReadDevAllOutEpInterrupt>
 8001702:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001704:	e062      	b.n	80017cc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d057      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f007 fceb 	bl	80090f6 <USB_ReadDevOutEPInterrupt>
 8001720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00c      	beq.n	8001746 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001738:	461a      	mov	r2, r3
 800173a:	2301      	movs	r3, #1
 800173c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800173e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fe0b 	bl	800235c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175c:	461a      	mov	r2, r3
 800175e:	2308      	movs	r3, #8
 8001760:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 ff05 	bl	8002574 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001780:	461a      	mov	r2, r3
 8001782:	2310      	movs	r3, #16
 8001784:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	015a      	lsls	r2, r3, #5
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	4413      	add	r3, r2
 8001798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179c:	461a      	mov	r2, r3
 800179e:	2320      	movs	r3, #32
 80017a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b8:	461a      	mov	r2, r3
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d199      	bne.n	8001706 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f007 fc46 	bl	8009068 <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017e6:	f040 80c0 	bne.w	800196a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f007 fc67 	bl	80090c2 <USB_ReadDevAllInEpInterrupt>
 80017f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017fa:	e0b2      	b.n	8001962 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80a7 	beq.w	8001956 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f007 fc8d 	bl	8009132 <USB_ReadDevInEPInterrupt>
 8001818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d057      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	2201      	movs	r2, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	69f9      	ldr	r1, [r7, #28]
 8001840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001844:	4013      	ands	r3, r2
 8001846:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	4413      	add	r3, r2
 8001850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001854:	461a      	mov	r2, r3
 8001856:	2301      	movs	r3, #1
 8001858:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d132      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3348      	adds	r3, #72	; 0x48
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4403      	add	r3, r0
 8001882:	3344      	adds	r3, #68	; 0x44
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4419      	add	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4403      	add	r3, r0
 8001896:	3348      	adds	r3, #72	; 0x48
 8001898:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	2b00      	cmp	r3, #0
 800189e:	d113      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x31c>
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3350      	adds	r3, #80	; 0x50
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d108      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018c0:	461a      	mov	r2, r3
 80018c2:	2101      	movs	r1, #1
 80018c4:	f007 fc96 	bl	80091f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f00a ffd3 	bl	800c87a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ea:	461a      	mov	r2, r3
 80018ec:	2308      	movs	r3, #8
 80018ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001906:	461a      	mov	r2, r3
 8001908:	2310      	movs	r3, #16
 800190a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001922:	461a      	mov	r2, r3
 8001924:	2340      	movs	r3, #64	; 0x40
 8001926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193e:	461a      	mov	r2, r3
 8001940:	2302      	movs	r3, #2
 8001942:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800194e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fc75 	bl	8002240 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f af49 	bne.w	80017fc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f007 fb7a 	bl	8009068 <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800197a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800197e:	d122      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019a6:	2100      	movs	r1, #0
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fea5 	bl	80026f8 <HAL_PCDEx_LPM_Callback>
 80019ae:	e002      	b.n	80019b6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f00a ffd9 	bl	800c968 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f007 fb4c 	bl	8009068 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019da:	d112      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f00a ff95 	bl	800c91c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 fb2e 	bl	8009068 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a16:	d121      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001a26:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d111      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	f003 020f 	and.w	r2, r3, #15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fe52 	bl	80026f8 <HAL_PCDEx_LPM_Callback>
 8001a54:	e002      	b.n	8001a5c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f00a ff60 	bl	800c91c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 fb01 	bl	8009068 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a70:	f040 80c7 	bne.w	8001c02 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f006 fb8a 	bl	80081a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a98:	e056      	b.n	8001b48 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001abe:	0151      	lsls	r1, r2, #5
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	440a      	add	r2, r1
 8001ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ac8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001acc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ade:	0151      	lsls	r1, r2, #5
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	440a      	add	r2, r1
 8001ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ae8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001aec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af0:	015a      	lsls	r2, r3, #5
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afa:	461a      	mov	r2, r3
 8001afc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b00:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b12:	0151      	lsls	r1, r2, #5
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	440a      	add	r2, r1
 8001b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b32:	0151      	lsls	r1, r2, #5
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	440a      	add	r2, r1
 8001b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b40:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	3301      	adds	r3, #1
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3a3      	bcc.n	8001a9a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d016      	beq.n	8001b9c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b7e:	f043 030b 	orr.w	r3, r3, #11
 8001b82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b94:	f043 030b 	orr.w	r3, r3, #11
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	e015      	b.n	8001bc8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001baa:	4619      	mov	r1, r3
 8001bac:	f242 032b 	movw	r3, #8235	; 0x202b
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc2:	f043 030b 	orr.w	r3, r3, #11
 8001bc6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001bda:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bec:	461a      	mov	r2, r3
 8001bee:	f007 fb01 	bl	80091f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f007 fa2e 	bl	8009068 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c16:	d124      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f007 fac5 	bl	80091ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 fb1f 	bl	800826a <USB_GetDevSpeed>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681c      	ldr	r4, [r3, #0]
 8001c38:	f001 fcf4 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	4620      	mov	r0, r4
 8001c48:	f006 f862 	bl	8007d10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f00a fe3c 	bl	800c8ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f007 f9fe 	bl	8009068 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d10a      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f00a fe19 	bl	800c8ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f002 0208 	and.w	r2, r2, #8
 8001c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f007 f9e9 	bl	8009068 <USB_ReadInterrupts>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ca0:	d10f      	bne.n	8001cc2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f00a fe7b 	bl	800c9a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f007 f9ce 	bl	8009068 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f00a fe4e 	bl	800c984 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f007 f9b3 	bl	8009068 <USB_ReadInterrupts>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d10a      	bne.n	8001d24 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f00a fe5c 	bl	800c9cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f007 f99d 	bl	8009068 <USB_ReadInterrupts>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d115      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f00a fe4c 	bl	800c9e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	e000      	b.n	8001d64 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001d62:	bf00      	nop
    }
  }
}
 8001d64:	3734      	adds	r7, #52	; 0x34
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}

08001d6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_PCD_SetAddress+0x1a>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e013      	b.n	8001dac <HAL_PCD_SetAddress+0x42>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f007 f8fb 	bl	8008f98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	70fb      	strb	r3, [r7, #3]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	803b      	strh	r3, [r7, #0]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da0f      	bge.n	8001dfa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 020f 	and.w	r2, r3, #15
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3338      	adds	r3, #56	; 0x38
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	705a      	strb	r2, [r3, #1]
 8001df8:	e00f      	b.n	8001e1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	f003 020f 	and.w	r2, r3, #15
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3304      	adds	r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e26:	883a      	ldrh	r2, [r7, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	78ba      	ldrb	r2, [r7, #2]
 8001e30:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e44:	78bb      	ldrb	r3, [r7, #2]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d102      	bne.n	8001e50 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_PCD_EP_Open+0xaa>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e00e      	b.n	8001e7c <HAL_PCD_EP_Open+0xc8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f006 fa21 	bl	80082b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da0f      	bge.n	8001eb8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3338      	adds	r3, #56	; 0x38
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	705a      	strb	r2, [r3, #1]
 8001eb6:	e00f      	b.n	8001ed8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 020f 	and.w	r2, r3, #15
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	3304      	adds	r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_PCD_EP_Close+0x6e>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e00e      	b.n	8001f10 <HAL_PCD_EP_Close+0x8c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 fa5f 	bl	80083c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	460b      	mov	r3, r1
 8001f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	f003 020f 	and.w	r2, r3, #15
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3304      	adds	r3, #4
 8001f40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2200      	movs	r2, #0
 8001f58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f74:	7afb      	ldrb	r3, [r7, #11]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6979      	ldr	r1, [r7, #20]
 8001f8c:	f006 fd42 	bl	8008a14 <USB_EP0StartXfer>
 8001f90:	e008      	b.n	8001fa4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6979      	ldr	r1, [r7, #20]
 8001fa0:	f006 faec 	bl	800857c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 020f 	and.w	r2, r3, #15
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fd0:	681b      	ldr	r3, [r3, #0]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	460b      	mov	r3, r1
 8001fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	7afb      	ldrb	r3, [r7, #11]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3338      	adds	r3, #56	; 0x38
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2201      	movs	r2, #1
 800201c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	b2da      	uxtb	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d102      	bne.n	8002038 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	f006 fce0 	bl	8008a14 <USB_EP0StartXfer>
 8002054:	e008      	b.n	8002068 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	6979      	ldr	r1, [r7, #20]
 8002064:	f006 fa8a 	bl	800857c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	d901      	bls.n	8002090 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e050      	b.n	8002132 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002094:	2b00      	cmp	r3, #0
 8002096:	da0f      	bge.n	80020b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 020f 	and.w	r2, r3, #15
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	3338      	adds	r3, #56	; 0x38
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	3304      	adds	r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	705a      	strb	r2, [r3, #1]
 80020b6:	e00d      	b.n	80020d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_PCD_EP_SetStall+0x82>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e01e      	b.n	8002132 <HAL_PCD_EP_SetStall+0xc0>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68f9      	ldr	r1, [r7, #12]
 8002102:	4618      	mov	r0, r3
 8002104:	f006 fe74 	bl	8008df0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10a      	bne.n	8002128 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	b2d9      	uxtb	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002122:	461a      	mov	r2, r3
 8002124:	f007 f866 	bl	80091f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d901      	bls.n	8002158 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e042      	b.n	80021de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	da0f      	bge.n	8002180 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3338      	adds	r3, #56	; 0x38
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	705a      	strb	r2, [r3, #1]
 800217e:	e00f      	b.n	80021a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	3304      	adds	r3, #4
 8002198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_PCD_EP_ClrStall+0x86>
 80021bc:	2302      	movs	r3, #2
 80021be:	e00e      	b.n	80021de <HAL_PCD_EP_ClrStall+0xa4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f006 fe7c 	bl	8008ecc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_PCD_EP_Flush+0x1a>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e01b      	b.n	8002238 <HAL_PCD_EP_Flush+0x52>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220c:	2b00      	cmp	r3, #0
 800220e:	da09      	bge.n	8002224 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f005 ffc3 	bl	80081a8 <USB_FlushTxFifo>
 8002222:	e004      	b.n	800222e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f005 ffe3 	bl	80081f4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af02      	add	r7, sp, #8
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3338      	adds	r3, #56	; 0x38
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	d901      	bls.n	8002278 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e06c      	b.n	8002352 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	429a      	cmp	r2, r3
 800228c:	d902      	bls.n	8002294 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3303      	adds	r3, #3
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800229c:	e02b      	b.n	80022f6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d902      	bls.n	80022ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3303      	adds	r3, #3
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	68d9      	ldr	r1, [r3, #12]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4603      	mov	r3, r0
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f006 fcf3 	bl	8008cc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	441a      	add	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	441a      	add	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	b29b      	uxth	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	429a      	cmp	r2, r3
 800230a:	d809      	bhi.n	8002320 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002314:	429a      	cmp	r2, r3
 8002316:	d203      	bcs.n	8002320 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1be      	bne.n	800229e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	429a      	cmp	r2, r3
 800232a:	d811      	bhi.n	8002350 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	2201      	movs	r2, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	43db      	mvns	r3, r3
 8002346:	6939      	ldr	r1, [r7, #16]
 8002348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800234c:	4013      	ands	r3, r2
 800234e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	333c      	adds	r3, #60	; 0x3c
 8002374:	3304      	adds	r3, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 80a0 	bne.w	80024d4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4a72      	ldr	r2, [pc, #456]	; (800256c <PCD_EP_OutXfrComplete_int+0x210>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	f240 80dd 	bls.w	8002562 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80d7 	beq.w	8002562 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	6093      	str	r3, [r2, #8]
 80023c8:	e0cb      	b.n	8002562 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e0:	461a      	mov	r2, r3
 80023e2:	2320      	movs	r3, #32
 80023e4:	6093      	str	r3, [r2, #8]
 80023e6:	e0bc      	b.n	8002562 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 80b7 	bne.w	8002562 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a5d      	ldr	r2, [pc, #372]	; (800256c <PCD_EP_OutXfrComplete_int+0x210>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d90f      	bls.n	800241c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002412:	461a      	mov	r2, r3
 8002414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002418:	6093      	str	r3, [r2, #8]
 800241a:	e0a2      	b.n	8002562 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800242e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	0159      	lsls	r1, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	440b      	add	r3, r1
 8002438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002442:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4403      	add	r3, r0
 8002452:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002456:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4403      	add	r3, r0
 800247a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4419      	add	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4403      	add	r3, r0
 8002490:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002494:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d114      	bne.n	80024c6 <PCD_EP_OutXfrComplete_int+0x16a>
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d108      	bne.n	80024c6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024be:	461a      	mov	r2, r3
 80024c0:	2101      	movs	r1, #1
 80024c2:	f006 fe97 	bl	80091f4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f00a f9b9 	bl	800c844 <HAL_PCD_DataOutStageCallback>
 80024d2:	e046      	b.n	8002562 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a26      	ldr	r2, [pc, #152]	; (8002570 <PCD_EP_OutXfrComplete_int+0x214>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d124      	bne.n	8002526 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	461a      	mov	r2, r3
 80024f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f8:	6093      	str	r3, [r2, #8]
 80024fa:	e032      	b.n	8002562 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002512:	461a      	mov	r2, r3
 8002514:	2320      	movs	r3, #32
 8002516:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f00a f990 	bl	800c844 <HAL_PCD_DataOutStageCallback>
 8002524:	e01d      	b.n	8002562 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d114      	bne.n	8002556 <PCD_EP_OutXfrComplete_int+0x1fa>
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d108      	bne.n	8002556 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800254e:	461a      	mov	r2, r3
 8002550:	2100      	movs	r1, #0
 8002552:	f006 fe4f 	bl	80091f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	4619      	mov	r1, r3
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f00a f971 	bl	800c844 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	4f54300a 	.word	0x4f54300a
 8002570:	4f54310a 	.word	0x4f54310a

08002574 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	333c      	adds	r3, #60	; 0x3c
 800258c:	3304      	adds	r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <PCD_EP_OutSetupPacket_int+0x88>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d90e      	bls.n	80025c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c0:	461a      	mov	r2, r3
 80025c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f00a f929 	bl	800c820 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <PCD_EP_OutSetupPacket_int+0x88>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d90c      	bls.n	80025f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d108      	bne.n	80025f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025e8:	461a      	mov	r2, r3
 80025ea:	2101      	movs	r1, #1
 80025ec:	f006 fe02 	bl	80091f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	4f54300a 	.word	0x4f54300a

08002600 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
 800260c:	4613      	mov	r3, r2
 800260e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d107      	bne.n	800262e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800261e:	883b      	ldrh	r3, [r7, #0]
 8002620:	0419      	lsls	r1, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	430a      	orrs	r2, r1
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
 800262c:	e028      	b.n	8002680 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4413      	add	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e00d      	b.n	800265e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3340      	adds	r3, #64	; 0x40
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	4413      	add	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	3301      	adds	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	3b01      	subs	r3, #1
 8002664:	429a      	cmp	r2, r3
 8002666:	d3ec      	bcc.n	8002642 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002668:	883b      	ldrh	r3, [r7, #0]
 800266a:	0418      	lsls	r0, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	3b01      	subs	r3, #1
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	4302      	orrs	r2, r0
 8002678:	3340      	adds	r3, #64	; 0x40
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	10000003 	.word	0x10000003

080026f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_PWREx_ConfigSupply+0x70>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d00a      	beq.n	800273a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_PWREx_ConfigSupply+0x70>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e01f      	b.n	8002776 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e01d      	b.n	8002776 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_PWREx_ConfigSupply+0x70>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	490f      	ldr	r1, [pc, #60]	; (8002780 <HAL_PWREx_ConfigSupply+0x70>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4313      	orrs	r3, r2
 8002748:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800274a:	f7fe fa47 	bl	8000bdc <HAL_GetTick>
 800274e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002750:	e009      	b.n	8002766 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002752:	f7fe fa43 	bl	8000bdc <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002760:	d901      	bls.n	8002766 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e007      	b.n	8002776 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_PWREx_ConfigSupply+0x70>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800276e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002772:	d1ee      	bne.n	8002752 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	58024800 	.word	0x58024800

08002784 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	58024800 	.word	0x58024800

080027a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e3ff      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8087 	beq.w	80028d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c4:	4b99      	ldr	r3, [pc, #612]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ce:	4b97      	ldr	r3, [pc, #604]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d007      	beq.n	80027ea <HAL_RCC_OscConfig+0x46>
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	2b18      	cmp	r3, #24
 80027de:	d110      	bne.n	8002802 <HAL_RCC_OscConfig+0x5e>
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d10b      	bne.n	8002802 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ea:	4b90      	ldr	r3, [pc, #576]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d06c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x12c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d168      	bne.n	80028d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e3d9      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x76>
 800280c:	4b87      	ldr	r3, [pc, #540]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a86      	ldr	r2, [pc, #536]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	e02e      	b.n	8002878 <HAL_RCC_OscConfig+0xd4>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x98>
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a81      	ldr	r2, [pc, #516]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7e      	ldr	r2, [pc, #504]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e01d      	b.n	8002878 <HAL_RCC_OscConfig+0xd4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0xbc>
 8002846:	4b79      	ldr	r3, [pc, #484]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a78      	ldr	r2, [pc, #480]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 800284c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a75      	ldr	r2, [pc, #468]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0xd4>
 8002860:	4b72      	ldr	r3, [pc, #456]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	4b6f      	ldr	r3, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6e      	ldr	r2, [pc, #440]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe f9ac 	bl	8000bdc <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe f9a8 	bl	8000bdc <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e38d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800289a:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0xe4>
 80028a6:	e014      	b.n	80028d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe f998 	bl	8000bdc <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7fe f994 	bl	8000bdc <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e379      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x10c>
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80ae 	beq.w	8002a3c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028ea:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_RCC_OscConfig+0x162>
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	2b18      	cmp	r3, #24
 80028fa:	d13a      	bne.n	8002972 <HAL_RCC_OscConfig+0x1ce>
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d135      	bne.n	8002972 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002906:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_RCC_OscConfig+0x17a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e34b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291e:	f7fe f98d 	bl	8000c3c <HAL_GetREVID>
 8002922:	4603      	mov	r3, r0
 8002924:	f241 0203 	movw	r2, #4099	; 0x1003
 8002928:	4293      	cmp	r3, r2
 800292a:	d817      	bhi.n	800295c <HAL_RCC_OscConfig+0x1b8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d108      	bne.n	8002946 <HAL_RCC_OscConfig+0x1a2>
 8002934:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800293c:	4a3b      	ldr	r2, [pc, #236]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002942:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002944:	e07a      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	031b      	lsls	r3, r3, #12
 8002954:	4935      	ldr	r1, [pc, #212]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800295a:	e06f      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4930      	ldr	r1, [pc, #192]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002970:	e064      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d045      	beq.n	8002a06 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0219 	bic.w	r2, r3, #25
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4929      	ldr	r1, [pc, #164]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe f926 	bl	8000bdc <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe f922 	bl	8000bdc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e307      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a6:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	f7fe f943 	bl	8000c3c <HAL_GetREVID>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80029bc:	4293      	cmp	r3, r2
 80029be:	d817      	bhi.n	80029f0 <HAL_RCC_OscConfig+0x24c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d108      	bne.n	80029da <HAL_RCC_OscConfig+0x236>
 80029c8:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	6053      	str	r3, [r2, #4]
 80029d8:	e030      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	031b      	lsls	r3, r3, #12
 80029e8:	4910      	ldr	r1, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
 80029ee:	e025      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	490b      	ldr	r1, [pc, #44]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
 8002a04:	e01a      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <HAL_RCC_OscConfig+0x288>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe f8e3 	bl	8000bdc <HAL_GetTick>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7fe f8df 	bl	8000bdc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d903      	bls.n	8002a30 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e2c4      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
 8002a2c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a30:	4ba4      	ldr	r3, [pc, #656]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a9 	beq.w	8002b9c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4a:	4b9e      	ldr	r3, [pc, #632]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a54:	4b9b      	ldr	r3, [pc, #620]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d007      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2cc>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b18      	cmp	r3, #24
 8002a64:	d13a      	bne.n	8002adc <HAL_RCC_OscConfig+0x338>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d135      	bne.n	8002adc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a70:	4b94      	ldr	r3, [pc, #592]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2e4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e296      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a88:	f7fe f8d8 	bl	8000c3c <HAL_GetREVID>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d817      	bhi.n	8002ac6 <HAL_RCC_OscConfig+0x322>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d108      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x30c>
 8002a9e:	4b89      	ldr	r3, [pc, #548]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002aa6:	4a87      	ldr	r2, [pc, #540]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aae:	e075      	b.n	8002b9c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ab0:	4b84      	ldr	r3, [pc, #528]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	069b      	lsls	r3, r3, #26
 8002abe:	4981      	ldr	r1, [pc, #516]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ac4:	e06a      	b.n	8002b9c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac6:	4b7f      	ldr	r3, [pc, #508]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	061b      	lsls	r3, r3, #24
 8002ad4:	497b      	ldr	r1, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ada:	e05f      	b.n	8002b9c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d042      	beq.n	8002b6a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ae4:	4b77      	ldr	r3, [pc, #476]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a76      	ldr	r2, [pc, #472]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe f874 	bl	8000bdc <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002af8:	f7fe f870 	bl	8000bdc <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e255      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b0a:	4b6e      	ldr	r3, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b16:	f7fe f891 	bl	8000c3c <HAL_GetREVID>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d817      	bhi.n	8002b54 <HAL_RCC_OscConfig+0x3b0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d108      	bne.n	8002b3e <HAL_RCC_OscConfig+0x39a>
 8002b2c:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b34:	4a63      	ldr	r2, [pc, #396]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b3a:	6053      	str	r3, [r2, #4]
 8002b3c:	e02e      	b.n	8002b9c <HAL_RCC_OscConfig+0x3f8>
 8002b3e:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	495d      	ldr	r1, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
 8002b52:	e023      	b.n	8002b9c <HAL_RCC_OscConfig+0x3f8>
 8002b54:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	4958      	ldr	r1, [pc, #352]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
 8002b68:	e018      	b.n	8002b9c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b6a:	4b56      	ldr	r3, [pc, #344]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a55      	ldr	r2, [pc, #340]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe f831 	bl	8000bdc <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b7e:	f7fe f82d 	bl	8000bdc <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e212      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b90:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d036      	beq.n	8002c16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d019      	beq.n	8002be4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb0:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb4:	4a43      	ldr	r2, [pc, #268]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe f80e 	bl	8000bdc <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe f80a 	bl	8000bdc <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1ef      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x420>
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	4a36      	ldr	r2, [pc, #216]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fd fff4 	bl	8000bdc <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7fd fff0 	bl	8000bdc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1d5      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d036      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a25      	ldr	r2, [pc, #148]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c36:	f7fd ffd1 	bl	8000bdc <HAL_GetTick>
 8002c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c3e:	f7fd ffcd 	bl	8000bdc <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e1b2      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x49a>
 8002c5c:	e018      	b.n	8002c90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c5e:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c6a:	f7fd ffb7 	bl	8000bdc <HAL_GetTick>
 8002c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c72:	f7fd ffb3 	bl	8000bdc <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e198      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_RCC_OscConfig+0x520>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8085 	beq.w	8002da8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_RCC_OscConfig+0x524>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_RCC_OscConfig+0x524>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002caa:	f7fd ff97 	bl	8000bdc <HAL_GetTick>
 8002cae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb0:	e00c      	b.n	8002ccc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7fd ff93 	bl	8000bdc <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b64      	cmp	r3, #100	; 0x64
 8002cbe:	d905      	bls.n	8002ccc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e178      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ccc:	4b96      	ldr	r3, [pc, #600]	; (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ec      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x54a>
 8002ce0:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a91      	ldr	r2, [pc, #580]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	e02d      	b.n	8002d4a <HAL_RCC_OscConfig+0x5a6>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x56c>
 8002cf6:	4b8d      	ldr	r3, [pc, #564]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a8c      	ldr	r2, [pc, #560]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	4b8a      	ldr	r3, [pc, #552]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a89      	ldr	r2, [pc, #548]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0e:	e01c      	b.n	8002d4a <HAL_RCC_OscConfig+0x5a6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d10c      	bne.n	8002d32 <HAL_RCC_OscConfig+0x58e>
 8002d18:	4b84      	ldr	r3, [pc, #528]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a83      	ldr	r2, [pc, #524]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4a80      	ldr	r2, [pc, #512]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d30:	e00b      	b.n	8002d4a <HAL_RCC_OscConfig+0x5a6>
 8002d32:	4b7e      	ldr	r3, [pc, #504]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a7d      	ldr	r2, [pc, #500]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3e:	4b7b      	ldr	r3, [pc, #492]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a7a      	ldr	r2, [pc, #488]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d44:	f023 0304 	bic.w	r3, r3, #4
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d015      	beq.n	8002d7e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fd ff43 	bl	8000bdc <HAL_GetTick>
 8002d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fd ff3f 	bl	8000bdc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e122      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d70:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ee      	beq.n	8002d5a <HAL_RCC_OscConfig+0x5b6>
 8002d7c:	e014      	b.n	8002da8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7e:	f7fd ff2d 	bl	8000bdc <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fd ff29 	bl	8000bdc <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e10c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d9c:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1ee      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8101 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002db2:	4b5e      	ldr	r3, [pc, #376]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dba:	2b18      	cmp	r3, #24
 8002dbc:	f000 80bc 	beq.w	8002f38 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	f040 8095 	bne.w	8002ef4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4b58      	ldr	r3, [pc, #352]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a57      	ldr	r2, [pc, #348]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fd ff01 	bl	8000bdc <HAL_GetTick>
 8002dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fd fefd 	bl	8000bdc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0e2      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df0:	4b4e      	ldr	r3, [pc, #312]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCC_OscConfig+0x78c>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	4946      	ldr	r1, [pc, #280]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	628b      	str	r3, [r1, #40]	; 0x28
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	3b01      	subs	r3, #1
 8002e26:	025b      	lsls	r3, r3, #9
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	3b01      	subs	r3, #1
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e46:	4939      	ldr	r1, [pc, #228]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e4c:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e58:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5c:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <HAL_RCC_OscConfig+0x790>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e64:	00d2      	lsls	r2, r2, #3
 8002e66:	4931      	ldr	r1, [pc, #196]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e6c:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f023 020c 	bic.w	r2, r3, #12
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	492c      	ldr	r1, [pc, #176]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f023 0202 	bic.w	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4928      	ldr	r1, [pc, #160]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e90:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fe86 	bl	8000bdc <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fd fe82 	bl	8000bdc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e067      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x730>
 8002ef2:	e05f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fd fe6c 	bl	8000bdc <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fd fe68 	bl	8000bdc <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e04d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <HAL_RCC_OscConfig+0x788>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x764>
 8002f26:	e045      	b.n	8002fb4 <HAL_RCC_OscConfig+0x810>
 8002f28:	58024800 	.word	0x58024800
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	fffffc0c 	.word	0xfffffc0c
 8002f34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x81c>)
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <HAL_RCC_OscConfig+0x81c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d031      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d12a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d122      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	0a5b      	lsrs	r3, r3, #9
 8002f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d108      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	0e1b      	lsrs	r3, r3, #24
 8002fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3730      	adds	r7, #48	; 0x30
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	58024400 	.word	0x58024400

08002fc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e19c      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b8a      	ldr	r3, [pc, #552]	; (8003204 <HAL_RCC_ClockConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b87      	ldr	r3, [pc, #540]	; (8003204 <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 020f 	bic.w	r2, r3, #15
 8002fee:	4985      	ldr	r1, [pc, #532]	; (8003204 <HAL_RCC_ClockConfig+0x240>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b83      	ldr	r3, [pc, #524]	; (8003204 <HAL_RCC_ClockConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e184      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	4b7b      	ldr	r3, [pc, #492]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003020:	429a      	cmp	r2, r3
 8003022:	d908      	bls.n	8003036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003024:	4b78      	ldr	r3, [pc, #480]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	4975      	ldr	r1, [pc, #468]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003032:	4313      	orrs	r3, r2
 8003034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	4b70      	ldr	r3, [pc, #448]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800304e:	429a      	cmp	r2, r3
 8003050:	d908      	bls.n	8003064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	496a      	ldr	r1, [pc, #424]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003060:	4313      	orrs	r3, r2
 8003062:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d010      	beq.n	8003092 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	4b64      	ldr	r3, [pc, #400]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800307c:	429a      	cmp	r2, r3
 800307e:	d908      	bls.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003080:	4b61      	ldr	r3, [pc, #388]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	495e      	ldr	r1, [pc, #376]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 800308e:	4313      	orrs	r3, r2
 8003090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d010      	beq.n	80030c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d908      	bls.n	80030c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030ae:	4b56      	ldr	r3, [pc, #344]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	4953      	ldr	r1, [pc, #332]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4b4d      	ldr	r3, [pc, #308]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	429a      	cmp	r2, r3
 80030da:	d908      	bls.n	80030ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f023 020f 	bic.w	r2, r3, #15
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4947      	ldr	r1, [pc, #284]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d055      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030fa:	4b43      	ldr	r3, [pc, #268]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4940      	ldr	r1, [pc, #256]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003108:	4313      	orrs	r3, r2
 800310a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d107      	bne.n	8003124 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003114:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d121      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0f6      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d107      	bne.n	800313c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d115      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0ea      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003144:	4b30      	ldr	r3, [pc, #192]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0de      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0d6      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f023 0207 	bic.w	r2, r3, #7
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4925      	ldr	r1, [pc, #148]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003172:	4313      	orrs	r3, r2
 8003174:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fd fd31 	bl	8000bdc <HAL_GetTick>
 800317a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317c:	e00a      	b.n	8003194 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317e:	f7fd fd2d 	bl	8000bdc <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0be      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003194:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d1eb      	bne.n	800317e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d010      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	429a      	cmp	r2, r3
 80031c0:	d208      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f023 020f 	bic.w	r2, r3, #15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_RCC_ClockConfig+0x244>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_RCC_ClockConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d214      	bcs.n	800320c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_RCC_ClockConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 020f 	bic.w	r2, r3, #15
 80031ea:	4906      	ldr	r1, [pc, #24]	; (8003204 <HAL_RCC_ClockConfig+0x240>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <HAL_RCC_ClockConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e086      	b.n	8003312 <HAL_RCC_ClockConfig+0x34e>
 8003204:	52002000 	.word	0x52002000
 8003208:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d010      	beq.n	800323a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	4b3f      	ldr	r3, [pc, #252]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003224:	429a      	cmp	r2, r3
 8003226:	d208      	bcs.n	800323a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003228:	4b3c      	ldr	r3, [pc, #240]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4939      	ldr	r1, [pc, #228]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 8003236:	4313      	orrs	r3, r2
 8003238:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d010      	beq.n	8003268 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003252:	429a      	cmp	r2, r3
 8003254:	d208      	bcs.n	8003268 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	492e      	ldr	r1, [pc, #184]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 8003264:	4313      	orrs	r3, r2
 8003266:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003280:	429a      	cmp	r2, r3
 8003282:	d208      	bcs.n	8003296 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4922      	ldr	r1, [pc, #136]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 8003292:	4313      	orrs	r3, r2
 8003294:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d010      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d208      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4917      	ldr	r1, [pc, #92]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032c4:	f000 f834 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	4912      	ldr	r1, [pc, #72]	; (8003320 <HAL_RCC_ClockConfig+0x35c>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_RCC_ClockConfig+0x358>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <HAL_RCC_ClockConfig+0x35c>)
 80032ec:	5cd3      	ldrb	r3, [r2, r3]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x360>)
 80032fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032fc:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <HAL_RCC_ClockConfig+0x364>)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_RCC_ClockConfig+0x368>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fc1e 	bl	8000b48 <HAL_InitTick>
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	58024400 	.word	0x58024400
 8003320:	0800ce9c 	.word	0x0800ce9c
 8003324:	24000004 	.word	0x24000004
 8003328:	24000000 	.word	0x24000000
 800332c:	24000008 	.word	0x24000008

08003330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003336:	4bb3      	ldr	r3, [pc, #716]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800333e:	2b18      	cmp	r3, #24
 8003340:	f200 8155 	bhi.w	80035ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	080033b1 	.word	0x080033b1
 8003350:	080035ef 	.word	0x080035ef
 8003354:	080035ef 	.word	0x080035ef
 8003358:	080035ef 	.word	0x080035ef
 800335c:	080035ef 	.word	0x080035ef
 8003360:	080035ef 	.word	0x080035ef
 8003364:	080035ef 	.word	0x080035ef
 8003368:	080035ef 	.word	0x080035ef
 800336c:	080033d7 	.word	0x080033d7
 8003370:	080035ef 	.word	0x080035ef
 8003374:	080035ef 	.word	0x080035ef
 8003378:	080035ef 	.word	0x080035ef
 800337c:	080035ef 	.word	0x080035ef
 8003380:	080035ef 	.word	0x080035ef
 8003384:	080035ef 	.word	0x080035ef
 8003388:	080035ef 	.word	0x080035ef
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080035ef 	.word	0x080035ef
 8003394:	080035ef 	.word	0x080035ef
 8003398:	080035ef 	.word	0x080035ef
 800339c:	080035ef 	.word	0x080035ef
 80033a0:	080035ef 	.word	0x080035ef
 80033a4:	080035ef 	.word	0x080035ef
 80033a8:	080035ef 	.word	0x080035ef
 80033ac:	080033e3 	.word	0x080033e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033b0:	4b94      	ldr	r3, [pc, #592]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033bc:	4b91      	ldr	r3, [pc, #580]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	4a90      	ldr	r2, [pc, #576]	; (8003608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
 80033cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033ce:	e111      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033d0:	4b8d      	ldr	r3, [pc, #564]	; (8003608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033d2:	61bb      	str	r3, [r7, #24]
    break;
 80033d4:	e10e      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033d6:	4b8d      	ldr	r3, [pc, #564]	; (800360c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d8:	61bb      	str	r3, [r7, #24]
    break;
 80033da:	e10b      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033dc:	4b8c      	ldr	r3, [pc, #560]	; (8003610 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033de:	61bb      	str	r3, [r7, #24]
    break;
 80033e0:	e108      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033e2:	4b88      	ldr	r3, [pc, #544]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80033ec:	4b85      	ldr	r3, [pc, #532]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033f8:	4b82      	ldr	r3, [pc, #520]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003402:	4b80      	ldr	r3, [pc, #512]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80e1 	beq.w	80035e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b02      	cmp	r3, #2
 800342a:	f000 8083 	beq.w	8003534 <HAL_RCC_GetSysClockFreq+0x204>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b02      	cmp	r3, #2
 8003432:	f200 80a1 	bhi.w	8003578 <HAL_RCC_GetSysClockFreq+0x248>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x114>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d056      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003442:	e099      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003444:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02d      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003450:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	08db      	lsrs	r3, r3, #3
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	4a6b      	ldr	r2, [pc, #428]	; (8003608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
 8003460:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347a:	4b62      	ldr	r3, [pc, #392]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348a:	ed97 6a02 	vldr	s12, [r7, #8]
 800348e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800349e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80034aa:	e087      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003618 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034be:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ee:	e065      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800361c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003512:	ed97 6a02 	vldr	s12, [r7, #8]
 8003516:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800351a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800351e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003532:	e043      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003620 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003546:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003556:	ed97 6a02 	vldr	s12, [r7, #8]
 800355a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800355e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800356a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003576:	e021      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	eddf 6a26 	vldr	s13, [pc, #152]	; 800361c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359a:	ed97 6a02 	vldr	s12, [r7, #8]
 800359e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	0a5b      	lsrs	r3, r3, #9
 80035c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c6:	3301      	adds	r3, #1
 80035c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80035d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e0:	ee17 3a90 	vmov	r3, s15
 80035e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80035e6:	e005      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
    break;
 80035ec:	e002      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035f0:	61bb      	str	r3, [r7, #24]
    break;
 80035f2:	bf00      	nop
  }

  return sysclockfreq;
 80035f4:	69bb      	ldr	r3, [r7, #24]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400
 8003608:	03d09000 	.word	0x03d09000
 800360c:	003d0900 	.word	0x003d0900
 8003610:	017d7840 	.word	0x017d7840
 8003614:	46000000 	.word	0x46000000
 8003618:	4c742400 	.word	0x4c742400
 800361c:	4a742400 	.word	0x4a742400
 8003620:	4bbebc20 	.word	0x4bbebc20

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800362a:	f7ff fe81 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_GetHCLKFreq+0x50>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490f      	ldr	r1, [pc, #60]	; (8003678 <HAL_RCC_GetHCLKFreq+0x54>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_RCC_GetHCLKFreq+0x50>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	4a09      	ldr	r2, [pc, #36]	; (8003678 <HAL_RCC_GetHCLKFreq+0x54>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	4a07      	ldr	r2, [pc, #28]	; (800367c <HAL_RCC_GetHCLKFreq+0x58>)
 8003660:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003662:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_RCC_GetHCLKFreq+0x58>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	58024400 	.word	0x58024400
 8003678:	0800ce9c 	.word	0x0800ce9c
 800367c:	24000004 	.word	0x24000004
 8003680:	24000000 	.word	0x24000000

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003690:	2300      	movs	r3, #0
 8003692:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03f      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036a8:	d02a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036ae:	d824      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b4:	d018      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ba:	d81e      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c4:	d007      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036c6:	e018      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4bab      	ldr	r3, [pc, #684]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4aaa      	ldr	r2, [pc, #680]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036d4:	e015      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 fff3 	bl	80056c8 <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036e6:	e00c      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3324      	adds	r3, #36	; 0x24
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 f89c 	bl	800582c <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036f8:	e003      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
      break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003708:	4b9b      	ldr	r3, [pc, #620]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003714:	4998      	ldr	r1, [pc, #608]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	650b      	str	r3, [r1, #80]	; 0x50
 800371a:	e001      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d03d      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	2b04      	cmp	r3, #4
 8003732:	d826      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003751 	.word	0x08003751
 8003740:	0800375f 	.word	0x0800375f
 8003744:	08003771 	.word	0x08003771
 8003748:	08003789 	.word	0x08003789
 800374c:	08003789 	.word	0x08003789
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4b89      	ldr	r3, [pc, #548]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4a88      	ldr	r2, [pc, #544]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800375c:	e015      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f001 ffaf 	bl	80056c8 <RCCEx_PLL2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800376e:	e00c      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3324      	adds	r3, #36	; 0x24
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f002 f858 	bl	800582c <RCCEx_PLL3_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
      break;
 8003786:	e000      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003790:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003794:	f023 0207 	bic.w	r2, r3, #7
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	4976      	ldr	r1, [pc, #472]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	650b      	str	r3, [r1, #80]	; 0x50
 80037a2:	e001      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d042      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037bc:	d02b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d825      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037c4:	2bc0      	cmp	r3, #192	; 0xc0
 80037c6:	d028      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037c8:	2bc0      	cmp	r3, #192	; 0xc0
 80037ca:	d821      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d016      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d81d      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d007      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80037dc:	e018      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037de:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	4a65      	ldr	r2, [pc, #404]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037ea:	e017      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 ff68 	bl	80056c8 <RCCEx_PLL2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037fc:	e00e      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3324      	adds	r3, #36	; 0x24
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f002 f811 	bl	800582c <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800380e:	e005      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	e002      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800381a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003822:	4b55      	ldr	r3, [pc, #340]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	4952      	ldr	r1, [pc, #328]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	650b      	str	r3, [r1, #80]	; 0x50
 8003834:	e001      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	2b00      	cmp	r3, #0
 8003844:	d049      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800384c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003850:	d030      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003856:	d82a      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003858:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800385c:	d02c      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800385e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003862:	d824      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003868:	d018      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800386a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386e:	d81e      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003878:	d007      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800387a:	e018      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003888:	e017      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f001 ff19 	bl	80056c8 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800389a:	e00e      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 ffc2 	bl	800582c <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038ac:	e005      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
      break;
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038c0:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038ce:	492a      	ldr	r1, [pc, #168]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	658b      	str	r3, [r1, #88]	; 0x58
 80038d4:	e001      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d04c      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f0:	d030      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80038f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f6:	d82a      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038fc:	d02c      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80038fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003902:	d824      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003908:	d018      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800390a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800390e:	d81e      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003918:	d007      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800391a:	e018      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4a15      	ldr	r2, [pc, #84]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003928:	e017      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fec9 	bl	80056c8 <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800393a:	e00e      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3324      	adds	r3, #36	; 0x24
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f001 ff72 	bl	800582c <RCCEx_PLL3_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800394c:	e005      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
      break;
 8003952:	e002      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800396e:	4902      	ldr	r1, [pc, #8]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	658b      	str	r3, [r1, #88]	; 0x58
 8003974:	e004      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003976:	bf00      	nop
 8003978:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d032      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	2b30      	cmp	r3, #48	; 0x30
 8003992:	d01c      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003994:	2b30      	cmp	r3, #48	; 0x30
 8003996:	d817      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d00c      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800399c:	2b20      	cmp	r3, #32
 800399e:	d813      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d016      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d10f      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a8:	4baf      	ldr	r3, [pc, #700]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4aae      	ldr	r2, [pc, #696]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039b4:	e00e      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fe83 	bl	80056c8 <RCCEx_PLL2_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039c6:	e005      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
      break;
 80039cc:	e002      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80039d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039da:	4ba3      	ldr	r3, [pc, #652]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e6:	49a0      	ldr	r1, [pc, #640]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039ec:	e001      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d047      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a06:	d030      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0c:	d82a      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a12:	d02c      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003a14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a18:	d824      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	d018      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a24:	d81e      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d007      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003a30:	e018      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a32:	4b8d      	ldr	r3, [pc, #564]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4a8c      	ldr	r2, [pc, #560]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a3e:	e017      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fe3e 	bl	80056c8 <RCCEx_PLL2_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a50:	e00e      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3324      	adds	r3, #36	; 0x24
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 fee7 	bl	800582c <RCCEx_PLL3_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a62:	e005      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
      break;
 8003a68:	e002      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e000      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a76:	4b7c      	ldr	r3, [pc, #496]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	4979      	ldr	r1, [pc, #484]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	650b      	str	r3, [r1, #80]	; 0x50
 8003a88:	e001      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d049      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa2:	d02e      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d828      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aae:	d02a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003ab0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ab4:	d822      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ab6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aba:	d026      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003abc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ac0:	d81c      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ac6:	d010      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003acc:	d816      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01d      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad6:	d111      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 fdf2 	bl	80056c8 <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ae8:	e012      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3324      	adds	r3, #36	; 0x24
 8003aee:	2101      	movs	r1, #1
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fe9b 	bl	800582c <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003afa:	e009      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	e006      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b02:	bf00      	nop
 8003b04:	e004      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b06:	bf00      	nop
 8003b08:	e002      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e000      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b16:	4b54      	ldr	r3, [pc, #336]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	4951      	ldr	r1, [pc, #324]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	650b      	str	r3, [r1, #80]	; 0x50
 8003b28:	e001      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d04b      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b44:	d02e      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b4a:	d828      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b50:	d02a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d822      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b5c:	d026      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b62:	d81c      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b68:	d010      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6e:	d816      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b78:	d111      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 fda1 	bl	80056c8 <RCCEx_PLL2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e012      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fe4a 	bl	800582c <RCCEx_PLL3_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b9c:	e009      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba2:	e006      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ba4:	bf00      	nop
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ba8:	bf00      	nop
 8003baa:	e002      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bc6:	4928      	ldr	r1, [pc, #160]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	658b      	str	r3, [r1, #88]	; 0x58
 8003bcc:	e001      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02f      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be6:	d00e      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bec:	d814      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d015      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf6:	d10f      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c04:	e00c      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 fd5b 	bl	80056c8 <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c16:	e003      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c32:	490d      	ldr	r1, [pc, #52]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	650b      	str	r3, [r1, #80]	; 0x50
 8003c38:	e001      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d033      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d81c      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c93 	.word	0x08003c93
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c7b 	.word	0x08003c7b
 8003c64:	08003c93 	.word	0x08003c93
 8003c68:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4bb8      	ldr	r3, [pc, #736]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4ab7      	ldr	r2, [pc, #732]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c78:	e00c      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 fd21 	bl	80056c8 <RCCEx_PLL2_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c8a:	e003      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c90:	e000      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c9a:	4bad      	ldr	r3, [pc, #692]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	49aa      	ldr	r1, [pc, #680]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cac:	e001      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8086 	beq.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc0:	4ba4      	ldr	r3, [pc, #656]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4aa3      	ldr	r2, [pc, #652]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ccc:	f7fc ff86 	bl	8000bdc <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd2:	e009      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd4:	f7fc ff82 	bl	8000bdc <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d902      	bls.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	75fb      	strb	r3, [r7, #23]
        break;
 8003ce6:	e005      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce8:	4b9a      	ldr	r3, [pc, #616]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ef      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d166      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cfa:	4b95      	ldr	r3, [pc, #596]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d04:	4053      	eors	r3, r2
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d013      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d0e:	4b90      	ldr	r3, [pc, #576]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d16:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d18:	4b8d      	ldr	r3, [pc, #564]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	4a8c      	ldr	r2, [pc, #560]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d22:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	4b8a      	ldr	r3, [pc, #552]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a89      	ldr	r2, [pc, #548]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d30:	4a87      	ldr	r2, [pc, #540]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d40:	d115      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fc ff4b 	bl	8000bdc <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d48:	e00b      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fc ff47 	bl	8000bdc <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d902      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	75fb      	strb	r3, [r7, #23]
            break;
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d62:	4b7b      	ldr	r3, [pc, #492]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ed      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d126      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d82:	d10d      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d84:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d92:	0919      	lsrs	r1, r3, #4
 8003d94:	4b70      	ldr	r3, [pc, #448]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003d96:	400b      	ands	r3, r1
 8003d98:	496d      	ldr	r1, [pc, #436]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	610b      	str	r3, [r1, #16]
 8003d9e:	e005      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003da0:	4b6b      	ldr	r3, [pc, #428]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	4a6a      	ldr	r2, [pc, #424]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003da6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003daa:	6113      	str	r3, [r2, #16]
 8003dac:	4b68      	ldr	r3, [pc, #416]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dba:	4965      	ldr	r1, [pc, #404]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	670b      	str	r3, [r1, #112]	; 0x70
 8003dc0:	e004      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
 8003dc4:	75bb      	strb	r3, [r7, #22]
 8003dc6:	e001      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d07e      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ddc:	2b28      	cmp	r3, #40	; 0x28
 8003dde:	d867      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003eb7 	.word	0x08003eb7
 8003dec:	08003eb1 	.word	0x08003eb1
 8003df0:	08003eb1 	.word	0x08003eb1
 8003df4:	08003eb1 	.word	0x08003eb1
 8003df8:	08003eb1 	.word	0x08003eb1
 8003dfc:	08003eb1 	.word	0x08003eb1
 8003e00:	08003eb1 	.word	0x08003eb1
 8003e04:	08003eb1 	.word	0x08003eb1
 8003e08:	08003e8d 	.word	0x08003e8d
 8003e0c:	08003eb1 	.word	0x08003eb1
 8003e10:	08003eb1 	.word	0x08003eb1
 8003e14:	08003eb1 	.word	0x08003eb1
 8003e18:	08003eb1 	.word	0x08003eb1
 8003e1c:	08003eb1 	.word	0x08003eb1
 8003e20:	08003eb1 	.word	0x08003eb1
 8003e24:	08003eb1 	.word	0x08003eb1
 8003e28:	08003e9f 	.word	0x08003e9f
 8003e2c:	08003eb1 	.word	0x08003eb1
 8003e30:	08003eb1 	.word	0x08003eb1
 8003e34:	08003eb1 	.word	0x08003eb1
 8003e38:	08003eb1 	.word	0x08003eb1
 8003e3c:	08003eb1 	.word	0x08003eb1
 8003e40:	08003eb1 	.word	0x08003eb1
 8003e44:	08003eb1 	.word	0x08003eb1
 8003e48:	08003eb7 	.word	0x08003eb7
 8003e4c:	08003eb1 	.word	0x08003eb1
 8003e50:	08003eb1 	.word	0x08003eb1
 8003e54:	08003eb1 	.word	0x08003eb1
 8003e58:	08003eb1 	.word	0x08003eb1
 8003e5c:	08003eb1 	.word	0x08003eb1
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003eb1 	.word	0x08003eb1
 8003e68:	08003eb7 	.word	0x08003eb7
 8003e6c:	08003eb1 	.word	0x08003eb1
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003eb1 	.word	0x08003eb1
 8003e7c:	08003eb1 	.word	0x08003eb1
 8003e80:	08003eb1 	.word	0x08003eb1
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003eb7 	.word	0x08003eb7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 fc18 	bl	80056c8 <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e9c:	e00c      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3324      	adds	r3, #36	; 0x24
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 fcc1 	bl	800582c <RCCEx_PLL3_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ebe:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eca:	4921      	ldr	r1, [pc, #132]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	654b      	str	r3, [r1, #84]	; 0x54
 8003ed0:	e001      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d03e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d820      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f33 	.word	0x08003f33
 8003ef4:	08003f09 	.word	0x08003f09
 8003ef8:	08003f1b 	.word	0x08003f1b
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f33 	.word	0x08003f33
 8003f04:	08003f33 	.word	0x08003f33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fbda 	bl	80056c8 <RCCEx_PLL2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f18:	e00c      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3324      	adds	r3, #36	; 0x24
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fc83 	bl	800582c <RCCEx_PLL3_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f30:	e000      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d110      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f3a:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f023 0207 	bic.w	r2, r3, #7
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f46:	4902      	ldr	r1, [pc, #8]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f4c:	e008      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003f4e:	bf00      	nop
 8003f50:	58024400 	.word	0x58024400
 8003f54:	58024800 	.word	0x58024800
 8003f58:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d039      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d820      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fbf 	.word	0x08003fbf
 8003f80:	08003f95 	.word	0x08003f95
 8003f84:	08003fa7 	.word	0x08003fa7
 8003f88:	08003fbf 	.word	0x08003fbf
 8003f8c:	08003fbf 	.word	0x08003fbf
 8003f90:	08003fbf 	.word	0x08003fbf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 fb94 	bl	80056c8 <RCCEx_PLL2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fa4:	e00c      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3324      	adds	r3, #36	; 0x24
 8003faa:	2101      	movs	r1, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fc3d 	bl	800582c <RCCEx_PLL3_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e003      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	75fb      	strb	r3, [r7, #23]
      break;
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc6:	4bb7      	ldr	r3, [pc, #732]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd4:	49b3      	ldr	r1, [pc, #716]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	658b      	str	r3, [r1, #88]	; 0x58
 8003fda:	e001      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d04b      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ff6:	d02e      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ffc:	d828      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d02a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d822      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800400a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800400e:	d026      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004010:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004014:	d81c      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401a:	d010      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800401c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004020:	d816      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01d      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800402a:	d111      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fb48 	bl	80056c8 <RCCEx_PLL2_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800403c:	e012      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3324      	adds	r3, #36	; 0x24
 8004042:	2102      	movs	r1, #2
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fbf1 	bl	800582c <RCCEx_PLL3_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800404e:	e009      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
      break;
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004056:	bf00      	nop
 8004058:	e004      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800406a:	4b8e      	ldr	r3, [pc, #568]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004078:	498a      	ldr	r1, [pc, #552]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800407a:	4313      	orrs	r3, r2
 800407c:	654b      	str	r3, [r1, #84]	; 0x54
 800407e:	e001      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d04b      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004096:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800409a:	d02e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800409c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040a0:	d828      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d02a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	d822      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040b2:	d026      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80040b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040b8:	d81c      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040be:	d010      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80040c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c4:	d816      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d111      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 faf6 	bl	80056c8 <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040e0:	e012      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 fb9f 	bl	800582c <RCCEx_PLL3_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040f2:	e009      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
      break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800410e:	4b65      	ldr	r3, [pc, #404]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800411c:	4961      	ldr	r1, [pc, #388]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800411e:	4313      	orrs	r3, r2
 8004120:	658b      	str	r3, [r1, #88]	; 0x58
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d04b      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800413e:	d02e      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004140:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004144:	d828      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414a:	d02a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004150:	d822      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004152:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004156:	d026      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004158:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800415c:	d81c      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800415e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004162:	d010      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004168:	d816      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800416e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004172:	d111      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f001 faa4 	bl	80056c8 <RCCEx_PLL2_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004184:	e012      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3324      	adds	r3, #36	; 0x24
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f001 fb4d 	bl	800582c <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004196:	e009      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
      break;
 800419c:	e006      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800419e:	bf00      	nop
 80041a0:	e004      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041a2:	bf00      	nop
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80041aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041b2:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c0:	4938      	ldr	r1, [pc, #224]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	658b      	str	r3, [r1, #88]	; 0x58
 80041c6:	e001      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d10a      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3324      	adds	r3, #36	; 0x24
 80041e8:	2102      	movs	r1, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 fb1e 	bl	800582c <RCCEx_PLL3_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004208:	4926      	ldr	r1, [pc, #152]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800420a:	4313      	orrs	r3, r2
 800420c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004224:	d10a      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fafd 	bl	800582c <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424a:	4916      	ldr	r1, [pc, #88]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800424c:	4313      	orrs	r3, r2
 800424e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d036      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004266:	d01f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800426c:	d817      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004276:	d009      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004278:	e011      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fa21 	bl	80056c8 <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800428a:	e00e      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3324      	adds	r3, #36	; 0x24
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f001 faca 	bl	800582c <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800429c:	e005      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80042a4:	58024400 	.word	0x58024400
      break;
 80042a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b0:	4b93      	ldr	r3, [pc, #588]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042be:	4990      	ldr	r1, [pc, #576]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	658b      	str	r3, [r1, #88]	; 0x58
 80042c4:	e001      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d033      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042e0:	d01c      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80042e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042e6:	d816      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80042e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ec:	d003      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80042ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f2:	d007      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80042f4:	e00f      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f6:	4b82      	ldr	r3, [pc, #520]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	4a81      	ldr	r2, [pc, #516]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004300:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004302:	e00c      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3324      	adds	r3, #36	; 0x24
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fa8e 	bl	800582c <RCCEx_PLL3_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
      break;
 800431a:	e000      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800431c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004324:	4b76      	ldr	r3, [pc, #472]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004332:	4973      	ldr	r1, [pc, #460]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	654b      	str	r3, [r1, #84]	; 0x54
 8004338:	e001      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d029      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004356:	d007      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004358:	e00f      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435a:	4b69      	ldr	r3, [pc, #420]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004366:	e00b      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	2102      	movs	r1, #2
 800436e:	4618      	mov	r0, r3
 8004370:	f001 f9aa 	bl	80056c8 <RCCEx_PLL2_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004378:	e002      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
      break;
 800437e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004386:	4b5e      	ldr	r3, [pc, #376]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	495b      	ldr	r1, [pc, #364]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004394:	4313      	orrs	r3, r2
 8004396:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004398:	e001      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3324      	adds	r3, #36	; 0x24
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 fa3b 	bl	800582c <RCCEx_PLL3_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d030      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d4:	d017      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043da:	d811      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d013      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80043e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e6:	d80b      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d010      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80043ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f0:	d106      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f2:	4b43      	ldr	r3, [pc, #268]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4a42      	ldr	r2, [pc, #264]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80043fe:	e007      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
      break;
 8004404:	e004      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004406:	bf00      	nop
 8004408:	e002      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800440e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004416:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004422:	4937      	ldr	r1, [pc, #220]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004424:	4313      	orrs	r3, r2
 8004426:	654b      	str	r3, [r1, #84]	; 0x54
 8004428:	e001      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800443a:	4b31      	ldr	r3, [pc, #196]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800443c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	492e      	ldr	r1, [pc, #184]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004448:	4313      	orrs	r3, r2
 800444a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004458:	4b29      	ldr	r3, [pc, #164]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004466:	4926      	ldr	r1, [pc, #152]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004478:	4b21      	ldr	r3, [pc, #132]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004484:	491e      	ldr	r1, [pc, #120]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	4a19      	ldr	r2, [pc, #100]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800449c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044a0:	6113      	str	r3, [r2, #16]
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044ac:	4914      	ldr	r1, [pc, #80]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	da08      	bge.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c6:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	4906      	ldr	r1, [pc, #24]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80044ec:	7dbb      	ldrb	r3, [r7, #22]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	58024400 	.word	0x58024400

08004504 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b090      	sub	sp, #64	; 0x40
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004512:	f040 8095 	bne.w	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004516:	4bae      	ldr	r3, [pc, #696]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2b04      	cmp	r3, #4
 8004524:	f200 8088 	bhi.w	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004528:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004545 	.word	0x08004545
 8004534:	0800456d 	.word	0x0800456d
 8004538:	08004595 	.word	0x08004595
 800453c:	08004631 	.word	0x08004631
 8004540:	080045bd 	.word	0x080045bd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004544:	4ba2      	ldr	r3, [pc, #648]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004550:	d108      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004556:	4618      	mov	r0, r3
 8004558:	f000 ff64 	bl	8005424 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004560:	f000 bc95 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004568:	f000 bc91 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800456c:	4b98      	ldr	r3, [pc, #608]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004578:	d108      	bne.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800457a:	f107 0318 	add.w	r3, r7, #24
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fca8 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004588:	f000 bc81 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004590:	f000 bc7d 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004594:	4b8e      	ldr	r3, [pc, #568]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800459c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a0:	d108      	bne.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fde8 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80045b0:	f000 bc6d 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045b8:	f000 bc69 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80045bc:	4b84      	ldr	r3, [pc, #528]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80045c6:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d10c      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045d8:	4b7d      	ldr	r3, [pc, #500]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	4a7c      	ldr	r2, [pc, #496]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ea:	e01f      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80045ec:	4b78      	ldr	r3, [pc, #480]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f8:	d106      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004600:	d102      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004602:	4b75      	ldr	r3, [pc, #468]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004606:	e011      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004608:	4b71      	ldr	r3, [pc, #452]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004614:	d106      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461c:	d102      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800461e:	4b6f      	ldr	r3, [pc, #444]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004622:	e003      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004628:	f000 bc31 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800462c:	f000 bc2f 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004630:	4b6b      	ldr	r3, [pc, #428]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004634:	f000 bc2b 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800463c:	f000 bc27 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004646:	f040 8095 	bne.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800464a:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800464c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004652:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465a:	d04d      	beq.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004662:	f200 8084 	bhi.w	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	2bc0      	cmp	r3, #192	; 0xc0
 800466a:	d07d      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	2bc0      	cmp	r3, #192	; 0xc0
 8004670:	d87d      	bhi.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	d02d      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d877      	bhi.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d012      	beq.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800468a:	e070      	b.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004698:	d107      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800469a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fec0 	bl	8005424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046a8:	e3f1      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046ae:	e3ee      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046b0:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046bc:	d107      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046be:	f107 0318 	add.w	r3, r7, #24
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fc06 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046cc:	e3df      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046d2:	e3dc      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046d4:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e0:	d107      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046e2:	f107 030c 	add.w	r3, r7, #12
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fd48 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046f0:	e3cd      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046f6:	e3ca      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80046f8:	4b35      	ldr	r3, [pc, #212]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004700:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004702:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d10c      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800470e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004714:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	08db      	lsrs	r3, r3, #3
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	4a2d      	ldr	r2, [pc, #180]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	e01e      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004734:	d106      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473c:	d102      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004742:	e010      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004744:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004750:	d106      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8004752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004758:	d102      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800475a:	4b20      	ldr	r3, [pc, #128]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475e:	e002      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004764:	e393      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004766:	e392      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004768:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800476c:	e38f      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004772:	e38c      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477a:	f040 80a7 	bne.w	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004786:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800478e:	d05f      	beq.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004796:	f200 8096 	bhi.w	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047a0:	f000 808e 	beq.w	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047aa:	f200 808c 	bhi.w	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b4:	d03a      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047bc:	f200 8083 	bhi.w	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00e      	beq.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047cc:	d01c      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80047ce:	e07a      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80047d0:	58024400 	.word	0x58024400
 80047d4:	03d09000 	.word	0x03d09000
 80047d8:	003d0900 	.word	0x003d0900
 80047dc:	017d7840 	.word	0x017d7840
 80047e0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047e4:	4baa      	ldr	r3, [pc, #680]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f0:	d107      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fe14 	bl	8005424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004800:	e345      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004806:	e342      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004808:	4ba1      	ldr	r3, [pc, #644]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004814:	d107      	bne.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004816:	f107 0318 	add.w	r3, r7, #24
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fb5a 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004824:	e333      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800482a:	e330      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800482c:	4b98      	ldr	r3, [pc, #608]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004838:	d107      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800483a:	f107 030c 	add.w	r3, r7, #12
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fc9c 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004848:	e321      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800484e:	e31e      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004850:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004858:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800485a:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b04      	cmp	r3, #4
 8004864:	d10c      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800486c:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	4a87      	ldr	r2, [pc, #540]	; (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487e:	e01e      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004880:	4b83      	ldr	r3, [pc, #524]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488c:	d106      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004894:	d102      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004896:	4b80      	ldr	r3, [pc, #512]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800489a:	e010      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800489c:	4b7c      	ldr	r3, [pc, #496]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a8:	d106      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b0:	d102      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048b2:	4b7a      	ldr	r3, [pc, #488]	; (8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b6:	e002      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048bc:	e2e7      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80048be:	e2e6      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048c0:	4b77      	ldr	r3, [pc, #476]	; (8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048c4:	e2e3      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048ca:	e2e0      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d2:	f040 809c 	bne.w	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80048d6:	4b6e      	ldr	r3, [pc, #440]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80048de:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e6:	d054      	beq.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ee:	f200 808b 	bhi.w	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048f8:	f000 8083 	beq.w	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004902:	f200 8081 	bhi.w	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800490c:	d02f      	beq.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004914:	d878      	bhi.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d004      	beq.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004922:	d012      	beq.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004924:	e070      	b.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004926:	4b5a      	ldr	r3, [pc, #360]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004932:	d107      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fd73 	bl	8005424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004942:	e2a4      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004948:	e2a1      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800494a:	4b51      	ldr	r3, [pc, #324]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004956:	d107      	bne.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004958:	f107 0318 	add.w	r3, r7, #24
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fab9 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004966:	e292      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800496c:	e28f      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800496e:	4b48      	ldr	r3, [pc, #288]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497a:	d107      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800497c:	f107 030c 	add.w	r3, r7, #12
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fbfb 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800498a:	e280      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004990:	e27d      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004996:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800499a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800499c:	4b3c      	ldr	r3, [pc, #240]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d10c      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049ae:	4b38      	ldr	r3, [pc, #224]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	08db      	lsrs	r3, r3, #3
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	4a36      	ldr	r2, [pc, #216]	; (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c0:	e01e      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049c2:	4b33      	ldr	r3, [pc, #204]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d106      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80049d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049d6:	d102      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049dc:	e010      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049de:	4b2c      	ldr	r3, [pc, #176]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049ea:	d106      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f2:	d102      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049f4:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f8:	e002      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80049fe:	e246      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004a00:	e245      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a02:	4b27      	ldr	r3, [pc, #156]	; (8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a06:	e242      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a0c:	e23f      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a14:	f040 80a8 	bne.w	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004a18:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a28:	d060      	beq.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a30:	f200 8097 	bhi.w	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a3a:	f000 808f 	beq.w	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a44:	f200 808d 	bhi.w	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4e:	d03b      	beq.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a56:	f200 8084 	bhi.w	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	d01d      	beq.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004a68:	e07b      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a6a:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a76:	d107      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fcd1 	bl	8005424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a86:	e202      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a8c:	e1ff      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004a8e:	bf00      	nop
 8004a90:	58024400 	.word	0x58024400
 8004a94:	03d09000 	.word	0x03d09000
 8004a98:	003d0900 	.word	0x003d0900
 8004a9c:	017d7840 	.word	0x017d7840
 8004aa0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004aa4:	4ba3      	ldr	r3, [pc, #652]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ab2:	f107 0318 	add.w	r3, r7, #24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fa0c 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ac0:	e1e5      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac6:	e1e2      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ac8:	4b9a      	ldr	r3, [pc, #616]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fb4e 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ae4:	e1d3      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aea:	e1d0      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004aec:	4b91      	ldr	r3, [pc, #580]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004af6:	4b8f      	ldr	r3, [pc, #572]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b08:	4b8a      	ldr	r3, [pc, #552]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	08db      	lsrs	r3, r3, #3
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	4a89      	ldr	r2, [pc, #548]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1a:	e01e      	b.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b1c:	4b85      	ldr	r3, [pc, #532]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b28:	d106      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b30:	d102      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b32:	4b82      	ldr	r3, [pc, #520]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b36:	e010      	b.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b38:	4b7e      	ldr	r3, [pc, #504]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4c:	d102      	bne.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b4e:	4b7c      	ldr	r3, [pc, #496]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b52:	e002      	b.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b58:	e199      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b5a:	e198      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b5c:	4b79      	ldr	r3, [pc, #484]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b60:	e195      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b66:	e192      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b6e:	d173      	bne.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004b70:	4b70      	ldr	r3, [pc, #448]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b78:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b80:	d02f      	beq.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b88:	d863      	bhi.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b96:	d012      	beq.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004b98:	e05b      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b9a:	4b66      	ldr	r3, [pc, #408]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ba8:	f107 0318 	add.w	r3, r7, #24
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f991 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bb6:	e16a      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bbc:	e167      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bbe:	4b5d      	ldr	r3, [pc, #372]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bca:	d107      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fad3 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bda:	e158      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be0:	e155      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004be2:	4b54      	ldr	r3, [pc, #336]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bec:	4b51      	ldr	r3, [pc, #324]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d10c      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bfe:	4b4d      	ldr	r3, [pc, #308]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	08db      	lsrs	r3, r3, #3
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c10:	e01e      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c12:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c26:	d102      	bne.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c28:	4b44      	ldr	r3, [pc, #272]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c2c:	e010      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c2e:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3a:	d106      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c42:	d102      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c44:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c48:	e002      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c4e:	e11e      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c50:	e11d      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c56:	e11a      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5e:	d133      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004c60:	4b34      	ldr	r3, [pc, #208]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c76:	d012      	beq.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004c78:	e023      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c7a:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c86:	d107      	bne.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fbc9 	bl	8005424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c96:	e0fa      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c9c:	e0f7      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c9e:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004caa:	d107      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cac:	f107 0318 	add.w	r3, r7, #24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f90f 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cba:	e0e8      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cc0:	e0e5      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cc6:	e0e2      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cce:	f040 808f 	bne.w	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004cd2:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004cda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce2:	d075      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cea:	d87e      	bhi.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d060      	beq.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d876      	bhi.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d02:	d045      	beq.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d0a:	d86e      	bhi.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d02b      	beq.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d1a:	d866      	bhi.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d28:	d00e      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004d2a:	e05e      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004d2c:	f000 f8bc 	bl	8004ea8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d30:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004d32:	e0ac      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004d34:	58024400 	.word	0x58024400
 8004d38:	03d09000 	.word	0x03d09000
 8004d3c:	003d0900 	.word	0x003d0900
 8004d40:	017d7840 	.word	0x017d7840
 8004d44:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d48:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d54:	d107      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d56:	f107 0318 	add.w	r3, r7, #24
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f8ba 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d64:	e093      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d6a:	e090      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d6c:	4b4a      	ldr	r3, [pc, #296]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d78:	d107      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f9fc 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d88:	e081      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d8e:	e07e      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d90:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d109      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d9c:	4b3e      	ldr	r3, [pc, #248]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	4a3d      	ldr	r2, [pc, #244]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dae:	e06e      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004db4:	e06b      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004db6:	4b38      	ldr	r3, [pc, #224]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc2:	d102      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004dc4:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dc8:	e061      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dce:	e05e      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004dd0:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8004dde:	4b31      	ldr	r3, [pc, #196]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004de2:	e054      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004de8:	e051      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dee:	e04e      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d148      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e08:	d02a      	beq.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e10:	d838      	bhi.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e1e:	d00d      	beq.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004e20:	e030      	b.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e34:	e02b      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e3a:	e028      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e3c:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e48:	d107      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fae8 	bl	8005424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e58:	e019      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e5e:	e016      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e60:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e6e:	f107 0318 	add.w	r3, r7, #24
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f82e 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e7c:	e007      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e82:	e004      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e88:	e001      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3740      	adds	r7, #64	; 0x40
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	03d09000 	.word	0x03d09000
 8004ea0:	003d0900 	.word	0x003d0900
 8004ea4:	017d7840 	.word	0x017d7840

08004ea8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004eac:	f7fe fbba 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4904      	ldr	r1, [pc, #16]	; (8004ed0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	0800ce9c 	.word	0x0800ce9c

08004ed4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004edc:	4ba1      	ldr	r3, [pc, #644]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004ee6:	4b9f      	ldr	r3, [pc, #636]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	0b1b      	lsrs	r3, r3, #12
 8004eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ef2:	4b9c      	ldr	r3, [pc, #624]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004efe:	4b99      	ldr	r3, [pc, #612]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8111 	beq.w	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f000 8083 	beq.w	8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f200 80a1 	bhi.w	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d056      	beq.n	8004fec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f3e:	e099      	b.n	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f40:	4b88      	ldr	r3, [pc, #544]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02d      	beq.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f4c:	4b85      	ldr	r3, [pc, #532]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	4a84      	ldr	r2, [pc, #528]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b7b      	ldr	r3, [pc, #492]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004fa6:	e087      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fea:	e065      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffe:	4b59      	ldr	r3, [pc, #356]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005012:	eddf 5a56 	vldr	s11, [pc, #344]	; 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800502e:	e043      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b48      	ldr	r3, [pc, #288]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a03 	vldr	s12, [r7, #12]
 8005056:	eddf 5a45 	vldr	s11, [pc, #276]	; 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005072:	e021      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b37      	ldr	r3, [pc, #220]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a03 	vldr	s12, [r7, #12]
 800509a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	0a5b      	lsrs	r3, r3, #9
 80050be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050de:	ee17 2a90 	vmov	r2, s15
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80050e6:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005100:	edd7 6a07 	vldr	s13, [r7, #28]
 8005104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800510c:	ee17 2a90 	vmov	r2, s15
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005114:	4b13      	ldr	r3, [pc, #76]	; (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	0e1b      	lsrs	r3, r3, #24
 800511a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800512a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513a:	ee17 2a90 	vmov	r2, s15
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005142:	e008      	b.n	8005156 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
}
 8005156:	bf00      	nop
 8005158:	3724      	adds	r7, #36	; 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400
 8005168:	03d09000 	.word	0x03d09000
 800516c:	46000000 	.word	0x46000000
 8005170:	4c742400 	.word	0x4c742400
 8005174:	4a742400 	.word	0x4a742400
 8005178:	4bbebc20 	.word	0x4bbebc20

0800517c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	; 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005184:	4ba1      	ldr	r3, [pc, #644]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800518e:	4b9f      	ldr	r3, [pc, #636]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	0d1b      	lsrs	r3, r3, #20
 8005194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005198:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800519a:	4b9c      	ldr	r3, [pc, #624]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80051a6:	4b99      	ldr	r3, [pc, #612]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	08db      	lsrs	r3, r3, #3
 80051ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8111 	beq.w	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	f000 8083 	beq.w	80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f200 80a1 	bhi.w	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d056      	beq.n	8005294 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051e6:	e099      	b.n	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e8:	4b88      	ldr	r3, [pc, #544]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02d      	beq.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051f4:	4b85      	ldr	r3, [pc, #532]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	4a84      	ldr	r2, [pc, #528]	; (8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b7b      	ldr	r3, [pc, #492]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005232:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800524e:	e087      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005418 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b6a      	ldr	r3, [pc, #424]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a03 	vldr	s12, [r7, #12]
 8005276:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005292:	e065      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800541c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a6:	4b59      	ldr	r3, [pc, #356]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052d6:	e043      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b48      	ldr	r3, [pc, #288]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80052fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800531a:	e021      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800541c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b37      	ldr	r3, [pc, #220]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005342:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800535e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005360:	4b2a      	ldr	r3, [pc, #168]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	0a5b      	lsrs	r3, r3, #9
 8005366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800537a:	edd7 6a07 	vldr	s13, [r7, #28]
 800537e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005386:	ee17 2a90 	vmov	r2, s15
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800538e:	4b1f      	ldr	r3, [pc, #124]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b4:	ee17 2a90 	vmov	r2, s15
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e2:	ee17 2a90 	vmov	r2, s15
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053ea:	e008      	b.n	80053fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
}
 80053fe:	bf00      	nop
 8005400:	3724      	adds	r7, #36	; 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	58024400 	.word	0x58024400
 8005410:	03d09000 	.word	0x03d09000
 8005414:	46000000 	.word	0x46000000
 8005418:	4c742400 	.word	0x4c742400
 800541c:	4a742400 	.word	0x4a742400
 8005420:	4bbebc20 	.word	0x4bbebc20

08005424 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	; 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800542c:	4ba0      	ldr	r3, [pc, #640]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005436:	4b9e      	ldr	r3, [pc, #632]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005440:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005442:	4b9b      	ldr	r3, [pc, #620]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800544c:	4b98      	ldr	r3, [pc, #608]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800544e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005450:	08db      	lsrs	r3, r3, #3
 8005452:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	fb02 f303 	mul.w	r3, r2, r3
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005464:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8111 	beq.w	8005692 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b02      	cmp	r3, #2
 8005474:	f000 8083 	beq.w	800557e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b02      	cmp	r3, #2
 800547c:	f200 80a1 	bhi.w	80055c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d056      	beq.n	800553a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800548c:	e099      	b.n	80055c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800548e:	4b88      	ldr	r3, [pc, #544]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d02d      	beq.n	80054f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800549a:	4b85      	ldr	r3, [pc, #532]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	08db      	lsrs	r3, r3, #3
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	4a83      	ldr	r2, [pc, #524]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c4:	4b7a      	ldr	r3, [pc, #488]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80054d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80056b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80054dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80054f4:	e087      	b.n	8005606 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005500:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80056bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005508:	4b69      	ldr	r3, [pc, #420]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005518:	ed97 6a03 	vldr	s12, [r7, #12]
 800551c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80056b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800552c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005538:	e065      	b.n	8005606 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005544:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80056c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554c:	4b58      	ldr	r3, [pc, #352]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005554:	ee07 3a90 	vmov	s15, r3
 8005558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005560:	eddf 5a55 	vldr	s11, [pc, #340]	; 80056b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800557c:	e043      	b.n	8005606 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	ee07 3a90 	vmov	s15, r3
 8005584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005588:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80056c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800558c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005590:	4b47      	ldr	r3, [pc, #284]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005598:	ee07 3a90 	vmov	s15, r3
 800559c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80056b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055c0:	e021      	b.n	8005606 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80056bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80055d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d4:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055dc:	ee07 3a90 	vmov	s15, r3
 80055e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80056b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005600:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005604:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005606:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	0a5b      	lsrs	r3, r3, #9
 800560c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800561c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005620:	edd7 6a07 	vldr	s13, [r7, #28]
 8005624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562c:	ee17 2a90 	vmov	r2, s15
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005634:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	0c1b      	lsrs	r3, r3, #16
 800563a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800564a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800564e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800565a:	ee17 2a90 	vmov	r2, s15
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005662:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	0e1b      	lsrs	r3, r3, #24
 8005668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005678:	ee37 7a87 	vadd.f32	s14, s15, s14
 800567c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005688:	ee17 2a90 	vmov	r2, s15
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005690:	e008      	b.n	80056a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	609a      	str	r2, [r3, #8]
}
 80056a4:	bf00      	nop
 80056a6:	3724      	adds	r7, #36	; 0x24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	58024400 	.word	0x58024400
 80056b4:	03d09000 	.word	0x03d09000
 80056b8:	46000000 	.word	0x46000000
 80056bc:	4c742400 	.word	0x4c742400
 80056c0:	4a742400 	.word	0x4a742400
 80056c4:	4bbebc20 	.word	0x4bbebc20

080056c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056d6:	4b53      	ldr	r3, [pc, #332]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d101      	bne.n	80056e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e099      	b.n	800581a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056e6:	4b4f      	ldr	r3, [pc, #316]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a4e      	ldr	r2, [pc, #312]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80056ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f2:	f7fb fa73 	bl	8000bdc <HAL_GetTick>
 80056f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056f8:	e008      	b.n	800570c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056fa:	f7fb fa6f 	bl	8000bdc <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e086      	b.n	800581a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800570c:	4b45      	ldr	r3, [pc, #276]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005718:	4b42      	ldr	r3, [pc, #264]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	031b      	lsls	r3, r3, #12
 8005726:	493f      	ldr	r1, [pc, #252]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005728:	4313      	orrs	r3, r2
 800572a:	628b      	str	r3, [r1, #40]	; 0x28
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	3b01      	subs	r3, #1
 8005732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	3b01      	subs	r3, #1
 800573c:	025b      	lsls	r3, r3, #9
 800573e:	b29b      	uxth	r3, r3
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	3b01      	subs	r3, #1
 8005748:	041b      	lsls	r3, r3, #16
 800574a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	3b01      	subs	r3, #1
 8005756:	061b      	lsls	r3, r3, #24
 8005758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800575c:	4931      	ldr	r1, [pc, #196]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 800575e:	4313      	orrs	r3, r2
 8005760:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005762:	4b30      	ldr	r3, [pc, #192]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	492d      	ldr	r1, [pc, #180]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005770:	4313      	orrs	r3, r2
 8005772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005774:	4b2b      	ldr	r3, [pc, #172]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	f023 0220 	bic.w	r2, r3, #32
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	4928      	ldr	r1, [pc, #160]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005786:	4b27      	ldr	r3, [pc, #156]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	4a26      	ldr	r2, [pc, #152]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 800578c:	f023 0310 	bic.w	r3, r3, #16
 8005790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005792:	4b24      	ldr	r3, [pc, #144]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 8005794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <RCCEx_PLL2_Config+0x160>)
 8005798:	4013      	ands	r3, r2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	69d2      	ldr	r2, [r2, #28]
 800579e:	00d2      	lsls	r2, r2, #3
 80057a0:	4920      	ldr	r1, [pc, #128]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057a6:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057ac:	f043 0310 	orr.w	r3, r3, #16
 80057b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	4a19      	ldr	r2, [pc, #100]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057c4:	e00f      	b.n	80057e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d106      	bne.n	80057da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057cc:	4b15      	ldr	r3, [pc, #84]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	4a14      	ldr	r2, [pc, #80]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057d8:	e005      	b.n	80057e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	4a11      	ldr	r2, [pc, #68]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057e6:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a0e      	ldr	r2, [pc, #56]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f2:	f7fb f9f3 	bl	8000bdc <HAL_GetTick>
 80057f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057f8:	e008      	b.n	800580c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80057fa:	f7fb f9ef 	bl	8000bdc <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e006      	b.n	800581a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800580c:	4b05      	ldr	r3, [pc, #20]	; (8005824 <RCCEx_PLL2_Config+0x15c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
 8005828:	ffff0007 	.word	0xffff0007

0800582c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800583a:	4b53      	ldr	r3, [pc, #332]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b03      	cmp	r3, #3
 8005844:	d101      	bne.n	800584a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e099      	b.n	800597e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800584a:	4b4f      	ldr	r3, [pc, #316]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a4e      	ldr	r2, [pc, #312]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005856:	f7fb f9c1 	bl	8000bdc <HAL_GetTick>
 800585a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800585c:	e008      	b.n	8005870 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800585e:	f7fb f9bd 	bl	8000bdc <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e086      	b.n	800597e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005870:	4b45      	ldr	r3, [pc, #276]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f0      	bne.n	800585e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800587c:	4b42      	ldr	r3, [pc, #264]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	051b      	lsls	r3, r3, #20
 800588a:	493f      	ldr	r1, [pc, #252]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	628b      	str	r3, [r1, #40]	; 0x28
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	3b01      	subs	r3, #1
 8005896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	3b01      	subs	r3, #1
 80058a0:	025b      	lsls	r3, r3, #9
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058c0:	4931      	ldr	r1, [pc, #196]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058c6:	4b30      	ldr	r3, [pc, #192]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	492d      	ldr	r1, [pc, #180]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058d8:	4b2b      	ldr	r3, [pc, #172]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	4928      	ldr	r1, [pc, #160]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058ea:	4b27      	ldr	r3, [pc, #156]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	4a26      	ldr	r2, [pc, #152]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058f6:	4b24      	ldr	r3, [pc, #144]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fa:	4b24      	ldr	r3, [pc, #144]	; (800598c <RCCEx_PLL3_Config+0x160>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	69d2      	ldr	r2, [r2, #28]
 8005902:	00d2      	lsls	r2, r2, #3
 8005904:	4920      	ldr	r1, [pc, #128]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005906:	4313      	orrs	r3, r2
 8005908:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800590a:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	4a1e      	ldr	r2, [pc, #120]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005914:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800591c:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	4a19      	ldr	r2, [pc, #100]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005926:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005928:	e00f      	b.n	800594a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d106      	bne.n	800593e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005930:	4b15      	ldr	r3, [pc, #84]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4a14      	ldr	r2, [pc, #80]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005936:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800593a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800593c:	e005      	b.n	800594a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	4a11      	ldr	r2, [pc, #68]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005948:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800594a:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a0e      	ldr	r2, [pc, #56]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005956:	f7fb f941 	bl	8000bdc <HAL_GetTick>
 800595a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800595c:	e008      	b.n	8005970 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800595e:	f7fb f93d 	bl	8000bdc <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e006      	b.n	800597e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <RCCEx_PLL3_Config+0x15c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
 800598c:	ffff0007 	.word	0xffff0007

08005990 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	; 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e07c      	b.n	8005a9c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10c      	bne.n	80059c8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fa ff28 	bl	8000818 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2203      	movs	r2, #3
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f867 	bl	8005aa4 <HAL_SD_InitCard>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e05d      	b.n	8005a9c <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80059e0:	f107 0308 	add.w	r3, r7, #8
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fcd4 	bl	8006394 <HAL_SD_GetCardStatus>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e052      	b.n	8005a9c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80059f6:	7e3b      	ldrb	r3, [r7, #24]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80059fc:	7e7b      	ldrb	r3, [r7, #25]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d10a      	bne.n	8005a20 <HAL_SD_Init+0x90>
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <HAL_SD_Init+0x86>
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a1e:	e00b      	b.n	8005a38 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d104      	bne.n	8005a32 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a30:	e002      	b.n	8005a38 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fd8a 	bl	8006558 <HAL_SD_ConfigWideBusOperation>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e026      	b.n	8005a9c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005a4e:	f7fb f8c5 	bl	8000bdc <HAL_GetTick>
 8005a52:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005a54:	e011      	b.n	8005a7a <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a56:	f7fb f8c1 	bl	8000bdc <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d109      	bne.n	8005a7a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e010      	b.n	8005a9c <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fe80 	bl	8006780 <HAL_SD_GetCardState>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d1e7      	bne.n	8005a56 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3728      	adds	r7, #40	; 0x28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005aa4:	b5b0      	push	{r4, r5, r7, lr}
 8005aa6:	b08e      	sub	sp, #56	; 0x38
 8005aa8:	af04      	add	r7, sp, #16
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005abc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005ac0:	f7fe fd20 	bl	8004504 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ac4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e079      	b.n	8005bd4 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	4a3d      	ldr	r2, [pc, #244]	; (8005bdc <HAL_SD_InitCard+0x138>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d107      	bne.n	8005b0c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0210 	orr.w	r2, r2, #16
 8005b0a:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681d      	ldr	r5, [r3, #0]
 8005b10:	466c      	mov	r4, sp
 8005b12:	f107 0314 	add.w	r3, r7, #20
 8005b16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b24:	4628      	mov	r0, r5
 8005b26:	f001 fb25 	bl	8007174 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fb68 	bl	8007204 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005b40:	4a27      	ldr	r2, [pc, #156]	; (8005be0 <HAL_SD_InitCard+0x13c>)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	3301      	adds	r3, #1
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fb f852 	bl	8000bf4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fef1 	bl	8006938 <SD_PowerON>
 8005b56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e02e      	b.n	8005bd4 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fe22 	bl	80067c0 <SD_InitCard>
 8005b7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e01b      	b.n	8005bd4 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 fbc3 	bl	8007330 <SDMMC_CmdBlockLength>
 8005baa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00f      	beq.n	8005bd2 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a0b      	ldr	r2, [pc, #44]	; (8005be4 <HAL_SD_InitCard+0x140>)
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3728      	adds	r7, #40	; 0x28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bdb0      	pop	{r4, r5, r7, pc}
 8005bdc:	014f8b59 	.word	0x014f8b59
 8005be0:	00012110 	.word	0x00012110
 8005be4:	1fe00fff 	.word	0x1fe00fff

08005be8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_SD_IRQHandler+0x2e>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 f9f8 	bl	8007004 <SD_Read_IT>
 8005c14:	e19a      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 80ac 	beq.w	8005d7e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b9d      	ldr	r3, [pc, #628]	; (8005eb0 <HAL_SD_IRQHandler+0x2c8>)
 8005c3c:	400b      	ands	r3, r1
 8005c3e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d038      	beq.n	8005cdc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <HAL_SD_IRQHandler+0x96>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d011      	beq.n	8005ca2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fb78 	bl	8007378 <SDMMC_CmdStopTransfer>
 8005c88:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f96d 	bl	8005f7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a83      	ldr	r2, [pc, #524]	; (8005eb4 <HAL_SD_IRQHandler+0x2cc>)
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d104      	bne.n	8005ccc <HAL_SD_IRQHandler+0xe4>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f94b 	bl	8005f68 <HAL_SD_RxCpltCallback>
 8005cd2:	e13b      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f93d 	bl	8005f54 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cda:	e137      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 8132 	beq.w	8005f4c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2200      	movs	r2, #0
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_SD_IRQHandler+0x12c>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d011      	beq.n	8005d38 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f001 fb2d 	bl	8007378 <SDMMC_CmdStopTransfer>
 8005d1e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f922 	bl	8005f7c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d104      	bne.n	8005d5a <HAL_SD_IRQHandler+0x172>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8fa 	bl	8005f54 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <HAL_SD_IRQHandler+0x18e>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80eb 	beq.w	8005f4c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f8f6 	bl	8005f68 <HAL_SD_RxCpltCallback>
}
 8005d7c:	e0e6      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_SD_IRQHandler+0x1b6>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 f97a 	bl	8007090 <SD_Write_IT>
 8005d9c:	e0d6      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80a2 	beq.w	8005ef2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	f043 0202 	orr.w	r2, r3, #2
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	f043 0208 	orr.w	r2, r3, #8
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f043 0210 	orr.w	r2, r3, #16
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a26      	ldr	r2, [pc, #152]	; (8005eb4 <HAL_SD_IRQHandler+0x2cc>)
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005e2c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e5c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fa88 	bl	8007378 <SDMMC_CmdStopTransfer>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e82:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00f      	beq.n	8005eb8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f868 	bl	8005f7c <HAL_SD_ErrorCallback>
}
 8005eac:	e04e      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
 8005eae:	bf00      	nop
 8005eb0:	ffff3ec5 	.word	0xffff3ec5
 8005eb4:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d044      	beq.n	8005f4c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d040      	beq.n	8005f4c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005ed8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f846 	bl	8005f7c <HAL_SD_ErrorCallback>
}
 8005ef0:	e02c      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d025      	beq.n	8005f4c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10c      	bne.n	8005f32 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 f91c 	bl	8007160 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005f28:	e010      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f001 f904 	bl	8007138 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8005f30:	e00c      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 f905 	bl	800714c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8005f42:	e003      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f8ed 	bl	8007124 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005f4a:	e7ff      	b.n	8005f4c <HAL_SD_IRQHandler+0x364>
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_SD_GetCardCID>:
  * @param  pCID: Pointer to a HAL_SD_CardCIDTypeDef structure that
  *         contains all CID register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCID(SD_HandleTypeDef *hsd, HAL_SD_CardCIDTypeDef *pCID)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
  pCID->ManufacturerID = (uint8_t)((hsd->CID[0] & 0xFF000000U) >> 24U);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	0e1b      	lsrs	r3, r3, #24
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	701a      	strb	r2, [r3, #0]

  pCID->OEM_AppliID = (uint16_t)((hsd->CID[0] & 0x00FFFF00U) >> 8U);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	805a      	strh	r2, [r3, #2]

  pCID->ProdName1 = (((hsd->CID[0] & 0x000000FFU) << 24U) | ((hsd->CID[1] & 0xFFFFFF00U) >> 8U));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	061a      	lsls	r2, r3, #24
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	605a      	str	r2, [r3, #4]

  pCID->ProdName2 = (uint8_t)(hsd->CID[1] & 0x000000FFU);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	721a      	strb	r2, [r3, #8]

  pCID->ProdRev = (uint8_t)((hsd->CID[2] & 0xFF000000U) >> 24U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe8:	0e1b      	lsrs	r3, r3, #24
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	725a      	strb	r2, [r3, #9]

  pCID->ProdSN = (((hsd->CID[2] & 0x00FFFFFFU) << 8U) | ((hsd->CID[3] & 0xFF000000U) >> 24U));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ff4:	021a      	lsls	r2, r3, #8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ffa:	0e1b      	lsrs	r3, r3, #24
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	60da      	str	r2, [r3, #12]

  pCID->Reserved1 = (uint8_t)((hsd->CID[3] & 0x00F00000U) >> 20U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006006:	0d1b      	lsrs	r3, r3, #20
 8006008:	b2db      	uxtb	r3, r3
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	b2da      	uxtb	r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	741a      	strb	r2, [r3, #16]

  pCID->ManufactDate = (uint16_t)((hsd->CID[3] & 0x000FFF00U) >> 8U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006018:	0a1b      	lsrs	r3, r3, #8
 800601a:	b29b      	uxth	r3, r3
 800601c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006020:	b29a      	uxth	r2, r3
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	825a      	strh	r2, [r3, #18]

  pCID->CID_CRC = (uint8_t)((hsd->CID[3] & 0x000000FEU) >> 1U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006032:	b2da      	uxtb	r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	751a      	strb	r2, [r3, #20]

  pCID->Reserved2 = 1U;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2201      	movs	r2, #1
 800603c:	755a      	strb	r2, [r3, #21]

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605a:	0f9b      	lsrs	r3, r3, #30
 800605c:	b2da      	uxtb	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006066:	0e9b      	lsrs	r3, r3, #26
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	b2da      	uxtb	r2, r3
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006078:	0e1b      	lsrs	r3, r3, #24
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	b2da      	uxtb	r2, r3
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	0c1b      	lsrs	r3, r3, #16
 800608c:	b2da      	uxtb	r2, r3
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	b2da      	uxtb	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ac:	0d1b      	lsrs	r3, r3, #20
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ca:	0bdb      	lsrs	r3, r3, #15
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060dc:	0b9b      	lsrs	r3, r3, #14
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ee:	0b5b      	lsrs	r3, r3, #13
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006100:	0b1b      	lsrs	r3, r3, #12
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	b2da      	uxtb	r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2200      	movs	r2, #0
 8006112:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d163      	bne.n	80061e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006120:	009a      	lsls	r2, r3, #2
 8006122:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006126:	4013      	ands	r3, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800612c:	0f92      	lsrs	r2, r2, #30
 800612e:	431a      	orrs	r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006138:	0edb      	lsrs	r3, r3, #27
 800613a:	b2db      	uxtb	r3, r3
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	b2da      	uxtb	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800614a:	0e1b      	lsrs	r3, r3, #24
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	b2da      	uxtb	r2, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615c:	0d5b      	lsrs	r3, r3, #21
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	b2da      	uxtb	r2, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616e:	0c9b      	lsrs	r3, r3, #18
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	b2da      	uxtb	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006180:	0bdb      	lsrs	r3, r3, #15
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	b2da      	uxtb	r2, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	7e1b      	ldrb	r3, [r3, #24]
 800619c:	b2db      	uxtb	r3, r3
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	3302      	adds	r3, #2
 80061a4:	2201      	movs	r2, #1
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80061ae:	fb02 f203 	mul.w	r2, r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	7a1b      	ldrb	r3, [r3, #8]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	2201      	movs	r2, #1
 80061c2:	409a      	lsls	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061d0:	0a52      	lsrs	r2, r2, #9
 80061d2:	fb02 f203 	mul.w	r2, r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e0:	659a      	str	r2, [r3, #88]	; 0x58
 80061e2:	e031      	b.n	8006248 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d11d      	bne.n	8006228 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f0:	041b      	lsls	r3, r3, #16
 80061f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061fa:	0c1b      	lsrs	r3, r3, #16
 80061fc:	431a      	orrs	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	3301      	adds	r3, #1
 8006208:	029a      	lsls	r2, r3, #10
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800621c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	659a      	str	r2, [r3, #88]	; 0x58
 8006226:	e00f      	b.n	8006248 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a58      	ldr	r2, [pc, #352]	; (8006390 <HAL_SD_GetCardCSD+0x344>)
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e09d      	b.n	8006384 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624c:	0b9b      	lsrs	r3, r3, #14
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	b2da      	uxtb	r2, r3
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625e:	09db      	lsrs	r3, r3, #7
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006266:	b2da      	uxtb	r2, r3
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006276:	b2da      	uxtb	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006280:	0fdb      	lsrs	r3, r3, #31
 8006282:	b2da      	uxtb	r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628c:	0f5b      	lsrs	r3, r3, #29
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	b2da      	uxtb	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629e:	0e9b      	lsrs	r3, r3, #26
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b0:	0d9b      	lsrs	r3, r3, #22
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c2:	0d5b      	lsrs	r3, r3, #21
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062de:	0c1b      	lsrs	r3, r3, #16
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f2:	0bdb      	lsrs	r3, r3, #15
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006306:	0b9b      	lsrs	r3, r3, #14
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631a:	0b5b      	lsrs	r3, r3, #13
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632e:	0b1b      	lsrs	r3, r3, #12
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006342:	0a9b      	lsrs	r3, r3, #10
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	b2da      	uxtb	r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	b2da      	uxtb	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006372:	b2da      	uxtb	r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	1fe00fff 	.word	0x1fe00fff

08006394 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b094      	sub	sp, #80	; 0x50
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80063a4:	f107 0308 	add.w	r3, r7, #8
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fbcc 	bl	8006b48 <SD_SendSDStatus>
 80063b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80063b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a4f      	ldr	r2, [pc, #316]	; (80064fc <HAL_SD_GetCardStatus+0x168>)
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80063da:	e070      	b.n	80064be <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	099b      	lsrs	r3, r3, #6
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	b29b      	uxth	r3, r3
 8006402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006406:	b29a      	uxth	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	0e1b      	lsrs	r3, r3, #24
 800640c:	b29b      	uxth	r3, r3
 800640e:	4313      	orrs	r3, r2
 8006410:	b29a      	uxth	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	061a      	lsls	r2, r3, #24
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006422:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800642c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	0e1b      	lsrs	r3, r3, #24
 8006432:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	b2da      	uxtb	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	0d1b      	lsrs	r3, r3, #20
 800644e:	b2db      	uxtb	r3, r3
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	b2da      	uxtb	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	b29b      	uxth	r3, r3
 8006460:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006464:	b29a      	uxth	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	b29b      	uxth	r3, r3
 800646a:	b2db      	uxtb	r3, r3
 800646c:	b29b      	uxth	r3, r3
 800646e:	4313      	orrs	r3, r2
 8006470:	b29a      	uxth	r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	0a9b      	lsrs	r3, r3, #10
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006480:	b2da      	uxtb	r2, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	b2da      	uxtb	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	0e1b      	lsrs	r3, r3, #24
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 ff32 	bl	8007330 <SDMMC_CmdBlockLength>
 80064cc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80064ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00d      	beq.n	80064f0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a08      	ldr	r2, [pc, #32]	; (80064fc <HAL_SD_GetCardStatus+0x168>)
 80064da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80064f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3750      	adds	r7, #80	; 0x50
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	1fe00fff 	.word	0x1fe00fff

08006500 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	b090      	sub	sp, #64	; 0x40
 800655c:	af04      	add	r7, sp, #16
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2203      	movs	r2, #3
 800656c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006574:	2b03      	cmp	r3, #3
 8006576:	d02e      	beq.n	80065d6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657e:	d106      	bne.n	800658e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
 800658c:	e029      	b.n	80065e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006594:	d10a      	bne.n	80065ac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fbce 	bl	8006d38 <SD_WideBus_Enable>
 800659c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
 80065aa:	e01a      	b.n	80065e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fc0b 	bl	8006dce <SD_WideBus_Disable>
 80065b8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
 80065c6:	e00c      	b.n	80065e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
 80065d4:	e005      	b.n	80065e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a60      	ldr	r2, [pc, #384]	; (8006770 <HAL_SD_ConfigWideBusOperation+0x218>)
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80065f8:	e097      	b.n	800672a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80065fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80065fe:	f7fd ff81 	bl	8004504 <HAL_RCCEx_GetPeriphCLKFreq>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 8086 	beq.w	8006718 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695a      	ldr	r2, [r3, #20]
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	4952      	ldr	r1, [pc, #328]	; (8006774 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800662a:	fba1 1303 	umull	r1, r3, r1, r3
 800662e:	0e1b      	lsrs	r3, r3, #24
 8006630:	429a      	cmp	r2, r3
 8006632:	d303      	bcc.n	800663c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	e05a      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006644:	d103      	bne.n	800664e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	e051      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d126      	bne.n	80066a6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10e      	bne.n	800667e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	4a45      	ldr	r2, [pc, #276]	; (8006778 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d906      	bls.n	8006676 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	4a42      	ldr	r2, [pc, #264]	; (8006774 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	0e5b      	lsrs	r3, r3, #25
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e03d      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	e039      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	4a3b      	ldr	r2, [pc, #236]	; (8006778 <HAL_SD_ConfigWideBusOperation+0x220>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d906      	bls.n	800669e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	4a38      	ldr	r2, [pc, #224]	; (8006774 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006694:	fba2 2303 	umull	r2, r3, r2, r3
 8006698:	0e5b      	lsrs	r3, r3, #25
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	e029      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	61fb      	str	r3, [r7, #28]
 80066a4:	e025      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10e      	bne.n	80066cc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	4a32      	ldr	r2, [pc, #200]	; (800677c <HAL_SD_ConfigWideBusOperation+0x224>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d906      	bls.n	80066c4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	4a2e      	ldr	r2, [pc, #184]	; (8006774 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	0e1b      	lsrs	r3, r3, #24
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	e016      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e012      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	4a28      	ldr	r2, [pc, #160]	; (800677c <HAL_SD_ConfigWideBusOperation+0x224>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d906      	bls.n	80066ec <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	4a24      	ldr	r2, [pc, #144]	; (8006774 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	0e1b      	lsrs	r3, r3, #24
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	e002      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681d      	ldr	r5, [r3, #0]
 80066fc:	466c      	mov	r4, sp
 80066fe:	f107 0318 	add.w	r3, r7, #24
 8006702:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800670a:	f107 030c 	add.w	r3, r7, #12
 800670e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006710:	4628      	mov	r0, r5
 8006712:	f000 fd2f 	bl	8007174 <SDMMC_Init>
 8006716:	e008      	b.n	800672a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fdfc 	bl	8007330 <SDMMC_CmdBlockLength>
 8006738:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a0a      	ldr	r2, [pc, #40]	; (8006770 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006766:	4618      	mov	r0, r3
 8006768:	3730      	adds	r7, #48	; 0x30
 800676a:	46bd      	mov	sp, r7
 800676c:	bdb0      	pop	{r4, r5, r7, pc}
 800676e:	bf00      	nop
 8006770:	1fe00fff 	.word	0x1fe00fff
 8006774:	55e63b89 	.word	0x55e63b89
 8006778:	02faf080 	.word	0x02faf080
 800677c:	017d7840 	.word	0x017d7840

08006780 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800678c:	f107 030c 	add.w	r3, r7, #12
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 faa8 	bl	8006ce8 <SD_SendStatus>
 8006798:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	0a5b      	lsrs	r3, r3, #9
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80067b6:	693b      	ldr	r3, [r7, #16]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b090      	sub	sp, #64	; 0x40
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80067c8:	2301      	movs	r3, #1
 80067ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fd28 	bl	8007226 <SDMMC_GetPowerState>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067e0:	e0a5      	b.n	800692e <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d02e      	beq.n	8006848 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fee7 	bl	80075c2 <SDMMC_CmdSendCID>
 80067f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <SD_InitCard+0x40>
    {
      return errorstate;
 80067fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fe:	e096      	b.n	800692e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fd53 	bl	80072b2 <SDMMC_GetResponse>
 800680c:	4602      	mov	r2, r0
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2104      	movs	r1, #4
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fd4a 	bl	80072b2 <SDMMC_GetResponse>
 800681e:	4602      	mov	r2, r0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2108      	movs	r1, #8
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fd41 	bl	80072b2 <SDMMC_GetResponse>
 8006830:	4602      	mov	r2, r0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	210c      	movs	r1, #12
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fd38 	bl	80072b2 <SDMMC_GetResponse>
 8006842:	4602      	mov	r2, r0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	2b03      	cmp	r3, #3
 800684e:	d00d      	beq.n	800686c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f107 020e 	add.w	r2, r7, #14
 8006858:	4611      	mov	r1, r2
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fef0 	bl	8007640 <SDMMC_CmdSetRelAdd>
 8006860:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <SD_InitCard+0xac>
    {
      return errorstate;
 8006868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686a:	e060      	b.n	800692e <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	2b03      	cmp	r3, #3
 8006872:	d036      	beq.n	80068e2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006874:	89fb      	ldrh	r3, [r7, #14]
 8006876:	461a      	mov	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f000 feb9 	bl	8007600 <SDMMC_CmdSendCSD>
 800688e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <SD_InitCard+0xda>
    {
      return errorstate;
 8006896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006898:	e049      	b.n	800692e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fd06 	bl	80072b2 <SDMMC_GetResponse>
 80068a6:	4602      	mov	r2, r0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2104      	movs	r1, #4
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fcfd 	bl	80072b2 <SDMMC_GetResponse>
 80068b8:	4602      	mov	r2, r0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2108      	movs	r1, #8
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fcf4 	bl	80072b2 <SDMMC_GetResponse>
 80068ca:	4602      	mov	r2, r0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	210c      	movs	r1, #12
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fceb 	bl	80072b2 <SDMMC_GetResponse>
 80068dc:	4602      	mov	r2, r0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2104      	movs	r1, #4
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fce2 	bl	80072b2 <SDMMC_GetResponse>
 80068ee:	4603      	mov	r3, r0
 80068f0:	0d1a      	lsrs	r2, r3, #20
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80068f6:	f107 0310 	add.w	r3, r7, #16
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fba5 	bl	800604c <HAL_SD_GetCardCSD>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006908:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800690c:	e00f      	b.n	800692e <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f000 fd68 	bl	80073f0 <SDMMC_CmdSelDesel>
 8006920:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <SD_InitCard+0x16c>
  {
    return errorstate;
 8006928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692a:	e000      	b.n	800692e <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3740      	adds	r7, #64	; 0x40
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800694c:	f7fa f946 	bl	8000bdc <HAL_GetTick>
 8006950:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fd6d 	bl	8007436 <SDMMC_CmdGoIdleState>
 800695c:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <SD_PowerON+0x30>
  {
    return errorstate;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	e0e9      	b.n	8006b3c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fd80 	bl	8007472 <SDMMC_CmdOperCond>
 8006972:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fd56 	bl	8007436 <SDMMC_CmdGoIdleState>
 800698a:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <SD_PowerON+0x64>
    {
      return errorstate;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	e0d2      	b.n	8006b3c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d137      	bne.n	8006a14 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2100      	movs	r1, #0
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fd81 	bl	80074b2 <SDMMC_CmdAppCommand>
 80069b0:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d02d      	beq.n	8006a14 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069bc:	e0be      	b.n	8006b3c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fd74 	bl	80074b2 <SDMMC_CmdAppCommand>
 80069ca:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <SD_PowerON+0x9e>
    {
      return errorstate;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	e0b2      	b.n	8006b3c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	495a      	ldr	r1, [pc, #360]	; (8006b44 <SD_PowerON+0x20c>)
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fd8b 	bl	80074f8 <SDMMC_CmdAppOperCommand>
 80069e2:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069ee:	e0a5      	b.n	8006b3c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fc5b 	bl	80072b2 <SDMMC_GetResponse>
 80069fc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	0fdb      	lsrs	r3, r3, #31
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <SD_PowerON+0xd2>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <SD_PowerON+0xd4>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]

    count++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d802      	bhi.n	8006a24 <SD_PowerON+0xec>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0cc      	beq.n	80069be <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d902      	bls.n	8006a34 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006a2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a32:	e083      	b.n	8006b3c <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d07d      	beq.n	8006b3a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d176      	bne.n	8006b3a <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d071      	beq.n	8006b3a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a5c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0208 	orr.w	r2, r2, #8
 8006a6c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fe4b 	bl	800770e <SDMMC_CmdVoltageSwitch>
 8006a78:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00c      	beq.n	8006a9a <SD_PowerON+0x162>
        {
          return errorstate;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	e05b      	b.n	8006b3c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a84:	f7fa f8aa 	bl	8000bdc <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	d102      	bne.n	8006a9a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006a94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a98:	e050      	b.n	8006b3c <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006aa8:	d1ec      	bne.n	8006a84 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac2:	d002      	beq.n	8006aca <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ac8:	e038      	b.n	8006b3c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8006aca:	2001      	movs	r0, #1
 8006acc:	f7ff fa60 	bl	8005f90 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0204 	orr.w	r2, r2, #4
 8006ade:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006ae0:	e00a      	b.n	8006af8 <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ae2:	f7fa f87b 	bl	8000bdc <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d102      	bne.n	8006af8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006af2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006af6:	e021      	b.n	8006b3c <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b06:	d1ec      	bne.n	8006ae2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b20:	d102      	bne.n	8006b28 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b26:	e009      	b.n	8006b3c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2213      	movs	r2, #19
 8006b2e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	c1100000 	.word	0xc1100000

08006b48 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08c      	sub	sp, #48	; 0x30
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b52:	f7fa f843 	bl	8000bdc <HAL_GetTick>
 8006b56:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fba5 	bl	80072b2 <SDMMC_GetResponse>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b72:	d102      	bne.n	8006b7a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b78:	e0b0      	b.n	8006cdc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2140      	movs	r1, #64	; 0x40
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fbd5 	bl	8007330 <SDMMC_CmdBlockLength>
 8006b86:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	e0a0      	b.n	8006cdc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f000 fc83 	bl	80074b2 <SDMMC_CmdAppCommand>
 8006bac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	e08d      	b.n	8006cdc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006bc6:	2340      	movs	r3, #64	; 0x40
 8006bc8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006bca:	2360      	movs	r3, #96	; 0x60
 8006bcc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f107 0208 	add.w	r2, r7, #8
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fb77 	bl	80072d8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fd6b 	bl	80076ca <SDMMC_CmdStatusRegister>
 8006bf4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d02b      	beq.n	8006c54 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	e069      	b.n	8006cdc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d013      	beq.n	8006c3e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1a:	e00d      	b.n	8006c38 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fad1 	bl	80071c8 <SDMMC_ReadFIFO>
 8006c26:	4602      	mov	r2, r0
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	601a      	str	r2, [r3, #0]
        pData++;
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	3304      	adds	r3, #4
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	3301      	adds	r3, #1
 8006c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	2b07      	cmp	r3, #7
 8006c3c:	d9ee      	bls.n	8006c1c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c3e:	f7f9 ffcd 	bl	8000bdc <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d102      	bne.n	8006c54 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c52:	e043      	b.n	8006cdc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0d2      	beq.n	8006c08 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c70:	2308      	movs	r3, #8
 8006c72:	e033      	b.n	8006cdc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c82:	2302      	movs	r3, #2
 8006c84:	e02a      	b.n	8006cdc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d017      	beq.n	8006cc4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006c94:	2320      	movs	r3, #32
 8006c96:	e021      	b.n	8006cdc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fa93 	bl	80071c8 <SDMMC_ReadFIFO>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	601a      	str	r2, [r3, #0]
    pData++;
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	3304      	adds	r3, #4
 8006cac:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006cae:	f7f9 ff95 	bl	8000bdc <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d102      	bne.n	8006cc4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006cbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cc2:	e00b      	b.n	8006cdc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e2      	bne.n	8006c98 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a03      	ldr	r2, [pc, #12]	; (8006ce4 <SD_SendSDStatus+0x19c>)
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3730      	adds	r7, #48	; 0x30
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	18000f3a 	.word	0x18000f3a

08006ce8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cfc:	e018      	b.n	8006d30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d06:	041b      	lsls	r3, r3, #16
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f000 fcba 	bl	8007684 <SDMMC_CmdSendStatus>
 8006d10:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	e009      	b.n	8006d30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2100      	movs	r1, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fac5 	bl	80072b2 <SDMMC_GetResponse>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	2300      	movs	r3, #0
 8006d46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 faaf 	bl	80072b2 <SDMMC_GetResponse>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d5e:	d102      	bne.n	8006d66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d64:	e02f      	b.n	8006dc6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d66:	f107 030c 	add.w	r3, r7, #12
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f879 	bl	8006e64 <SD_FindSCR>
 8006d72:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	e023      	b.n	8006dc6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01c      	beq.n	8006dc2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d90:	041b      	lsls	r3, r3, #16
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f000 fb8c 	bl	80074b2 <SDMMC_CmdAppCommand>
 8006d9a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	e00f      	b.n	8006dc6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2102      	movs	r1, #2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fbc3 	bl	8007538 <SDMMC_CmdBusWidth>
 8006db2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	e003      	b.n	8006dc6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e001      	b.n	8006dc6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006dc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b086      	sub	sp, #24
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fa64 	bl	80072b2 <SDMMC_GetResponse>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006df4:	d102      	bne.n	8006dfc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006dfa:	e02f      	b.n	8006e5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006dfc:	f107 030c 	add.w	r3, r7, #12
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f82e 	bl	8006e64 <SD_FindSCR>
 8006e08:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	e023      	b.n	8006e5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d01c      	beq.n	8006e58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	041b      	lsls	r3, r3, #16
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f000 fb41 	bl	80074b2 <SDMMC_CmdAppCommand>
 8006e30:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	e00f      	b.n	8006e5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fb78 	bl	8007538 <SDMMC_CmdBusWidth>
 8006e48:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	e003      	b.n	8006e5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	e001      	b.n	8006e5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08e      	sub	sp, #56	; 0x38
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e6e:	f7f9 feb5 	bl	8000bdc <HAL_GetTick>
 8006e72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60bb      	str	r3, [r7, #8]
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2108      	movs	r1, #8
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fa50 	bl	8007330 <SDMMC_CmdBlockLength>
 8006e90:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	e0ad      	b.n	8006ff8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea4:	041b      	lsls	r3, r3, #16
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f000 fb02 	bl	80074b2 <SDMMC_CmdAppCommand>
 8006eae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <SD_FindSCR+0x56>
  {
    return errorstate;
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	e09e      	b.n	8006ff8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006eba:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006ec0:	2308      	movs	r3, #8
 8006ec2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006ec4:	2330      	movs	r3, #48	; 0x30
 8006ec6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f107 0210 	add.w	r2, r7, #16
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f9fa 	bl	80072d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fb48 	bl	800757e <SDMMC_CmdSendSCR>
 8006eee:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d027      	beq.n	8006f46 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	e07e      	b.n	8006ff8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d113      	bne.n	8006f30 <SD_FindSCR+0xcc>
 8006f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d110      	bne.n	8006f30 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f958 	bl	80071c8 <SDMMC_ReadFIFO>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f951 	bl	80071c8 <SDMMC_ReadFIFO>
 8006f26:	4603      	mov	r3, r0
 8006f28:	60fb      	str	r3, [r7, #12]
      index++;
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f30:	f7f9 fe54 	bl	8000bdc <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d102      	bne.n	8006f46 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006f40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f44:	e058      	b.n	8006ff8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4c:	f240 532a 	movw	r3, #1322	; 0x52a
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0d1      	beq.n	8006efa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	e043      	b.n	8006ff8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2202      	movs	r2, #2
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f86:	2302      	movs	r3, #2
 8006f88:	e036      	b.n	8006ff8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	e029      	b.n	8006ff8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a15      	ldr	r2, [pc, #84]	; (8007000 <SD_FindSCR+0x19c>)
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	061a      	lsls	r2, r3, #24
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fb8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	0a1b      	lsrs	r3, r3, #8
 8006fbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006fc2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	0e1b      	lsrs	r3, r3, #24
 8006fc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	601a      	str	r2, [r3, #0]
    scr++;
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	061a      	lsls	r2, r3, #24
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fe0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	0a1b      	lsrs	r3, r3, #8
 8006fe6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006fea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	0e1b      	lsrs	r3, r3, #24
 8006ff0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3738      	adds	r7, #56	; 0x38
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	18000f3a 	.word	0x18000f3a

08007004 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007016:	2b1f      	cmp	r3, #31
 8007018:	d936      	bls.n	8007088 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e027      	b.n	8007070 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f8cf 	bl	80071c8 <SDMMC_ReadFIFO>
 800702a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	b2da      	uxtb	r2, r3
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	3301      	adds	r3, #1
 8007038:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	b2da      	uxtb	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	3301      	adds	r3, #1
 8007048:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	b2da      	uxtb	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3301      	adds	r3, #1
 8007058:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	0e1b      	lsrs	r3, r3, #24
 800705e:	b2da      	uxtb	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	3301      	adds	r3, #1
 8007068:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	3301      	adds	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b07      	cmp	r3, #7
 8007074:	d9d4      	bls.n	8007020 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	f1a3 0220 	sub.w	r2, r3, #32
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007088:	bf00      	nop
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	2b1f      	cmp	r3, #31
 80070a4:	d93a      	bls.n	800711c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	e02b      	b.n	8007104 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	60fb      	str	r3, [r7, #12]
      tmp++;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	3301      	adds	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	021a      	lsls	r2, r3, #8
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3301      	adds	r3, #1
 80070c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	041a      	lsls	r2, r3, #16
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	3301      	adds	r3, #1
 80070da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	061a      	lsls	r2, r3, #24
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3301      	adds	r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f107 020c 	add.w	r2, r7, #12
 80070f6:	4611      	mov	r1, r2
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 f872 	bl	80071e2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	3301      	adds	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b07      	cmp	r3, #7
 8007108:	d9d0      	bls.n	80070ac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	f1a3 0220 	sub.w	r2, r3, #32
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800711c:	bf00      	nop
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007174:	b084      	sub	sp, #16
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	f107 001c 	add.w	r0, r7, #28
 8007182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800718a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800718c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800718e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8007192:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8007196:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800719a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <SDMMC_Init+0x50>)
 80071a8:	4013      	ands	r3, r2
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	b004      	add	sp, #16
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	ffc02c00 	.word	0xffc02c00

080071c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f043 0203 	orr.w	r2, r3, #3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0303 	and.w	r3, r3, #3
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007262:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007268:	431a      	orrs	r2, r3
                       Command->CPSM);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800726e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <SDMMC_SendCommand+0x50>)
 800727c:	4013      	ands	r3, r2
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	fffee0c0 	.word	0xfffee0c0

08007298 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	b2db      	uxtb	r3, r3
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3314      	adds	r3, #20
 80072c0:	461a      	mov	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	4413      	add	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80072fe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007304:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800730a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007322:	2300      	movs	r3, #0

}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800733e:	2310      	movs	r3, #16
 8007340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007348:	2300      	movs	r3, #0
 800734a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800734c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007350:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007352:	f107 0308 	add.w	r3, r7, #8
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff ff73 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800735e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007362:	2110      	movs	r1, #16
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f9f5 	bl	8007754 <SDMMC_GetCmdResp1>
 800736a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800736c:	69fb      	ldr	r3, [r7, #28]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3720      	adds	r7, #32
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007384:	230c      	movs	r3, #12
 8007386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800738c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007396:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073b0:	f107 0308 	add.w	r3, r7, #8
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff ff44 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80073bc:	4a0b      	ldr	r2, [pc, #44]	; (80073ec <SDMMC_CmdStopTransfer+0x74>)
 80073be:	210c      	movs	r1, #12
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f9c7 	bl	8007754 <SDMMC_GetCmdResp1>
 80073c6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073da:	d101      	bne.n	80073e0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80073dc:	2300      	movs	r3, #0
 80073de:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80073e0:	69fb      	ldr	r3, [r7, #28]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3720      	adds	r7, #32
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	05f5e100 	.word	0x05f5e100

080073f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073fe:	2307      	movs	r3, #7
 8007400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800740c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007410:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007412:	f107 0308 	add.w	r3, r7, #8
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff ff13 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800741e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007422:	2107      	movs	r1, #7
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f995 	bl	8007754 <SDMMC_GetCmdResp1>
 800742a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800742c:	69fb      	ldr	r3, [r7, #28]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3720      	adds	r7, #32
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b088      	sub	sp, #32
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800744e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fef2 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fbb9 	bl	8007bd8 <SDMMC_GetCmdError>
 8007466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007468:	69fb      	ldr	r3, [r7, #28]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b088      	sub	sp, #32
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800747a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800747e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007480:	2308      	movs	r3, #8
 8007482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800748e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007492:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007494:	f107 0308 	add.w	r3, r7, #8
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff fed2 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fb4b 	bl	8007b3c <SDMMC_GetCmdResp7>
 80074a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074a8:	69fb      	ldr	r3, [r7, #28]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b088      	sub	sp, #32
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074c0:	2337      	movs	r3, #55	; 0x37
 80074c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074d4:	f107 0308 	add.w	r3, r7, #8
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff feb2 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80074e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e4:	2137      	movs	r1, #55	; 0x37
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f934 	bl	8007754 <SDMMC_GetCmdResp1>
 80074ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074ee:	69fb      	ldr	r3, [r7, #28]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3720      	adds	r7, #32
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007506:	2329      	movs	r3, #41	; 0x29
 8007508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800750a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800750e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007518:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800751a:	f107 0308 	add.w	r3, r7, #8
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fe8f 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa50 	bl	80079cc <SDMMC_GetCmdResp3>
 800752c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800752e:	69fb      	ldr	r3, [r7, #28]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3720      	adds	r7, #32
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007546:	2306      	movs	r3, #6
 8007548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800754a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800754e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007558:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800755a:	f107 0308 	add.w	r3, r7, #8
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fe6f 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007566:	f241 3288 	movw	r2, #5000	; 0x1388
 800756a:	2106      	movs	r1, #6
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f8f1 	bl	8007754 <SDMMC_GetCmdResp1>
 8007572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007574:	69fb      	ldr	r3, [r7, #28]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b088      	sub	sp, #32
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800758a:	2333      	movs	r3, #51	; 0x33
 800758c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800758e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800759c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800759e:	f107 0308 	add.w	r3, r7, #8
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff fe4d 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80075aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ae:	2133      	movs	r1, #51	; 0x33
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8cf 	bl	8007754 <SDMMC_GetCmdResp1>
 80075b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075b8:	69fb      	ldr	r3, [r7, #28]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b088      	sub	sp, #32
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80075ce:	2302      	movs	r3, #2
 80075d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80075d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80075d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075e2:	f107 0308 	add.w	r3, r7, #8
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff fe2b 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f9a2 	bl	8007938 <SDMMC_GetCmdResp2>
 80075f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075f6:	69fb      	ldr	r3, [r7, #28]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800760e:	2309      	movs	r3, #9
 8007610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800761c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007620:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007622:	f107 0308 	add.w	r3, r7, #8
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff fe0b 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f982 	bl	8007938 <SDMMC_GetCmdResp2>
 8007634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007636:	69fb      	ldr	r3, [r7, #28]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3720      	adds	r7, #32
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800764e:	2303      	movs	r3, #3
 8007650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800765c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fdeb 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	2103      	movs	r1, #3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f9ea 	bl	8007a4c <SDMMC_GetCmdResp6>
 8007678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800767a:	69fb      	ldr	r3, [r7, #28]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007692:	230d      	movs	r3, #13
 8007694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800769a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076a6:	f107 0308 	add.w	r3, r7, #8
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff fdc9 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80076b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b6:	210d      	movs	r1, #13
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f84b 	bl	8007754 <SDMMC_GetCmdResp1>
 80076be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076c0:	69fb      	ldr	r3, [r7, #28]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3720      	adds	r7, #32
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b088      	sub	sp, #32
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80076d6:	230d      	movs	r3, #13
 80076d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076ea:	f107 0308 	add.w	r3, r7, #8
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff fda7 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80076f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fa:	210d      	movs	r1, #13
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f829 	bl	8007754 <SDMMC_GetCmdResp1>
 8007702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007704:	69fb      	ldr	r3, [r7, #28]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b088      	sub	sp, #32
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800771a:	230b      	movs	r3, #11
 800771c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800771e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800772c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800772e:	f107 0308 	add.w	r3, r7, #8
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff fd85 	bl	8007244 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800773a:	f241 3288 	movw	r2, #5000	; 0x1388
 800773e:	210b      	movs	r1, #11
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f807 	bl	8007754 <SDMMC_GetCmdResp1>
 8007746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007748:	69fb      	ldr	r3, [r7, #28]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	460b      	mov	r3, r1
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007762:	4b70      	ldr	r3, [pc, #448]	; (8007924 <SDMMC_GetCmdResp1+0x1d0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a70      	ldr	r2, [pc, #448]	; (8007928 <SDMMC_GetCmdResp1+0x1d4>)
 8007768:	fba2 2303 	umull	r2, r3, r2, r3
 800776c:	0a5a      	lsrs	r2, r3, #9
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	fb02 f303 	mul.w	r3, r2, r3
 8007774:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	1e5a      	subs	r2, r3, #1
 800777a:	61fa      	str	r2, [r7, #28]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d102      	bne.n	8007786 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007784:	e0c9      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	4b67      	ldr	r3, [pc, #412]	; (800792c <SDMMC_GetCmdResp1+0x1d8>)
 8007790:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0ef      	beq.n	8007776 <SDMMC_GetCmdResp1+0x22>
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1ea      	bne.n	8007776 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2204      	movs	r2, #4
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077b2:	2304      	movs	r3, #4
 80077b4:	e0b1      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0a6      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4a58      	ldr	r2, [pc, #352]	; (8007930 <SDMMC_GetCmdResp1+0x1dc>)
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff fd60 	bl	8007298 <SDMMC_GetCommandResponse>
 80077d8:	4603      	mov	r3, r0
 80077da:	461a      	mov	r2, r3
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	4293      	cmp	r3, r2
 80077e0:	d001      	beq.n	80077e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e099      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80077e6:	2100      	movs	r1, #0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff fd62 	bl	80072b2 <SDMMC_GetResponse>
 80077ee:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4b50      	ldr	r3, [pc, #320]	; (8007934 <SDMMC_GetCmdResp1+0x1e0>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	e08d      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	da02      	bge.n	800780a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007808:	e087      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007814:	2340      	movs	r3, #64	; 0x40
 8007816:	e080      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007822:	2380      	movs	r3, #128	; 0x80
 8007824:	e079      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007834:	e071      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007844:	e069      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007854:	e061      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007864:	e059      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007874:	e051      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007884:	e049      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007894:	e041      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80078a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a4:	e039      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80078b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078b4:	e031      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80078c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078c4:	e029      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80078d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80078d4:	e021      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80078e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80078e4:	e019      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80078f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078f4:	e011      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007904:	e009      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007910:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007914:	e001      	b.n	800791a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	24000000 	.word	0x24000000
 8007928:	10624dd3 	.word	0x10624dd3
 800792c:	00200045 	.word	0x00200045
 8007930:	002000c5 	.word	0x002000c5
 8007934:	fdffe008 	.word	0xfdffe008

08007938 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007940:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <SDMMC_GetCmdResp2+0x88>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <SDMMC_GetCmdResp2+0x8c>)
 8007946:	fba2 2303 	umull	r2, r3, r2, r3
 800794a:	0a5b      	lsrs	r3, r3, #9
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	fb02 f303 	mul.w	r3, r2, r3
 8007954:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	1e5a      	subs	r2, r3, #1
 800795a:	60fa      	str	r2, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007964:	e026      	b.n	80079b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0ef      	beq.n	8007956 <SDMMC_GetCmdResp2+0x1e>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1ea      	bne.n	8007956 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2204      	movs	r2, #4
 8007990:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007992:	2304      	movs	r3, #4
 8007994:	e00e      	b.n	80079b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e003      	b.n	80079b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a06      	ldr	r2, [pc, #24]	; (80079c8 <SDMMC_GetCmdResp2+0x90>)
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	24000000 	.word	0x24000000
 80079c4:	10624dd3 	.word	0x10624dd3
 80079c8:	002000c5 	.word	0x002000c5

080079cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80079d4:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <SDMMC_GetCmdResp3+0x74>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1a      	ldr	r2, [pc, #104]	; (8007a44 <SDMMC_GetCmdResp3+0x78>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	0a5b      	lsrs	r3, r3, #9
 80079e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e4:	fb02 f303 	mul.w	r3, r2, r3
 80079e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1e5a      	subs	r2, r3, #1
 80079ee:	60fa      	str	r2, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079f8:	e01b      	b.n	8007a32 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0ef      	beq.n	80079ea <SDMMC_GetCmdResp3+0x1e>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1ea      	bne.n	80079ea <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2204      	movs	r2, #4
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a26:	2304      	movs	r3, #4
 8007a28:	e003      	b.n	8007a32 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a06      	ldr	r2, [pc, #24]	; (8007a48 <SDMMC_GetCmdResp3+0x7c>)
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	24000000 	.word	0x24000000
 8007a44:	10624dd3 	.word	0x10624dd3
 8007a48:	002000c5 	.word	0x002000c5

08007a4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	460b      	mov	r3, r1
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007a5a:	4b35      	ldr	r3, [pc, #212]	; (8007b30 <SDMMC_GetCmdResp6+0xe4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a35      	ldr	r2, [pc, #212]	; (8007b34 <SDMMC_GetCmdResp6+0xe8>)
 8007a60:	fba2 2303 	umull	r2, r3, r2, r3
 8007a64:	0a5b      	lsrs	r3, r3, #9
 8007a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6a:	fb02 f303 	mul.w	r3, r2, r3
 8007a6e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	1e5a      	subs	r2, r3, #1
 8007a74:	61fa      	str	r2, [r7, #28]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d102      	bne.n	8007a80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a7e:	e052      	b.n	8007b26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a84:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0ef      	beq.n	8007a70 <SDMMC_GetCmdResp6+0x24>
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1ea      	bne.n	8007a70 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d004      	beq.n	8007ab0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aac:	2304      	movs	r3, #4
 8007aae:	e03a      	b.n	8007b26 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e02f      	b.n	8007b26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff fbe6 	bl	8007298 <SDMMC_GetCommandResponse>
 8007acc:	4603      	mov	r3, r0
 8007ace:	461a      	mov	r2, r3
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d001      	beq.n	8007ada <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e025      	b.n	8007b26 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <SDMMC_GetCmdResp6+0xec>)
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fbe5 	bl	80072b2 <SDMMC_GetResponse>
 8007ae8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d106      	bne.n	8007b02 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	0c1b      	lsrs	r3, r3, #16
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	e011      	b.n	8007b26 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b10:	e009      	b.n	8007b26 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b20:	e001      	b.n	8007b26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	24000000 	.word	0x24000000
 8007b34:	10624dd3 	.word	0x10624dd3
 8007b38:	002000c5 	.word	0x002000c5

08007b3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007b44:	4b22      	ldr	r3, [pc, #136]	; (8007bd0 <SDMMC_GetCmdResp7+0x94>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a22      	ldr	r2, [pc, #136]	; (8007bd4 <SDMMC_GetCmdResp7+0x98>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	0a5b      	lsrs	r3, r3, #9
 8007b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b54:	fb02 f303 	mul.w	r3, r2, r3
 8007b58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1e5a      	subs	r2, r3, #1
 8007b5e:	60fa      	str	r2, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b68:	e02c      	b.n	8007bc4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0ef      	beq.n	8007b5a <SDMMC_GetCmdResp7+0x1e>
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1ea      	bne.n	8007b5a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d004      	beq.n	8007b9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2204      	movs	r2, #4
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b96:	2304      	movs	r3, #4
 8007b98:	e014      	b.n	8007bc4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d004      	beq.n	8007bb0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e009      	b.n	8007bc4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2240      	movs	r2, #64	; 0x40
 8007bc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007bc2:	2300      	movs	r3, #0

}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	24000000 	.word	0x24000000
 8007bd4:	10624dd3 	.word	0x10624dd3

08007bd8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007be0:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <SDMMC_GetCmdError+0x50>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a11      	ldr	r2, [pc, #68]	; (8007c2c <SDMMC_GetCmdError+0x54>)
 8007be6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bea:	0a5b      	lsrs	r3, r3, #9
 8007bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf0:	fb02 f303 	mul.w	r3, r2, r3
 8007bf4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	1e5a      	subs	r2, r3, #1
 8007bfa:	60fa      	str	r2, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c04:	e009      	b.n	8007c1a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0f1      	beq.n	8007bf6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a06      	ldr	r2, [pc, #24]	; (8007c30 <SDMMC_GetCmdError+0x58>)
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	24000000 	.word	0x24000000
 8007c2c:	10624dd3 	.word	0x10624dd3
 8007c30:	002000c5 	.word	0x002000c5

08007c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c34:	b084      	sub	sp, #16
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	f107 001c 	add.w	r0, r7, #28
 8007c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d120      	bne.n	8007c8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	4b2a      	ldr	r3, [pc, #168]	; (8007d08 <USB_CoreInit+0xd4>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fb14 	bl	80092b0 <USB_CoreReset>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
 8007c8c:	e01a      	b.n	8007cc4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fb08 	bl	80092b0 <USB_CoreReset>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8007cb6:	e005      	b.n	8007cc4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d116      	bne.n	8007cf8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <USB_CoreInit+0xd8>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f043 0206 	orr.w	r2, r3, #6
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f043 0220 	orr.w	r2, r3, #32
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d04:	b004      	add	sp, #16
 8007d06:	4770      	bx	lr
 8007d08:	ffbdffbf 	.word	0xffbdffbf
 8007d0c:	03ee0000 	.word	0x03ee0000

08007d10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d165      	bne.n	8007df0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4a41      	ldr	r2, [pc, #260]	; (8007e2c <USB_SetTurnaroundTime+0x11c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d906      	bls.n	8007d3a <USB_SetTurnaroundTime+0x2a>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4a40      	ldr	r2, [pc, #256]	; (8007e30 <USB_SetTurnaroundTime+0x120>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d202      	bcs.n	8007d3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d34:	230f      	movs	r3, #15
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	e062      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4a3c      	ldr	r2, [pc, #240]	; (8007e30 <USB_SetTurnaroundTime+0x120>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d306      	bcc.n	8007d50 <USB_SetTurnaroundTime+0x40>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4a3b      	ldr	r2, [pc, #236]	; (8007e34 <USB_SetTurnaroundTime+0x124>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d202      	bcs.n	8007d50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d4a:	230e      	movs	r3, #14
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e057      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4a38      	ldr	r2, [pc, #224]	; (8007e34 <USB_SetTurnaroundTime+0x124>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d306      	bcc.n	8007d66 <USB_SetTurnaroundTime+0x56>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4a37      	ldr	r2, [pc, #220]	; (8007e38 <USB_SetTurnaroundTime+0x128>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d202      	bcs.n	8007d66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d60:	230d      	movs	r3, #13
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	e04c      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4a33      	ldr	r2, [pc, #204]	; (8007e38 <USB_SetTurnaroundTime+0x128>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d306      	bcc.n	8007d7c <USB_SetTurnaroundTime+0x6c>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	4a32      	ldr	r2, [pc, #200]	; (8007e3c <USB_SetTurnaroundTime+0x12c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d802      	bhi.n	8007d7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d76:	230c      	movs	r3, #12
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e041      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4a2f      	ldr	r2, [pc, #188]	; (8007e3c <USB_SetTurnaroundTime+0x12c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d906      	bls.n	8007d92 <USB_SetTurnaroundTime+0x82>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4a2e      	ldr	r2, [pc, #184]	; (8007e40 <USB_SetTurnaroundTime+0x130>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d802      	bhi.n	8007d92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d8c:	230b      	movs	r3, #11
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e036      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <USB_SetTurnaroundTime+0x130>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d906      	bls.n	8007da8 <USB_SetTurnaroundTime+0x98>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4a29      	ldr	r2, [pc, #164]	; (8007e44 <USB_SetTurnaroundTime+0x134>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d802      	bhi.n	8007da8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007da2:	230a      	movs	r3, #10
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	e02b      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4a26      	ldr	r2, [pc, #152]	; (8007e44 <USB_SetTurnaroundTime+0x134>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d906      	bls.n	8007dbe <USB_SetTurnaroundTime+0xae>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4a25      	ldr	r2, [pc, #148]	; (8007e48 <USB_SetTurnaroundTime+0x138>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d202      	bcs.n	8007dbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007db8:	2309      	movs	r3, #9
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e020      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	4a21      	ldr	r2, [pc, #132]	; (8007e48 <USB_SetTurnaroundTime+0x138>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d306      	bcc.n	8007dd4 <USB_SetTurnaroundTime+0xc4>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	4a20      	ldr	r2, [pc, #128]	; (8007e4c <USB_SetTurnaroundTime+0x13c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d802      	bhi.n	8007dd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007dce:	2308      	movs	r3, #8
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	e015      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4a1d      	ldr	r2, [pc, #116]	; (8007e4c <USB_SetTurnaroundTime+0x13c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d906      	bls.n	8007dea <USB_SetTurnaroundTime+0xda>
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4a1c      	ldr	r2, [pc, #112]	; (8007e50 <USB_SetTurnaroundTime+0x140>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d202      	bcs.n	8007dea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007de4:	2307      	movs	r3, #7
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e00a      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007dea:	2306      	movs	r3, #6
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	e007      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007df6:	2309      	movs	r3, #9
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	e001      	b.n	8007e00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007dfc:	2309      	movs	r3, #9
 8007dfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	029b      	lsls	r3, r3, #10
 8007e14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	371c      	adds	r7, #28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	00d8acbf 	.word	0x00d8acbf
 8007e30:	00e4e1c0 	.word	0x00e4e1c0
 8007e34:	00f42400 	.word	0x00f42400
 8007e38:	01067380 	.word	0x01067380
 8007e3c:	011a499f 	.word	0x011a499f
 8007e40:	01312cff 	.word	0x01312cff
 8007e44:	014ca43f 	.word	0x014ca43f
 8007e48:	016e3600 	.word	0x016e3600
 8007e4c:	01a6ab1f 	.word	0x01a6ab1f
 8007e50:	01e84800 	.word	0x01e84800

08007e54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f043 0201 	orr.w	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f023 0201 	bic.w	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d106      	bne.n	8007ec4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60da      	str	r2, [r3, #12]
 8007ec2:	e00b      	b.n	8007edc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60da      	str	r2, [r3, #12]
 8007ed6:	e001      	b.n	8007edc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e003      	b.n	8007ee4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007edc:	2032      	movs	r0, #50	; 0x32
 8007ede:	f7f8 fe89 	bl	8000bf4 <HAL_Delay>

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eec:	b084      	sub	sp, #16
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b086      	sub	sp, #24
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f06:	2300      	movs	r3, #0
 8007f08:	613b      	str	r3, [r7, #16]
 8007f0a:	e009      	b.n	8007f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	3340      	adds	r3, #64	; 0x40
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	2200      	movs	r2, #0
 8007f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	2b0e      	cmp	r3, #14
 8007f24:	d9f2      	bls.n	8007f0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d11c      	bne.n	8007f66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f3a:	f043 0302 	orr.w	r3, r3, #2
 8007f3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e005      	b.n	8007f72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f78:	461a      	mov	r2, r3
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f84:	4619      	mov	r1, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	680b      	ldr	r3, [r1, #0]
 8007f90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d10c      	bne.n	8007fb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d104      	bne.n	8007fa8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f949 	bl	8008238 <USB_SetDevSpeed>
 8007fa6:	e008      	b.n	8007fba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007fa8:	2101      	movs	r1, #1
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f944 	bl	8008238 <USB_SetDevSpeed>
 8007fb0:	e003      	b.n	8007fba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fb2:	2103      	movs	r1, #3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f93f 	bl	8008238 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fba:	2110      	movs	r1, #16
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f8f3 	bl	80081a8 <USB_FlushTxFifo>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f911 	bl	80081f4 <USB_FlushRxFifo>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fee:	461a      	mov	r2, r3
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008000:	2300      	movs	r3, #0
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	e043      	b.n	800808e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800801c:	d118      	bne.n	8008050 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	461a      	mov	r2, r3
 8008032:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	e013      	b.n	8008062 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008046:	461a      	mov	r2, r3
 8008048:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	e008      	b.n	8008062 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	461a      	mov	r2, r3
 800805e:	2300      	movs	r3, #0
 8008060:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806e:	461a      	mov	r2, r3
 8008070:	2300      	movs	r3, #0
 8008072:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008080:	461a      	mov	r2, r3
 8008082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008086:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	3301      	adds	r3, #1
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	429a      	cmp	r2, r3
 8008094:	d3b7      	bcc.n	8008006 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]
 800809a:	e043      	b.n	8008124 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080b2:	d118      	bne.n	80080e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c6:	461a      	mov	r2, r3
 80080c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	e013      	b.n	80080f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080dc:	461a      	mov	r2, r3
 80080de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	e008      	b.n	80080f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f2:	461a      	mov	r2, r3
 80080f4:	2300      	movs	r3, #0
 80080f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008104:	461a      	mov	r2, r3
 8008106:	2300      	movs	r3, #0
 8008108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008116:	461a      	mov	r2, r3
 8008118:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800811c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	3301      	adds	r3, #1
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	429a      	cmp	r2, r3
 800812a:	d3b7      	bcc.n	800809c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800813a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800813e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800814c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	2b00      	cmp	r3, #0
 8008152:	d105      	bne.n	8008160 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f043 0210 	orr.w	r2, r3, #16
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	699a      	ldr	r2, [r3, #24]
 8008164:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <USB_DevInit+0x2b4>)
 8008166:	4313      	orrs	r3, r2
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800816c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d005      	beq.n	800817e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f043 0208 	orr.w	r2, r3, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800817e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008180:	2b01      	cmp	r3, #1
 8008182:	d105      	bne.n	8008190 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699a      	ldr	r2, [r3, #24]
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <USB_DevInit+0x2b8>)
 800818a:	4313      	orrs	r3, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800819c:	b004      	add	sp, #16
 800819e:	4770      	bx	lr
 80081a0:	803c3800 	.word	0x803c3800
 80081a4:	40000004 	.word	0x40000004

080081a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	019b      	lsls	r3, r3, #6
 80081ba:	f043 0220 	orr.w	r2, r3, #32
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <USB_FlushTxFifo+0x48>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d901      	bls.n	80081d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e006      	b.n	80081e2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d0f0      	beq.n	80081c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	00030d40 	.word	0x00030d40

080081f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2210      	movs	r2, #16
 8008204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4a09      	ldr	r2, [pc, #36]	; (8008234 <USB_FlushRxFifo+0x40>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d901      	bls.n	8008218 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e006      	b.n	8008226 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 0310 	and.w	r3, r3, #16
 8008220:	2b10      	cmp	r3, #16
 8008222:	d0f0      	beq.n	8008206 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	00030d40 	.word	0x00030d40

08008238 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	68f9      	ldr	r1, [r7, #12]
 8008254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008258:	4313      	orrs	r3, r2
 800825a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800826a:	b480      	push	{r7}
 800826c:	b087      	sub	sp, #28
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 0306 	and.w	r3, r3, #6
 8008282:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]
 800828e:	e00a      	b.n	80082a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d002      	beq.n	800829c <USB_GetDevSpeed+0x32>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b06      	cmp	r3, #6
 800829a:	d102      	bne.n	80082a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800829c:	2302      	movs	r3, #2
 800829e:	75fb      	strb	r3, [r7, #23]
 80082a0:	e001      	b.n	80082a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80082a2:	230f      	movs	r3, #15
 80082a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	785b      	ldrb	r3, [r3, #1]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d139      	bne.n	8008344 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	2101      	movs	r1, #1
 80082e2:	fa01 f303 	lsl.w	r3, r1, r3
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	68f9      	ldr	r1, [r7, #12]
 80082ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ee:	4313      	orrs	r3, r2
 80082f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d153      	bne.n	80083b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	78db      	ldrb	r3, [r3, #3]
 8008322:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008324:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	059b      	lsls	r3, r3, #22
 800832a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800832c:	431a      	orrs	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	0159      	lsls	r1, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	440b      	add	r3, r1
 8008336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833a:	4619      	mov	r1, r3
 800833c:	4b20      	ldr	r3, [pc, #128]	; (80083c0 <USB_ActivateEndpoint+0x10c>)
 800833e:	4313      	orrs	r3, r2
 8008340:	600b      	str	r3, [r1, #0]
 8008342:	e035      	b.n	80083b0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834a:	69da      	ldr	r2, [r3, #28]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	2101      	movs	r1, #1
 8008356:	fa01 f303 	lsl.w	r3, r1, r3
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	68f9      	ldr	r1, [r7, #12]
 800835e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008362:	4313      	orrs	r3, r2
 8008364:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d119      	bne.n	80083b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	78db      	ldrb	r3, [r3, #3]
 8008396:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008398:	430b      	orrs	r3, r1
 800839a:	431a      	orrs	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	0159      	lsls	r1, r3, #5
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	440b      	add	r3, r1
 80083a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a8:	4619      	mov	r1, r3
 80083aa:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <USB_ActivateEndpoint+0x10c>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	10008000 	.word	0x10008000

080083c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d161      	bne.n	80084a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f6:	d11f      	bne.n	8008438 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	440a      	add	r2, r1
 800840e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008416:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	440a      	add	r2, r1
 800842e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	2101      	movs	r1, #1
 800844a:	fa01 f303 	lsl.w	r3, r1, r3
 800844e:	b29b      	uxth	r3, r3
 8008450:	43db      	mvns	r3, r3
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008458:	4013      	ands	r3, r2
 800845a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	69da      	ldr	r2, [r3, #28]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	2101      	movs	r1, #1
 800846e:	fa01 f303 	lsl.w	r3, r1, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	43db      	mvns	r3, r3
 8008476:	68f9      	ldr	r1, [r7, #12]
 8008478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800847c:	4013      	ands	r3, r2
 800847e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	0159      	lsls	r1, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	440b      	add	r3, r1
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	4619      	mov	r1, r3
 800849c:	4b35      	ldr	r3, [pc, #212]	; (8008574 <USB_DeactivateEndpoint+0x1b0>)
 800849e:	4013      	ands	r3, r2
 80084a0:	600b      	str	r3, [r1, #0]
 80084a2:	e060      	b.n	8008566 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ba:	d11f      	bne.n	80084fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	0151      	lsls	r1, r2, #5
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	440a      	add	r2, r1
 80084f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	2101      	movs	r1, #1
 800850e:	fa01 f303 	lsl.w	r3, r1, r3
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	43db      	mvns	r3, r3
 8008516:	68f9      	ldr	r1, [r7, #12]
 8008518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800851c:	4013      	ands	r3, r2
 800851e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008526:	69da      	ldr	r2, [r3, #28]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	2101      	movs	r1, #1
 8008532:	fa01 f303 	lsl.w	r3, r1, r3
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	43db      	mvns	r3, r3
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008540:	4013      	ands	r3, r2
 8008542:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	0159      	lsls	r1, r3, #5
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	440b      	add	r3, r1
 800855a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855e:	4619      	mov	r1, r3
 8008560:	4b05      	ldr	r3, [pc, #20]	; (8008578 <USB_DeactivateEndpoint+0x1b4>)
 8008562:	4013      	ands	r3, r2
 8008564:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	ec337800 	.word	0xec337800
 8008578:	eff37800 	.word	0xeff37800

0800857c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af02      	add	r7, sp, #8
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b01      	cmp	r3, #1
 800859a:	f040 8163 	bne.w	8008864 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d132      	bne.n	800860c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	0159      	lsls	r1, r3, #5
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	440b      	add	r3, r1
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	4619      	mov	r1, r3
 80085c2:	4ba5      	ldr	r3, [pc, #660]	; (8008858 <USB_EPStartXfer+0x2dc>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	0159      	lsls	r1, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	440b      	add	r3, r1
 80085fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008602:	4619      	mov	r1, r3
 8008604:	4b95      	ldr	r3, [pc, #596]	; (800885c <USB_EPStartXfer+0x2e0>)
 8008606:	4013      	ands	r3, r2
 8008608:	610b      	str	r3, [r1, #16]
 800860a:	e074      	b.n	80086f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008618:	691a      	ldr	r2, [r3, #16]
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	0159      	lsls	r1, r3, #5
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	440b      	add	r3, r1
 8008622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008626:	4619      	mov	r1, r3
 8008628:	4b8c      	ldr	r3, [pc, #560]	; (800885c <USB_EPStartXfer+0x2e0>)
 800862a:	4013      	ands	r3, r2
 800862c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	0159      	lsls	r1, r3, #5
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	440b      	add	r3, r1
 8008644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008648:	4619      	mov	r1, r3
 800864a:	4b83      	ldr	r3, [pc, #524]	; (8008858 <USB_EPStartXfer+0x2dc>)
 800864c:	4013      	ands	r3, r2
 800864e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6959      	ldr	r1, [r3, #20]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	440b      	add	r3, r1
 8008668:	1e59      	subs	r1, r3, #1
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008672:	04d9      	lsls	r1, r3, #19
 8008674:	4b7a      	ldr	r3, [pc, #488]	; (8008860 <USB_EPStartXfer+0x2e4>)
 8008676:	400b      	ands	r3, r1
 8008678:	69b9      	ldr	r1, [r7, #24]
 800867a:	0148      	lsls	r0, r1, #5
 800867c:	69f9      	ldr	r1, [r7, #28]
 800867e:	4401      	add	r1, r0
 8008680:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008684:	4313      	orrs	r3, r2
 8008686:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008694:	691a      	ldr	r2, [r3, #16]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800869e:	69b9      	ldr	r1, [r7, #24]
 80086a0:	0148      	lsls	r0, r1, #5
 80086a2:	69f9      	ldr	r1, [r7, #28]
 80086a4:	4401      	add	r1, r0
 80086a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086aa:	4313      	orrs	r3, r2
 80086ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	78db      	ldrb	r3, [r3, #3]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d11f      	bne.n	80086f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	0151      	lsls	r1, r2, #5
 80086c8:	69fa      	ldr	r2, [r7, #28]
 80086ca:	440a      	add	r2, r1
 80086cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80086d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	0151      	lsls	r1, r2, #5
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	440a      	add	r2, r1
 80086ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d14b      	bne.n	8008794 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d009      	beq.n	8008718 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008710:	461a      	mov	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	78db      	ldrb	r3, [r3, #3]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d128      	bne.n	8008772 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872c:	2b00      	cmp	r3, #0
 800872e:	d110      	bne.n	8008752 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	0151      	lsls	r1, r2, #5
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	440a      	add	r2, r1
 8008746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800874a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	e00f      	b.n	8008772 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	4413      	add	r3, r2
 800875a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	440a      	add	r2, r1
 8008768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008770:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	440a      	add	r2, r1
 8008788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	e133      	b.n	80089fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	0151      	lsls	r1, r2, #5
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	440a      	add	r2, r1
 80087aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	78db      	ldrb	r3, [r3, #3]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d015      	beq.n	80087e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 811b 	beq.w	80089fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 030f 	and.w	r3, r3, #15
 80087d6:	2101      	movs	r1, #1
 80087d8:	fa01 f303 	lsl.w	r3, r1, r3
 80087dc:	69f9      	ldr	r1, [r7, #28]
 80087de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e2:	4313      	orrs	r3, r2
 80087e4:	634b      	str	r3, [r1, #52]	; 0x34
 80087e6:	e109      	b.n	80089fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d110      	bne.n	800881a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	440a      	add	r2, r1
 800880e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e00f      	b.n	800883a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	440a      	add	r2, r1
 8008830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008838:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	68d9      	ldr	r1, [r3, #12]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	b298      	uxth	r0, r3
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4603      	mov	r3, r0
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fa38 	bl	8008cc4 <USB_WritePacket>
 8008854:	e0d2      	b.n	80089fc <USB_EPStartXfer+0x480>
 8008856:	bf00      	nop
 8008858:	e007ffff 	.word	0xe007ffff
 800885c:	fff80000 	.word	0xfff80000
 8008860:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	0159      	lsls	r1, r3, #5
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	440b      	add	r3, r1
 800887a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887e:	4619      	mov	r1, r3
 8008880:	4b61      	ldr	r3, [pc, #388]	; (8008a08 <USB_EPStartXfer+0x48c>)
 8008882:	4013      	ands	r3, r2
 8008884:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008892:	691a      	ldr	r2, [r3, #16]
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	0159      	lsls	r1, r3, #5
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	440b      	add	r3, r1
 800889c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a0:	4619      	mov	r1, r3
 80088a2:	4b5a      	ldr	r3, [pc, #360]	; (8008a0c <USB_EPStartXfer+0x490>)
 80088a4:	4013      	ands	r3, r2
 80088a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d123      	bne.n	80088f8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088bc:	691a      	ldr	r2, [r3, #16]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088c6:	69b9      	ldr	r1, [r7, #24]
 80088c8:	0148      	lsls	r0, r1, #5
 80088ca:	69f9      	ldr	r1, [r7, #28]
 80088cc:	4401      	add	r1, r0
 80088ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088d2:	4313      	orrs	r3, r2
 80088d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088f4:	6113      	str	r3, [r2, #16]
 80088f6:	e033      	b.n	8008960 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	695a      	ldr	r2, [r3, #20]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	4413      	add	r3, r2
 8008902:	1e5a      	subs	r2, r3, #1
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	fbb2 f3f3 	udiv	r3, r2, r3
 800890c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	8afb      	ldrh	r3, [r7, #22]
 800891e:	04d9      	lsls	r1, r3, #19
 8008920:	4b3b      	ldr	r3, [pc, #236]	; (8008a10 <USB_EPStartXfer+0x494>)
 8008922:	400b      	ands	r3, r1
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	0148      	lsls	r0, r1, #5
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	4401      	add	r1, r0
 800892c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008930:	4313      	orrs	r3, r2
 8008932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	691a      	ldr	r2, [r3, #16]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	8af9      	ldrh	r1, [r7, #22]
 8008948:	fb01 f303 	mul.w	r3, r1, r3
 800894c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	0148      	lsls	r0, r1, #5
 8008954:	69f9      	ldr	r1, [r7, #28]
 8008956:	4401      	add	r1, r0
 8008958:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800895c:	4313      	orrs	r3, r2
 800895e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10d      	bne.n	8008982 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d009      	beq.n	8008982 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	68d9      	ldr	r1, [r3, #12]
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897e:	460a      	mov	r2, r1
 8008980:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d128      	bne.n	80089dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008996:	2b00      	cmp	r3, #0
 8008998:	d110      	bne.n	80089bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	e00f      	b.n	80089dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	69fa      	ldr	r2, [r7, #28]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3720      	adds	r7, #32
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	fff80000 	.word	0xfff80000
 8008a0c:	e007ffff 	.word	0xe007ffff
 8008a10:	1ff80000 	.word	0x1ff80000

08008a14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	785b      	ldrb	r3, [r3, #1]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	f040 80cd 	bne.w	8008bd0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d132      	bne.n	8008aa4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4a:	691a      	ldr	r2, [r3, #16]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	0159      	lsls	r1, r3, #5
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	440b      	add	r3, r1
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4b98      	ldr	r3, [pc, #608]	; (8008cbc <USB_EP0StartXfer+0x2a8>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	0151      	lsls	r1, r2, #5
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	440a      	add	r2, r1
 8008a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	0159      	lsls	r1, r3, #5
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	440b      	add	r3, r1
 8008a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4b88      	ldr	r3, [pc, #544]	; (8008cc0 <USB_EP0StartXfer+0x2ac>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	610b      	str	r3, [r1, #16]
 8008aa2:	e04e      	b.n	8008b42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab0:	691a      	ldr	r2, [r3, #16]
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	0159      	lsls	r1, r3, #5
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	440b      	add	r3, r1
 8008aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4b7f      	ldr	r3, [pc, #508]	; (8008cc0 <USB_EP0StartXfer+0x2ac>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad2:	691a      	ldr	r2, [r3, #16]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	0159      	lsls	r1, r3, #5
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	440b      	add	r3, r1
 8008adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4b76      	ldr	r3, [pc, #472]	; (8008cbc <USB_EP0StartXfer+0x2a8>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	695a      	ldr	r2, [r3, #20]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d903      	bls.n	8008afc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	0151      	lsls	r1, r2, #5
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	440a      	add	r2, r1
 8008b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b32:	6939      	ldr	r1, [r7, #16]
 8008b34:	0148      	lsls	r0, r1, #5
 8008b36:	6979      	ldr	r1, [r7, #20]
 8008b38:	4401      	add	r1, r0
 8008b3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d11e      	bne.n	8008b86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d009      	beq.n	8008b64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	0151      	lsls	r1, r2, #5
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	440a      	add	r2, r1
 8008b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	e092      	b.n	8008cac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	0151      	lsls	r1, r2, #5
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	440a      	add	r2, r1
 8008b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ba4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d07e      	beq.n	8008cac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 030f 	and.w	r3, r3, #15
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc4:	6979      	ldr	r1, [r7, #20]
 8008bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	634b      	str	r3, [r1, #52]	; 0x34
 8008bce:	e06d      	b.n	8008cac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bdc:	691a      	ldr	r2, [r3, #16]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	0159      	lsls	r1, r3, #5
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	440b      	add	r3, r1
 8008be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bea:	4619      	mov	r1, r3
 8008bec:	4b34      	ldr	r3, [pc, #208]	; (8008cc0 <USB_EP0StartXfer+0x2ac>)
 8008bee:	4013      	ands	r3, r2
 8008bf0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	0159      	lsls	r1, r3, #5
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	440b      	add	r3, r1
 8008c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4b2b      	ldr	r3, [pc, #172]	; (8008cbc <USB_EP0StartXfer+0x2a8>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	0151      	lsls	r1, r2, #5
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	440a      	add	r2, r1
 8008c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c50:	691a      	ldr	r2, [r3, #16]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c5a:	6939      	ldr	r1, [r7, #16]
 8008c5c:	0148      	lsls	r0, r1, #5
 8008c5e:	6979      	ldr	r1, [r7, #20]
 8008c60:	4401      	add	r1, r0
 8008c62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c66:	4313      	orrs	r3, r2
 8008c68:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d10d      	bne.n	8008c8c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d009      	beq.n	8008c8c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	68d9      	ldr	r1, [r3, #12]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c88:	460a      	mov	r2, r1
 8008c8a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	0151      	lsls	r1, r2, #5
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008caa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	e007ffff 	.word	0xe007ffff
 8008cc0:	fff80000 	.word	0xfff80000

08008cc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b089      	sub	sp, #36	; 0x24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4611      	mov	r1, r2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	71fb      	strb	r3, [r7, #7]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d123      	bne.n	8008d32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cea:	88bb      	ldrh	r3, [r7, #4]
 8008cec:	3303      	adds	r3, #3
 8008cee:	089b      	lsrs	r3, r3, #2
 8008cf0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61bb      	str	r3, [r7, #24]
 8008cf6:	e018      	b.n	8008d2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	031a      	lsls	r2, r3, #12
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d04:	461a      	mov	r2, r3
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	3301      	adds	r3, #1
 8008d16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	3301      	adds	r3, #1
 8008d22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	3301      	adds	r3, #1
 8008d28:	61bb      	str	r3, [r7, #24]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d3e2      	bcc.n	8008cf8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3724      	adds	r7, #36	; 0x24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b08b      	sub	sp, #44	; 0x2c
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	089b      	lsrs	r3, r3, #2
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d66:	2300      	movs	r3, #0
 8008d68:	623b      	str	r3, [r7, #32]
 8008d6a:	e014      	b.n	8008d96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	3301      	adds	r3, #1
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	3301      	adds	r3, #1
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	3301      	adds	r3, #1
 8008d94:	623b      	str	r3, [r7, #32]
 8008d96:	6a3a      	ldr	r2, [r7, #32]
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d3e6      	bcc.n	8008d6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d9e:	8bfb      	ldrh	r3, [r7, #30]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01e      	beq.n	8008de2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dae:	461a      	mov	r2, r3
 8008db0:	f107 0310 	add.w	r3, r7, #16
 8008db4:	6812      	ldr	r2, [r2, #0]
 8008db6:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	701a      	strb	r2, [r3, #0]
      i++;
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	623b      	str	r3, [r7, #32]
      pDest++;
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008dd6:	8bfb      	ldrh	r3, [r7, #30]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ddc:	8bfb      	ldrh	r3, [r7, #30]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1ea      	bne.n	8008db8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	372c      	adds	r7, #44	; 0x2c
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d12c      	bne.n	8008e66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	db12      	blt.n	8008e44 <USB_EPSetStall+0x54>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00f      	beq.n	8008e44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	e02b      	b.n	8008ebe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	db12      	blt.n	8008e9e <USB_EPSetStall+0xae>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00f      	beq.n	8008e9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	0151      	lsls	r1, r2, #5
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	440a      	add	r2, r1
 8008e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ebc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d128      	bne.n	8008f3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	78db      	ldrb	r3, [r3, #3]
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d003      	beq.n	8008f18 <USB_EPClearStall+0x4c>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	78db      	ldrb	r3, [r3, #3]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d138      	bne.n	8008f8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	e027      	b.n	8008f8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	78db      	ldrb	r3, [r3, #3]
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d003      	beq.n	8008f6a <USB_EPClearStall+0x9e>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	78db      	ldrb	r3, [r3, #3]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d10f      	bne.n	8008f8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008fba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008fcc:	68f9      	ldr	r1, [r7, #12]
 8008fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009012:	f023 0302 	bic.w	r3, r3, #2
 8009016:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009054:	f043 0302 	orr.w	r3, r3, #2
 8009058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4013      	ands	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009080:	68fb      	ldr	r3, [r7, #12]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800908e:	b480      	push	{r7}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	4013      	ands	r3, r2
 80090b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	0c1b      	lsrs	r3, r3, #16
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	4013      	ands	r3, r2
 80090e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	b29b      	uxth	r3, r3
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	4013      	ands	r3, r2
 8009122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009124:	68bb      	ldr	r3, [r7, #8]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009132:	b480      	push	{r7}
 8009134:	b087      	sub	sp, #28
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	460b      	mov	r3, r1
 800913c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009154:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	fa22 f303 	lsr.w	r3, r2, r3
 8009162:	01db      	lsls	r3, r3, #7
 8009164:	b2db      	uxtb	r3, r3
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	4313      	orrs	r3, r2
 800916a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4013      	ands	r3, r2
 800917e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009180:	68bb      	ldr	r3, [r7, #8]
}
 8009182:	4618      	mov	r0, r3
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	f003 0301 	and.w	r3, r3, #1
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c6:	4619      	mov	r1, r3
 80091c8:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <USB_ActivateSetup+0x44>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	fffff800 	.word	0xfffff800

080091f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	460b      	mov	r3, r1
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	333c      	adds	r3, #60	; 0x3c
 800920a:	3304      	adds	r3, #4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	4a26      	ldr	r2, [pc, #152]	; (80092ac <USB_EP0_OutStart+0xb8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d90a      	bls.n	800922e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009228:	d101      	bne.n	800922e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	e037      	b.n	800929e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009234:	461a      	mov	r2, r3
 8009236:	2300      	movs	r3, #0
 8009238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800924c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800925c:	f043 0318 	orr.w	r3, r3, #24
 8009260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009270:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009274:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009276:	7afb      	ldrb	r3, [r7, #11]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d10f      	bne.n	800929c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	461a      	mov	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009296:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800929a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	4f54300a 	.word	0x4f54300a

080092b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4a13      	ldr	r2, [pc, #76]	; (8009314 <USB_CoreReset+0x64>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d901      	bls.n	80092ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e01b      	b.n	8009306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	daf2      	bge.n	80092bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	f043 0201 	orr.w	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4a09      	ldr	r2, [pc, #36]	; (8009314 <USB_CoreReset+0x64>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d901      	bls.n	80092f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e006      	b.n	8009306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0301 	and.w	r3, r3, #1
 8009300:	2b01      	cmp	r3, #1
 8009302:	d0f0      	beq.n	80092e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	00030d40 	.word	0x00030d40

08009318 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8009324:	f241 0074 	movw	r0, #4212	; 0x1074
 8009328:	f003 fd1a 	bl	800cd60 <USBD_static_malloc>
 800932c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d105      	bne.n	8009340 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800933c:	2302      	movs	r3, #2
 800933e:	e034      	b.n	80093aa <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	7c1b      	ldrb	r3, [r3, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d115      	bne.n	800937c <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009354:	2202      	movs	r2, #2
 8009356:	2101      	movs	r1, #1
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f003 fbbe 	bl	800cada <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800936a:	2202      	movs	r2, #2
 800936c:	2181      	movs	r1, #129	; 0x81
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f003 fbb3 	bl	800cada <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	871a      	strh	r2, [r3, #56]	; 0x38
 800937a:	e012      	b.n	80093a2 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	2202      	movs	r2, #2
 8009380:	2101      	movs	r1, #1
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f003 fba9 	bl	800cada <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	2202      	movs	r2, #2
 8009394:	2181      	movs	r1, #129	; 0x81
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f003 fb9f 	bl	800cada <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f999 	bl	80096da <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b082      	sub	sp, #8
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80093be:	2101      	movs	r1, #1
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f003 fbb0 	bl	800cb26 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80093ce:	2181      	movs	r1, #129	; 0x81
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f003 fba8 	bl	800cb26 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00c      	beq.n	8009400 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f9dc 	bl	80097a4 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093f2:	4618      	mov	r0, r3
 80093f4:	f003 fcc2 	bl	800cd7c <USBD_static_free>
    pdev->pClassData = NULL;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800941c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800942c:	2303      	movs	r3, #3
 800942e:	e0db      	b.n	80095e8 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009438:	2b00      	cmp	r3, #0
 800943a:	d04e      	beq.n	80094da <USBD_MSC_Setup+0xce>
 800943c:	2b20      	cmp	r3, #32
 800943e:	f040 80cb 	bne.w	80095d8 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	785b      	ldrb	r3, [r3, #1]
 8009446:	2bfe      	cmp	r3, #254	; 0xfe
 8009448:	d002      	beq.n	8009450 <USBD_MSC_Setup+0x44>
 800944a:	2bff      	cmp	r3, #255	; 0xff
 800944c:	d025      	beq.n	800949a <USBD_MSC_Setup+0x8e>
 800944e:	e03c      	b.n	80094ca <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	885b      	ldrh	r3, [r3, #2]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d119      	bne.n	800948c <USBD_MSC_Setup+0x80>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	88db      	ldrh	r3, [r3, #6]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d115      	bne.n	800948c <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009466:	2b00      	cmp	r3, #0
 8009468:	da10      	bge.n	800948c <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	4798      	blx	r3
 8009474:	4603      	mov	r3, r0
 8009476:	461a      	mov	r2, r3
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	2201      	movs	r2, #1
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f002 ff51 	bl	800c32a <USBD_CtlSendData>
 8009488:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800948a:	e025      	b.n	80094d8 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f002 feda 	bl	800c248 <USBD_CtlError>
            ret = USBD_FAIL;
 8009494:	2303      	movs	r3, #3
 8009496:	75fb      	strb	r3, [r7, #23]
          break;
 8009498:	e01e      	b.n	80094d8 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	885b      	ldrh	r3, [r3, #2]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10c      	bne.n	80094bc <USBD_MSC_Setup+0xb0>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	88db      	ldrh	r3, [r3, #6]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d108      	bne.n	80094bc <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	db03      	blt.n	80094bc <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f94e 	bl	8009756 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094ba:	e00d      	b.n	80094d8 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f002 fec2 	bl	800c248 <USBD_CtlError>
            ret = USBD_FAIL;
 80094c4:	2303      	movs	r3, #3
 80094c6:	75fb      	strb	r3, [r7, #23]
          break;
 80094c8:	e006      	b.n	80094d8 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f002 febb 	bl	800c248 <USBD_CtlError>
          ret = USBD_FAIL;
 80094d2:	2303      	movs	r3, #3
 80094d4:	75fb      	strb	r3, [r7, #23]
          break;
 80094d6:	bf00      	nop
      }
      break;
 80094d8:	e085      	b.n	80095e6 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b0b      	cmp	r3, #11
 80094e0:	d871      	bhi.n	80095c6 <USBD_MSC_Setup+0x1ba>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <USBD_MSC_Setup+0xdc>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	08009519 	.word	0x08009519
 80094ec:	08009595 	.word	0x08009595
 80094f0:	080095c7 	.word	0x080095c7
 80094f4:	080095c7 	.word	0x080095c7
 80094f8:	080095c7 	.word	0x080095c7
 80094fc:	080095c7 	.word	0x080095c7
 8009500:	080095c7 	.word	0x080095c7
 8009504:	080095c7 	.word	0x080095c7
 8009508:	080095c7 	.word	0x080095c7
 800950c:	080095c7 	.word	0x080095c7
 8009510:	08009543 	.word	0x08009543
 8009514:	0800956d 	.word	0x0800956d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b03      	cmp	r3, #3
 8009522:	d107      	bne.n	8009534 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009524:	f107 030e 	add.w	r3, r7, #14
 8009528:	2202      	movs	r2, #2
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f002 fefc 	bl	800c32a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009532:	e050      	b.n	80095d6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f002 fe86 	bl	800c248 <USBD_CtlError>
            ret = USBD_FAIL;
 800953c:	2303      	movs	r3, #3
 800953e:	75fb      	strb	r3, [r7, #23]
          break;
 8009540:	e049      	b.n	80095d6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b03      	cmp	r3, #3
 800954c:	d107      	bne.n	800955e <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3304      	adds	r3, #4
 8009552:	2201      	movs	r2, #1
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f002 fee7 	bl	800c32a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800955c:	e03b      	b.n	80095d6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f002 fe71 	bl	800c248 <USBD_CtlError>
            ret = USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	75fb      	strb	r3, [r7, #23]
          break;
 800956a:	e034      	b.n	80095d6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b03      	cmp	r3, #3
 8009576:	d106      	bne.n	8009586 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	885b      	ldrh	r3, [r3, #2]
 800957c:	b2db      	uxtb	r3, r3
 800957e:	461a      	mov	r2, r3
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009584:	e027      	b.n	80095d6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f002 fe5d 	bl	800c248 <USBD_CtlError>
            ret = USBD_FAIL;
 800958e:	2303      	movs	r3, #3
 8009590:	75fb      	strb	r3, [r7, #23]
          break;
 8009592:	e020      	b.n	80095d6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b03      	cmp	r3, #3
 800959e:	d119      	bne.n	80095d4 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	885b      	ldrh	r3, [r3, #2]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d115      	bne.n	80095d4 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	889b      	ldrh	r3, [r3, #4]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f003 fad7 	bl	800cb64 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	889b      	ldrh	r3, [r3, #4]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fab6 	bl	8009b30 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80095c4:	e006      	b.n	80095d4 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f002 fe3d 	bl	800c248 <USBD_CtlError>
          ret = USBD_FAIL;
 80095ce:	2303      	movs	r3, #3
 80095d0:	75fb      	strb	r3, [r7, #23]
          break;
 80095d2:	e000      	b.n	80095d6 <USBD_MSC_Setup+0x1ca>
          break;
 80095d4:	bf00      	nop
      }
      break;
 80095d6:	e006      	b.n	80095e6 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f002 fe34 	bl	800c248 <USBD_CtlError>
      ret = USBD_FAIL;
 80095e0:	2303      	movs	r3, #3
 80095e2:	75fb      	strb	r3, [r7, #23]
      break;
 80095e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f8e3 	bl	80097cc <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f90c 	bl	800983e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2220      	movs	r2, #32
 800963c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800963e:	4b03      	ldr	r3, [pc, #12]	; (800964c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	24000048 	.word	0x24000048

08009650 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2220      	movs	r2, #32
 800965c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800965e:	4b03      	ldr	r3, [pc, #12]	; (800966c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8009660:	4618      	mov	r0, r3
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	24000068 	.word	0x24000068

08009670 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800967e:	4b03      	ldr	r3, [pc, #12]	; (800968c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	24000088 	.word	0x24000088

08009690 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	220a      	movs	r2, #10
 800969c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800969e:	4b03      	ldr	r3, [pc, #12]	; (80096ac <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	240000a8 	.word	0x240000a8

080096b0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e004      	b.n	80096ce <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096e8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d02e      	beq.n	800974e <MSC_BOT_Init+0x74>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	f241 0361 	movw	r3, #4193	; 0x1061
 8009702:	4413      	add	r3, r2
 8009704:	2200      	movs	r2, #0
 8009706:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800970e:	2200      	movs	r2, #0
 8009710:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	f241 0362 	movw	r3, #4194	; 0x1062
 8009718:	4413      	add	r3, r2
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2000      	movs	r0, #0
 8009728:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800972a:	2101      	movs	r1, #1
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f003 fa19 	bl	800cb64 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8009732:	2181      	movs	r1, #129	; 0x81
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f003 fa15 	bl	800cb64 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f241 0210 	movw	r2, #4112	; 0x1010
 8009740:	441a      	add	r2, r3
 8009742:	231f      	movs	r3, #31
 8009744:	2101      	movs	r1, #1
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f003 fad5 	bl	800ccf6 <USBD_LL_PrepareReceive>
 800974c:	e000      	b.n	8009750 <MSC_BOT_Init+0x76>
    return;
 800974e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009764:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d017      	beq.n	800979c <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8009778:	2181      	movs	r1, #129	; 0x81
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f003 fa30 	bl	800cbe0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8009780:	2101      	movs	r1, #1
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f003 fa2c 	bl	800cbe0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f241 0210 	movw	r2, #4112	; 0x1010
 800978e:	441a      	add	r2, r3
 8009790:	231f      	movs	r3, #31
 8009792:	2101      	movs	r1, #1
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f003 faae 	bl	800ccf6 <USBD_LL_PrepareReceive>
 800979a:	e000      	b.n	800979e <MSC_BOT_Reset+0x48>
    return;
 800979c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097b2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	721a      	strb	r2, [r3, #8]
  }
}
 80097c0:	bf00      	nop
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097de:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d023      	beq.n	800982e <MSC_BOT_DataIn+0x62>
  {
    return;
  }

  switch (hmsc->bot_state)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	7a1b      	ldrb	r3, [r3, #8]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d005      	beq.n	80097fa <MSC_BOT_DataIn+0x2e>
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	db1f      	blt.n	8009832 <MSC_BOT_DataIn+0x66>
 80097f2:	3b03      	subs	r3, #3
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d81c      	bhi.n	8009832 <MSC_BOT_DataIn+0x66>
 80097f8:	e014      	b.n	8009824 <MSC_BOT_DataIn+0x58>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	f241 031d 	movw	r3, #4125	; 0x101d
 8009800:	4413      	add	r3, r2
 8009802:	7819      	ldrb	r1, [r3, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	f241 031f 	movw	r3, #4127	; 0x101f
 800980a:	4413      	add	r3, r2
 800980c:	461a      	mov	r2, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f9bc 	bl	8009b8c <SCSI_ProcessCmd>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	da0d      	bge.n	8009836 <MSC_BOT_DataIn+0x6a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800981a:	2101      	movs	r1, #1
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f91b 	bl	8009a58 <MSC_BOT_SendCSW>
      }
      break;
 8009822:	e008      	b.n	8009836 <MSC_BOT_DataIn+0x6a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009824:	2100      	movs	r1, #0
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f916 	bl	8009a58 <MSC_BOT_SendCSW>
      break;
 800982c:	e004      	b.n	8009838 <MSC_BOT_DataIn+0x6c>
    return;
 800982e:	bf00      	nop
 8009830:	e002      	b.n	8009838 <MSC_BOT_DataIn+0x6c>

    default:
      break;
 8009832:	bf00      	nop
 8009834:	e000      	b.n	8009838 <MSC_BOT_DataIn+0x6c>
      break;
 8009836:	bf00      	nop
  }
}
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	460b      	mov	r3, r1
 8009848:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009850:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01f      	beq.n	8009898 <MSC_BOT_DataOut+0x5a>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	7a1b      	ldrb	r3, [r3, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <MSC_BOT_DataOut+0x28>
 8009860:	2b01      	cmp	r3, #1
 8009862:	d004      	beq.n	800986e <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009864:	e01b      	b.n	800989e <MSC_BOT_DataOut+0x60>
      MSC_BOT_CBW_Decode(pdev);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f81c 	bl	80098a4 <MSC_BOT_CBW_Decode>
      break;
 800986c:	e017      	b.n	800989e <MSC_BOT_DataOut+0x60>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	f241 031d 	movw	r3, #4125	; 0x101d
 8009874:	4413      	add	r3, r2
 8009876:	7819      	ldrb	r1, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	f241 031f 	movw	r3, #4127	; 0x101f
 800987e:	4413      	add	r3, r2
 8009880:	461a      	mov	r2, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f982 	bl	8009b8c <SCSI_ProcessCmd>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	da06      	bge.n	800989c <MSC_BOT_DataOut+0x5e>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800988e:	2101      	movs	r1, #1
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f8e1 	bl	8009a58 <MSC_BOT_SendCSW>
      break;
 8009896:	e001      	b.n	800989c <MSC_BOT_DataOut+0x5e>
    return;
 8009898:	bf00      	nop
 800989a:	e000      	b.n	800989e <MSC_BOT_DataOut+0x60>
      break;
 800989c:	bf00      	nop
  }
}
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 808d 	beq.w	80099d6 <MSC_BOT_CBW_Decode+0x132>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	f241 0314 	movw	r3, #4116	; 0x1014
 80098c2:	4413      	add	r3, r2
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	f241 0334 	movw	r3, #4148	; 0x1034
 80098cc:	440b      	add	r3, r1
 80098ce:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80098d6:	4413      	add	r3, r2
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68f9      	ldr	r1, [r7, #12]
 80098dc:	f241 0338 	movw	r3, #4152	; 0x1038
 80098e0:	440b      	add	r3, r1
 80098e2:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80098e4:	2101      	movs	r1, #1
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f003 fa26 	bl	800cd38 <USBD_LL_GetRxDataSize>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b1f      	cmp	r3, #31
 80098f0:	d11c      	bne.n	800992c <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	f241 0310 	movw	r3, #4112	; 0x1010
 80098f8:	4413      	add	r3, r2
 80098fa:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80098fc:	4a39      	ldr	r2, [pc, #228]	; (80099e4 <MSC_BOT_CBW_Decode+0x140>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d114      	bne.n	800992c <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	f241 031d 	movw	r3, #4125	; 0x101d
 8009908:	4413      	add	r3, r2
 800990a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800990c:	2b01      	cmp	r3, #1
 800990e:	d80d      	bhi.n	800992c <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	f241 031e 	movw	r3, #4126	; 0x101e
 8009916:	4413      	add	r3, r2
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d006      	beq.n	800992c <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bCBLength > 16U))
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	f241 031e 	movw	r3, #4126	; 0x101e
 8009924:	4413      	add	r3, r2
 8009926:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009928:	2b10      	cmp	r3, #16
 800992a:	d910      	bls.n	800994e <MSC_BOT_CBW_Decode+0xaa>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	f241 031d 	movw	r3, #4125	; 0x101d
 8009932:	4413      	add	r3, r2
 8009934:	7819      	ldrb	r1, [r3, #0]
 8009936:	2320      	movs	r3, #32
 8009938:	2205      	movs	r2, #5
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fe1a 	bl	800a574 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2202      	movs	r2, #2
 8009944:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f8bc 	bl	8009ac4 <MSC_BOT_Abort>
 800994c:	e046      	b.n	80099dc <MSC_BOT_CBW_Decode+0x138>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	f241 031d 	movw	r3, #4125	; 0x101d
 8009954:	4413      	add	r3, r2
 8009956:	7819      	ldrb	r1, [r3, #0]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	f241 031f 	movw	r3, #4127	; 0x101f
 800995e:	4413      	add	r3, r2
 8009960:	461a      	mov	r2, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f912 	bl	8009b8c <SCSI_ProcessCmd>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	da0c      	bge.n	8009988 <MSC_BOT_CBW_Decode+0xe4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	7a1b      	ldrb	r3, [r3, #8]
 8009972:	2b05      	cmp	r3, #5
 8009974:	d104      	bne.n	8009980 <MSC_BOT_CBW_Decode+0xdc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009976:	2101      	movs	r1, #1
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f86d 	bl	8009a58 <MSC_BOT_SendCSW>
 800997e:	e02d      	b.n	80099dc <MSC_BOT_CBW_Decode+0x138>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f89f 	bl	8009ac4 <MSC_BOT_Abort>
 8009986:	e029      	b.n	80099dc <MSC_BOT_CBW_Decode+0x138>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	7a1b      	ldrb	r3, [r3, #8]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d024      	beq.n	80099da <MSC_BOT_CBW_Decode+0x136>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009994:	2b01      	cmp	r3, #1
 8009996:	d020      	beq.n	80099da <MSC_BOT_CBW_Decode+0x136>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800999c:	2b03      	cmp	r3, #3
 800999e:	d01c      	beq.n	80099da <MSC_BOT_CBW_Decode+0x136>
    {
      if (hmsc->bot_data_length > 0U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d009      	beq.n	80099bc <MSC_BOT_CBW_Decode+0x118>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f103 0110 	add.w	r1, r3, #16
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	461a      	mov	r2, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f817 	bl	80099e8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80099ba:	e00f      	b.n	80099dc <MSC_BOT_CBW_Decode+0x138>
      }
      else if (hmsc->bot_data_length == 0U)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <MSC_BOT_CBW_Decode+0x12a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80099c4:	2100      	movs	r1, #0
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f846 	bl	8009a58 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80099cc:	e006      	b.n	80099dc <MSC_BOT_CBW_Decode+0x138>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f878 	bl	8009ac4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80099d4:	e002      	b.n	80099dc <MSC_BOT_CBW_Decode+0x138>
    return;
 80099d6:	bf00      	nop
 80099d8:	e000      	b.n	80099dc <MSC_BOT_CBW_Decode+0x138>
      }
    }
    else
    {
      return;
 80099da:	bf00      	nop
    }
  }
}
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	43425355 	.word	0x43425355

080099e8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099fa:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	f241 0318 	movw	r3, #4120	; 0x1018
 8009a02:	4413      	add	r3, r2
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	bf28      	it	cs
 8009a0c:	4613      	movcs	r3, r2
 8009a0e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d01b      	beq.n	8009a4e <MSC_BOT_SendData+0x66>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	f241 0338 	movw	r3, #4152	; 0x1038
 8009a1c:	4413      	add	r3, r2
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	1ad2      	subs	r2, r2, r3
 8009a24:	6979      	ldr	r1, [r7, #20]
 8009a26:	f241 0338 	movw	r3, #4152	; 0x1038
 8009a2a:	440b      	add	r3, r1
 8009a2c:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	f241 033c 	movw	r3, #4156	; 0x103c
 8009a34:	4413      	add	r3, r2
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	2181      	movs	r1, #129	; 0x81
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f003 f934 	bl	800ccb4 <USBD_LL_Transmit>
 8009a4c:	e000      	b.n	8009a50 <MSC_BOT_SendData+0x68>
    return;
 8009a4e:	bf00      	nop
}
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a6a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d021      	beq.n	8009ab6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	f241 0330 	movw	r3, #4144	; 0x1030
 8009a78:	4413      	add	r3, r2
 8009a7a:	4a11      	ldr	r2, [pc, #68]	; (8009ac0 <MSC_BOT_SendCSW+0x68>)
 8009a7c:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	f241 033c 	movw	r3, #4156	; 0x103c
 8009a84:	4413      	add	r3, r2
 8009a86:	78fa      	ldrb	r2, [r7, #3]
 8009a88:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f241 0230 	movw	r2, #4144	; 0x1030
 8009a96:	441a      	add	r2, r3
 8009a98:	230d      	movs	r3, #13
 8009a9a:	2181      	movs	r1, #129	; 0x81
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f003 f909 	bl	800ccb4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f241 0210 	movw	r2, #4112	; 0x1010
 8009aa8:	441a      	add	r2, r3
 8009aaa:	231f      	movs	r3, #31
 8009aac:	2101      	movs	r1, #1
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f003 f921 	bl	800ccf6 <USBD_LL_PrepareReceive>
 8009ab4:	e000      	b.n	8009ab8 <MSC_BOT_SendCSW+0x60>
    return;
 8009ab6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	53425355 	.word	0x53425355

08009ac4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ad2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d026      	beq.n	8009b28 <MSC_BOT_Abort+0x64>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	f241 031c 	movw	r3, #4124	; 0x101c
 8009ae0:	4413      	add	r3, r2
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10e      	bne.n	8009b06 <MSC_BOT_Abort+0x42>
      (hmsc->cbw.dDataLength != 0U) &&
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	f241 0318 	movw	r3, #4120	; 0x1018
 8009aee:	4413      	add	r3, r2
 8009af0:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d007      	beq.n	8009b06 <MSC_BOT_Abort+0x42>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <MSC_BOT_Abort+0x42>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009afe:	2101      	movs	r1, #1
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f003 f84e 	bl	800cba2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009b06:	2181      	movs	r1, #129	; 0x81
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f003 f84a 	bl	800cba2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	7a5b      	ldrb	r3, [r3, #9]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d109      	bne.n	8009b2a <MSC_BOT_Abort+0x66>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009b16:	2181      	movs	r1, #129	; 0x81
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f003 f842 	bl	800cba2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009b1e:	2101      	movs	r1, #1
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f003 f83e 	bl	800cba2 <USBD_LL_StallEP>
 8009b26:	e000      	b.n	8009b2a <MSC_BOT_Abort+0x66>
    return;
 8009b28:	bf00      	nop
  }
}
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b42:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d019      	beq.n	8009b7e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	7a5b      	ldrb	r3, [r3, #9]
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d108      	bne.n	8009b64 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8009b52:	2181      	movs	r1, #129	; 0x81
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f003 f824 	bl	800cba2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f003 f820 	bl	800cba2 <USBD_LL_StallEP>
 8009b62:	e00f      	b.n	8009b84 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	da0a      	bge.n	8009b82 <MSC_BOT_CplClrFeature+0x52>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	7a5b      	ldrb	r3, [r3, #9]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d006      	beq.n	8009b82 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009b74:	2101      	movs	r1, #1
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff ff6e 	bl	8009a58 <MSC_BOT_SendCSW>
 8009b7c:	e002      	b.n	8009b84 <MSC_BOT_CplClrFeature+0x54>
    return;
 8009b7e:	bf00      	nop
 8009b80:	e000      	b.n	8009b84 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8009b82:	bf00      	nop
  }
}
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	460b      	mov	r3, r1
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ba0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d102      	bne.n	8009bae <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8009ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bac:	e168      	b.n	8009e80 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2baa      	cmp	r3, #170	; 0xaa
 8009bb4:	f000 8144 	beq.w	8009e40 <SCSI_ProcessCmd+0x2b4>
 8009bb8:	2baa      	cmp	r3, #170	; 0xaa
 8009bba:	f300 8153 	bgt.w	8009e64 <SCSI_ProcessCmd+0x2d8>
 8009bbe:	2ba8      	cmp	r3, #168	; 0xa8
 8009bc0:	f000 812c 	beq.w	8009e1c <SCSI_ProcessCmd+0x290>
 8009bc4:	2ba8      	cmp	r3, #168	; 0xa8
 8009bc6:	f300 814d 	bgt.w	8009e64 <SCSI_ProcessCmd+0x2d8>
 8009bca:	2b5a      	cmp	r3, #90	; 0x5a
 8009bcc:	f300 80c0 	bgt.w	8009d50 <SCSI_ProcessCmd+0x1c4>
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f2c0 8147 	blt.w	8009e64 <SCSI_ProcessCmd+0x2d8>
 8009bd6:	2b5a      	cmp	r3, #90	; 0x5a
 8009bd8:	f200 8144 	bhi.w	8009e64 <SCSI_ProcessCmd+0x2d8>
 8009bdc:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <SCSI_ProcessCmd+0x58>)
 8009bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be2:	bf00      	nop
 8009be4:	08009d57 	.word	0x08009d57
 8009be8:	08009e65 	.word	0x08009e65
 8009bec:	08009e65 	.word	0x08009e65
 8009bf0:	08009d69 	.word	0x08009d69
 8009bf4:	08009e65 	.word	0x08009e65
 8009bf8:	08009e65 	.word	0x08009e65
 8009bfc:	08009e65 	.word	0x08009e65
 8009c00:	08009e65 	.word	0x08009e65
 8009c04:	08009e65 	.word	0x08009e65
 8009c08:	08009e65 	.word	0x08009e65
 8009c0c:	08009e65 	.word	0x08009e65
 8009c10:	08009e65 	.word	0x08009e65
 8009c14:	08009e65 	.word	0x08009e65
 8009c18:	08009e65 	.word	0x08009e65
 8009c1c:	08009e65 	.word	0x08009e65
 8009c20:	08009e65 	.word	0x08009e65
 8009c24:	08009e65 	.word	0x08009e65
 8009c28:	08009e65 	.word	0x08009e65
 8009c2c:	08009d7b 	.word	0x08009d7b
 8009c30:	08009e65 	.word	0x08009e65
 8009c34:	08009e65 	.word	0x08009e65
 8009c38:	08009e65 	.word	0x08009e65
 8009c3c:	08009e65 	.word	0x08009e65
 8009c40:	08009e65 	.word	0x08009e65
 8009c44:	08009e65 	.word	0x08009e65
 8009c48:	08009e65 	.word	0x08009e65
 8009c4c:	08009db1 	.word	0x08009db1
 8009c50:	08009d8d 	.word	0x08009d8d
 8009c54:	08009e65 	.word	0x08009e65
 8009c58:	08009e65 	.word	0x08009e65
 8009c5c:	08009d9f 	.word	0x08009d9f
 8009c60:	08009e65 	.word	0x08009e65
 8009c64:	08009e65 	.word	0x08009e65
 8009c68:	08009e65 	.word	0x08009e65
 8009c6c:	08009e65 	.word	0x08009e65
 8009c70:	08009dd5 	.word	0x08009dd5
 8009c74:	08009e65 	.word	0x08009e65
 8009c78:	08009de7 	.word	0x08009de7
 8009c7c:	08009e65 	.word	0x08009e65
 8009c80:	08009e65 	.word	0x08009e65
 8009c84:	08009e0b 	.word	0x08009e0b
 8009c88:	08009e65 	.word	0x08009e65
 8009c8c:	08009e2f 	.word	0x08009e2f
 8009c90:	08009e65 	.word	0x08009e65
 8009c94:	08009e65 	.word	0x08009e65
 8009c98:	08009e65 	.word	0x08009e65
 8009c9c:	08009e65 	.word	0x08009e65
 8009ca0:	08009e53 	.word	0x08009e53
 8009ca4:	08009e65 	.word	0x08009e65
 8009ca8:	08009e65 	.word	0x08009e65
 8009cac:	08009e65 	.word	0x08009e65
 8009cb0:	08009e65 	.word	0x08009e65
 8009cb4:	08009e65 	.word	0x08009e65
 8009cb8:	08009e65 	.word	0x08009e65
 8009cbc:	08009e65 	.word	0x08009e65
 8009cc0:	08009e65 	.word	0x08009e65
 8009cc4:	08009e65 	.word	0x08009e65
 8009cc8:	08009e65 	.word	0x08009e65
 8009ccc:	08009e65 	.word	0x08009e65
 8009cd0:	08009e65 	.word	0x08009e65
 8009cd4:	08009e65 	.word	0x08009e65
 8009cd8:	08009e65 	.word	0x08009e65
 8009cdc:	08009e65 	.word	0x08009e65
 8009ce0:	08009e65 	.word	0x08009e65
 8009ce4:	08009e65 	.word	0x08009e65
 8009ce8:	08009e65 	.word	0x08009e65
 8009cec:	08009e65 	.word	0x08009e65
 8009cf0:	08009e65 	.word	0x08009e65
 8009cf4:	08009e65 	.word	0x08009e65
 8009cf8:	08009e65 	.word	0x08009e65
 8009cfc:	08009e65 	.word	0x08009e65
 8009d00:	08009e65 	.word	0x08009e65
 8009d04:	08009e65 	.word	0x08009e65
 8009d08:	08009e65 	.word	0x08009e65
 8009d0c:	08009e65 	.word	0x08009e65
 8009d10:	08009e65 	.word	0x08009e65
 8009d14:	08009e65 	.word	0x08009e65
 8009d18:	08009e65 	.word	0x08009e65
 8009d1c:	08009e65 	.word	0x08009e65
 8009d20:	08009e65 	.word	0x08009e65
 8009d24:	08009e65 	.word	0x08009e65
 8009d28:	08009e65 	.word	0x08009e65
 8009d2c:	08009e65 	.word	0x08009e65
 8009d30:	08009e65 	.word	0x08009e65
 8009d34:	08009e65 	.word	0x08009e65
 8009d38:	08009e65 	.word	0x08009e65
 8009d3c:	08009e65 	.word	0x08009e65
 8009d40:	08009e65 	.word	0x08009e65
 8009d44:	08009e65 	.word	0x08009e65
 8009d48:	08009e65 	.word	0x08009e65
 8009d4c:	08009dc3 	.word	0x08009dc3
 8009d50:	2b9e      	cmp	r3, #158	; 0x9e
 8009d52:	d051      	beq.n	8009df8 <SCSI_ProcessCmd+0x26c>
 8009d54:	e086      	b.n	8009e64 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009d56:	7afb      	ldrb	r3, [r7, #11]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 f893 	bl	8009e88 <SCSI_TestUnitReady>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
      break;
 8009d66:	e089      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 fb70 	bl	800a454 <SCSI_RequestSense>
 8009d74:	4603      	mov	r3, r0
 8009d76:	75fb      	strb	r3, [r7, #23]
      break;
 8009d78:	e080      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 f8d7 	bl	8009f34 <SCSI_Inquiry>
 8009d86:	4603      	mov	r3, r0
 8009d88:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8a:	e077      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009d8c:	7afb      	ldrb	r3, [r7, #11]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	4619      	mov	r1, r3
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 fc47 	bl	800a626 <SCSI_StartStopUnit>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9c:	e06e      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009d9e:	7afb      	ldrb	r3, [r7, #11]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	4619      	mov	r1, r3
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 fc97 	bl	800a6d8 <SCSI_AllowPreventRemovable>
 8009daa:	4603      	mov	r3, r0
 8009dac:	75fb      	strb	r3, [r7, #23]
      break;
 8009dae:	e065      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009db0:	7afb      	ldrb	r3, [r7, #11]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4619      	mov	r1, r3
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 faf4 	bl	800a3a4 <SCSI_ModeSense6>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc0:	e05c      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009dc2:	7afb      	ldrb	r3, [r7, #11]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 fb17 	bl	800a3fc <SCSI_ModeSense10>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd2:	e053      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009dd4:	7afb      	ldrb	r3, [r7, #11]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 fa6d 	bl	800a2ba <SCSI_ReadFormatCapacity>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]
      break;
 8009de4:	e04a      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	4619      	mov	r1, r3
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 f91b 	bl	800a028 <SCSI_ReadCapacity10>
 8009df2:	4603      	mov	r3, r0
 8009df4:	75fb      	strb	r3, [r7, #23]
      break;
 8009df6:	e041      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009df8:	7afb      	ldrb	r3, [r7, #11]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 f99c 	bl	800a13c <SCSI_ReadCapacity16>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75fb      	strb	r3, [r7, #23]
      break;
 8009e08:	e038      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009e0a:	7afb      	ldrb	r3, [r7, #11]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 fc8e 	bl	800a732 <SCSI_Read10>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]
      break;
 8009e1a:	e02f      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009e1c:	7afb      	ldrb	r3, [r7, #11]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	4619      	mov	r1, r3
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fd3d 	bl	800a8a2 <SCSI_Read12>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e2c:	e026      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	4619      	mov	r1, r3
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f000 fdf6 	bl	800aa26 <SCSI_Write10>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e3e:	e01d      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009e40:	7afb      	ldrb	r3, [r7, #11]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4619      	mov	r1, r3
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 fecb 	bl	800abe2 <SCSI_Write12>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e50:	e014      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009e52:	7afb      	ldrb	r3, [r7, #11]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	4619      	mov	r1, r3
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 ffb0 	bl	800adbe <SCSI_Verify10>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	75fb      	strb	r3, [r7, #23]
      break;
 8009e62:	e00b      	b.n	8009e7c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009e64:	7af9      	ldrb	r1, [r7, #11]
 8009e66:	2320      	movs	r3, #32
 8009e68:	2205      	movs	r2, #5
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 fb82 	bl	800a574 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2202      	movs	r2, #2
 8009e74:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009e76:	23ff      	movs	r3, #255	; 0xff
 8009e78:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7a:	bf00      	nop
  }

  return ret;
 8009e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	460b      	mov	r3, r1
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e9c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8009ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea8:	e040      	b.n	8009f2c <SCSI_TestUnitReady+0xa4>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	f241 0318 	movw	r3, #4120	; 0x1018
 8009eb0:	4413      	add	r3, r2
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00c      	beq.n	8009ed2 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	f241 031d 	movw	r3, #4125	; 0x101d
 8009ebe:	4413      	add	r3, r2
 8009ec0:	7819      	ldrb	r1, [r3, #0]
 8009ec2:	2320      	movs	r3, #32
 8009ec4:	2205      	movs	r2, #5
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fb54 	bl	800a574 <SCSI_SenseCode>

    return -1;
 8009ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed0:	e02c      	b.n	8009f2c <SCSI_TestUnitReady+0xa4>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	f241 0362 	movw	r3, #4194	; 0x1062
 8009ed8:	4413      	add	r3, r2
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d10b      	bne.n	8009ef8 <SCSI_TestUnitReady+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ee0:	7af9      	ldrb	r1, [r7, #11]
 8009ee2:	233a      	movs	r3, #58	; 0x3a
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 fb44 	bl	800a574 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	2205      	movs	r2, #5
 8009ef0:	721a      	strb	r2, [r3, #8]
    return -1;
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef6:	e019      	b.n	8009f2c <SCSI_TestUnitReady+0xa4>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	7afa      	ldrb	r2, [r7, #11]
 8009f02:	4610      	mov	r0, r2
 8009f04:	4798      	blx	r3
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <SCSI_TestUnitReady+0x9c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f0c:	7af9      	ldrb	r1, [r7, #11]
 8009f0e:	233a      	movs	r3, #58	; 0x3a
 8009f10:	2202      	movs	r2, #2
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 fb2e 	bl	800a574 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	2205      	movs	r2, #5
 8009f1c:	721a      	strb	r2, [r3, #8]

    return -1;
 8009f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f22:	e003      	b.n	8009f2c <SCSI_TestUnitReady+0xa4>
  }
  hmsc->bot_data_length = 0U;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	2200      	movs	r2, #0
 8009f28:	60da      	str	r2, [r3, #12]

  return 0;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f48:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <SCSI_Inquiry+0x22>
  {
    return -1;
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295
 8009f54:	e060      	b.n	800a018 <SCSI_Inquiry+0xe4>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	f241 0318 	movw	r3, #4120	; 0x1018
 8009f5c:	4413      	add	r3, r2
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10c      	bne.n	8009f7e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	f241 031d 	movw	r3, #4125	; 0x101d
 8009f6a:	4413      	add	r3, r2
 8009f6c:	7819      	ldrb	r1, [r3, #0]
 8009f6e:	2320      	movs	r3, #32
 8009f70:	2205      	movs	r2, #5
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 fafe 	bl	800a574 <SCSI_SenseCode>
    return -1;
 8009f78:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7c:	e04c      	b.n	800a018 <SCSI_Inquiry+0xe4>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3301      	adds	r3, #1
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d022      	beq.n	8009fd2 <SCSI_Inquiry+0x9e>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3302      	adds	r3, #2
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009f96:	2206      	movs	r2, #6
 8009f98:	4921      	ldr	r1, [pc, #132]	; (800a020 <SCSI_Inquiry+0xec>)
 8009f9a:	69b8      	ldr	r0, [r7, #24]
 8009f9c:	f001 f8b3 	bl	800b106 <SCSI_UpdateBotData>
 8009fa0:	e039      	b.n	800a016 <SCSI_Inquiry+0xe2>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b80      	cmp	r3, #128	; 0x80
 8009faa:	d105      	bne.n	8009fb8 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009fac:	2208      	movs	r2, #8
 8009fae:	491d      	ldr	r1, [pc, #116]	; (800a024 <SCSI_Inquiry+0xf0>)
 8009fb0:	69b8      	ldr	r0, [r7, #24]
 8009fb2:	f001 f8a8 	bl	800b106 <SCSI_UpdateBotData>
 8009fb6:	e02e      	b.n	800a016 <SCSI_Inquiry+0xe2>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	f241 031d 	movw	r3, #4125	; 0x101d
 8009fbe:	4413      	add	r3, r2
 8009fc0:	7819      	ldrb	r1, [r3, #0]
 8009fc2:	2324      	movs	r3, #36	; 0x24
 8009fc4:	2205      	movs	r2, #5
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f000 fad4 	bl	800a574 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd0:	e022      	b.n	800a018 <SCSI_Inquiry+0xe4>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fd8:	69d9      	ldr	r1, [r3, #28]
 8009fda:	7afa      	ldrb	r2, [r7, #11]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	00db      	lsls	r3, r3, #3
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	3304      	adds	r3, #4
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	3305      	adds	r3, #5
 8009ff2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	8bfa      	ldrh	r2, [r7, #30]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d303      	bcc.n	800a00a <SCSI_Inquiry+0xd6>
    {
      len = params[4];
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3304      	adds	r3, #4
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800a00a:	8bfb      	ldrh	r3, [r7, #30]
 800a00c:	461a      	mov	r2, r3
 800a00e:	6979      	ldr	r1, [r7, #20]
 800a010:	69b8      	ldr	r0, [r7, #24]
 800a012:	f001 f878 	bl	800b106 <SCSI_UpdateBotData>
  }

  return 0;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3720      	adds	r7, #32
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	240000b4 	.word	0x240000b4
 800a024:	240000bc 	.word	0x240000bc

0800a028 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a028:	b590      	push	{r4, r7, lr}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	460b      	mov	r3, r1
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a03c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 800a044:	f04f 33ff 	mov.w	r3, #4294967295
 800a048:	e074      	b.n	800a134 <SCSI_ReadCapacity10+0x10c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a050:	685c      	ldr	r4, [r3, #4]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	f241 0368 	movw	r3, #4200	; 0x1068
 800a058:	4413      	add	r3, r2
 800a05a:	6979      	ldr	r1, [r7, #20]
 800a05c:	f241 0264 	movw	r2, #4196	; 0x1064
 800a060:	440a      	add	r2, r1
 800a062:	7af8      	ldrb	r0, [r7, #11]
 800a064:	4619      	mov	r1, r3
 800a066:	47a0      	blx	r4
 800a068:	4603      	mov	r3, r0
 800a06a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a06c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d106      	bne.n	800a082 <SCSI_ReadCapacity10+0x5a>
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	f241 0362 	movw	r3, #4194	; 0x1062
 800a07a:	4413      	add	r3, r2
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d108      	bne.n	800a094 <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a082:	7af9      	ldrb	r1, [r7, #11]
 800a084:	233a      	movs	r3, #58	; 0x3a
 800a086:	2202      	movs	r2, #2
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 fa73 	bl	800a574 <SCSI_SenseCode>
    return -1;
 800a08e:	f04f 33ff 	mov.w	r3, #4294967295
 800a092:	e04f      	b.n	800a134 <SCSI_ReadCapacity10+0x10c>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	f241 0368 	movw	r3, #4200	; 0x1068
 800a09a:	4413      	add	r3, r2
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	0e1b      	lsrs	r3, r3, #24
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	f241 0368 	movw	r3, #4200	; 0x1068
 800a0ae:	4413      	add	r3, r2
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	0c1b      	lsrs	r3, r3, #16
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	f241 0368 	movw	r3, #4200	; 0x1068
 800a0c2:	4413      	add	r3, r2
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	0a1b      	lsrs	r3, r3, #8
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	f241 0368 	movw	r3, #4200	; 0x1068
 800a0d6:	4413      	add	r3, r2
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	f241 0364 	movw	r3, #4196	; 0x1064
 800a0ea:	4413      	add	r3, r2
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	161b      	asrs	r3, r3, #24
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	f241 0364 	movw	r3, #4196	; 0x1064
 800a0fc:	4413      	add	r3, r2
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	141b      	asrs	r3, r3, #16
 800a102:	b2da      	uxtb	r2, r3
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	f241 0364 	movw	r3, #4196	; 0x1064
 800a10e:	4413      	add	r3, r2
 800a110:	881b      	ldrh	r3, [r3, #0]
 800a112:	0a1b      	lsrs	r3, r3, #8
 800a114:	b29b      	uxth	r3, r3
 800a116:	b2da      	uxtb	r2, r3
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	f241 0364 	movw	r3, #4196	; 0x1064
 800a122:	4413      	add	r3, r2
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	b2da      	uxtb	r2, r3
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2208      	movs	r2, #8
 800a130:	60da      	str	r2, [r3, #12]

  return 0;
 800a132:	2300      	movs	r3, #0

}
 800a134:	4618      	mov	r0, r3
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd90      	pop	{r4, r7, pc}

0800a13c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a13c:	b590      	push	{r4, r7, lr}
 800a13e:	b089      	sub	sp, #36	; 0x24
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	460b      	mov	r3, r1
 800a146:	607a      	str	r2, [r7, #4]
 800a148:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a150:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800a158:	f04f 33ff 	mov.w	r3, #4294967295
 800a15c:	e0a9      	b.n	800a2b2 <SCSI_ReadCapacity16+0x176>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a164:	685c      	ldr	r4, [r3, #4]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	f241 0368 	movw	r3, #4200	; 0x1068
 800a16c:	4413      	add	r3, r2
 800a16e:	69b9      	ldr	r1, [r7, #24]
 800a170:	f241 0264 	movw	r2, #4196	; 0x1064
 800a174:	440a      	add	r2, r1
 800a176:	7af8      	ldrb	r0, [r7, #11]
 800a178:	4619      	mov	r1, r3
 800a17a:	47a0      	blx	r4
 800a17c:	4603      	mov	r3, r0
 800a17e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d106      	bne.n	800a196 <SCSI_ReadCapacity16+0x5a>
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	f241 0362 	movw	r3, #4194	; 0x1062
 800a18e:	4413      	add	r3, r2
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d108      	bne.n	800a1a8 <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a196:	7af9      	ldrb	r1, [r7, #11]
 800a198:	233a      	movs	r3, #58	; 0x3a
 800a19a:	2202      	movs	r2, #2
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 f9e9 	bl	800a574 <SCSI_SenseCode>
    return -1;
 800a1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a6:	e084      	b.n	800a2b2 <SCSI_ReadCapacity16+0x176>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	330a      	adds	r3, #10
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	330b      	adds	r3, #11
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a1b8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	330c      	adds	r3, #12
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a1c2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	320d      	adds	r2, #13
 800a1c8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a1ca:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	77fb      	strb	r3, [r7, #31]
 800a1d4:	e007      	b.n	800a1e6 <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 800a1d6:	7ffb      	ldrb	r3, [r7, #31]
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	4413      	add	r3, r2
 800a1dc:	2200      	movs	r2, #0
 800a1de:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a1e0:	7ffb      	ldrb	r3, [r7, #31]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	77fb      	strb	r3, [r7, #31]
 800a1e6:	7ffa      	ldrb	r2, [r7, #31]
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d3f2      	bcc.n	800a1d6 <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	f241 0368 	movw	r3, #4200	; 0x1068
 800a1f6:	4413      	add	r3, r2
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	0e1b      	lsrs	r3, r3, #24
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	f241 0368 	movw	r3, #4200	; 0x1068
 800a20a:	4413      	add	r3, r2
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3b01      	subs	r3, #1
 800a210:	0c1b      	lsrs	r3, r3, #16
 800a212:	b2da      	uxtb	r2, r3
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	f241 0368 	movw	r3, #4200	; 0x1068
 800a21e:	4413      	add	r3, r2
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3b01      	subs	r3, #1
 800a224:	0a1b      	lsrs	r3, r3, #8
 800a226:	b2da      	uxtb	r2, r3
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a22c:	69ba      	ldr	r2, [r7, #24]
 800a22e:	f241 0368 	movw	r3, #4200	; 0x1068
 800a232:	4413      	add	r3, r2
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	3b01      	subs	r3, #1
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	f241 0364 	movw	r3, #4196	; 0x1064
 800a246:	4413      	add	r3, r2
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	161b      	asrs	r3, r3, #24
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	f241 0364 	movw	r3, #4196	; 0x1064
 800a258:	4413      	add	r3, r2
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	141b      	asrs	r3, r3, #16
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	f241 0364 	movw	r3, #4196	; 0x1064
 800a26a:	4413      	add	r3, r2
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	0a1b      	lsrs	r3, r3, #8
 800a270:	b29b      	uxth	r3, r3
 800a272:	b2da      	uxtb	r2, r3
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	f241 0364 	movw	r3, #4196	; 0x1064
 800a27e:	4413      	add	r3, r2
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	b2da      	uxtb	r2, r3
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	330a      	adds	r3, #10
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	330b      	adds	r3, #11
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a298:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	330c      	adds	r3, #12
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a2a2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	320d      	adds	r2, #13
 800a2a8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a2aa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	60da      	str	r2, [r3, #12]

  return 0;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3724      	adds	r7, #36	; 0x24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd90      	pop	{r4, r7, pc}

0800a2ba <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b088      	sub	sp, #32
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	60f8      	str	r0, [r7, #12]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	607a      	str	r2, [r7, #4]
 800a2c6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ce:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d102      	bne.n	800a2dc <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800a2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2da:	e05e      	b.n	800a39a <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f107 0214 	add.w	r2, r7, #20
 800a2e8:	f107 0110 	add.w	r1, r7, #16
 800a2ec:	7af8      	ldrb	r0, [r7, #11]
 800a2ee:	4798      	blx	r3
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d106      	bne.n	800a30a <SCSI_ReadFormatCapacity+0x50>
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	f241 0362 	movw	r3, #4194	; 0x1062
 800a302:	4413      	add	r3, r2
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2b02      	cmp	r3, #2
 800a308:	d108      	bne.n	800a31c <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a30a:	7af9      	ldrb	r1, [r7, #11]
 800a30c:	233a      	movs	r3, #58	; 0x3a
 800a30e:	2202      	movs	r2, #2
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 f92f 	bl	800a574 <SCSI_SenseCode>
    return -1;
 800a316:	f04f 33ff 	mov.w	r3, #4294967295
 800a31a:	e03e      	b.n	800a39a <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 800a31c:	2300      	movs	r3, #0
 800a31e:	83fb      	strh	r3, [r7, #30]
 800a320:	e007      	b.n	800a332 <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 800a322:	8bfb      	ldrh	r3, [r7, #30]
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	4413      	add	r3, r2
 800a328:	2200      	movs	r2, #0
 800a32a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a32c:	8bfb      	ldrh	r3, [r7, #30]
 800a32e:	3301      	adds	r3, #1
 800a330:	83fb      	strh	r3, [r7, #30]
 800a332:	8bfb      	ldrh	r3, [r7, #30]
 800a334:	2b0b      	cmp	r3, #11
 800a336:	d9f4      	bls.n	800a322 <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	2208      	movs	r2, #8
 800a33c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	3b01      	subs	r3, #1
 800a342:	0e1b      	lsrs	r3, r3, #24
 800a344:	b2da      	uxtb	r2, r3
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	0c1b      	lsrs	r3, r3, #16
 800a350:	b2da      	uxtb	r2, r3
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	3b01      	subs	r3, #1
 800a35a:	0a1b      	lsrs	r3, r3, #8
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	3b01      	subs	r3, #1
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	2202      	movs	r2, #2
 800a372:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a374:	8abb      	ldrh	r3, [r7, #20]
 800a376:	141b      	asrs	r3, r3, #16
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a37e:	8abb      	ldrh	r3, [r7, #20]
 800a380:	0a1b      	lsrs	r3, r3, #8
 800a382:	b29b      	uxth	r3, r3
 800a384:	b2da      	uxtb	r2, r3
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a38a:	8abb      	ldrh	r3, [r7, #20]
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	220c      	movs	r2, #12
 800a396:	60da      	str	r2, [r3, #12]

  return 0;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3720      	adds	r7, #32
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3b8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a3ba:	2317      	movs	r3, #23
 800a3bc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <SCSI_ModeSense6+0x26>
  {
    return -1;
 800a3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c8:	e011      	b.n	800a3ee <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	8afa      	ldrh	r2, [r7, #22]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d303      	bcc.n	800a3e0 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a3e0:	8afb      	ldrh	r3, [r7, #22]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	4904      	ldr	r1, [pc, #16]	; (800a3f8 <SCSI_ModeSense6+0x54>)
 800a3e6:	6938      	ldr	r0, [r7, #16]
 800a3e8:	f000 fe8d 	bl	800b106 <SCSI_UpdateBotData>

  return 0;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	240000c4 	.word	0x240000c4

0800a3fc <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	460b      	mov	r3, r1
 800a406:	607a      	str	r2, [r7, #4]
 800a408:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a410:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a412:	231b      	movs	r3, #27
 800a414:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <SCSI_ModeSense10+0x26>
  {
    return -1;
 800a41c:	f04f 33ff 	mov.w	r3, #4294967295
 800a420:	e011      	b.n	800a446 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3308      	adds	r3, #8
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	8afa      	ldrh	r2, [r7, #22]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d303      	bcc.n	800a438 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3308      	adds	r3, #8
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a438:	8afb      	ldrh	r3, [r7, #22]
 800a43a:	461a      	mov	r2, r3
 800a43c:	4904      	ldr	r1, [pc, #16]	; (800a450 <SCSI_ModeSense10+0x54>)
 800a43e:	6938      	ldr	r0, [r7, #16]
 800a440:	f000 fe61 	bl	800b106 <SCSI_UpdateBotData>

  return 0;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	240000dc 	.word	0x240000dc

0800a454 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	460b      	mov	r3, r1
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a468:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d102      	bne.n	800a476 <SCSI_RequestSense+0x22>
  {
    return -1;
 800a470:	f04f 33ff 	mov.w	r3, #4294967295
 800a474:	e07a      	b.n	800a56c <SCSI_RequestSense+0x118>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	f241 0318 	movw	r3, #4120	; 0x1018
 800a47c:	4413      	add	r3, r2
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10c      	bne.n	800a49e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	f241 031d 	movw	r3, #4125	; 0x101d
 800a48a:	4413      	add	r3, r2
 800a48c:	7819      	ldrb	r1, [r3, #0]
 800a48e:	2320      	movs	r3, #32
 800a490:	2205      	movs	r2, #5
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 f86e 	bl	800a574 <SCSI_SenseCode>
    return -1;
 800a498:	f04f 33ff 	mov.w	r3, #4294967295
 800a49c:	e066      	b.n	800a56c <SCSI_RequestSense+0x118>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a49e:	2300      	movs	r3, #0
 800a4a0:	75fb      	strb	r3, [r7, #23]
 800a4a2:	e007      	b.n	800a4b4 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	75fb      	strb	r3, [r7, #23]
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	2b11      	cmp	r3, #17
 800a4b8:	d9f4      	bls.n	800a4a4 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	2270      	movs	r2, #112	; 0x70
 800a4be:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	220c      	movs	r2, #12
 800a4c4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a4cc:	781a      	ldrb	r2, [r3, #0]
 800a4ce:	6939      	ldr	r1, [r7, #16]
 800a4d0:	f241 0361 	movw	r3, #4193	; 0x1061
 800a4d4:	440b      	add	r3, r1
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d038      	beq.n	800a54e <SCSI_RequestSense+0xfa>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a4ec:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	4413      	add	r3, r2
 800a506:	791a      	ldrb	r2, [r3, #4]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	4413      	add	r3, r2
 800a51e:	795a      	ldrb	r2, [r3, #5]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	3301      	adds	r3, #1
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a536:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b04      	cmp	r3, #4
 800a542:	d104      	bne.n	800a54e <SCSI_RequestSense+0xfa>
    {
      hmsc->scsi_sense_head = 0U;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a54a:	2200      	movs	r2, #0
 800a54c:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	2212      	movs	r2, #18
 800a552:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3304      	adds	r3, #4
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b12      	cmp	r3, #18
 800a55c:	d805      	bhi.n	800a56a <SCSI_RequestSense+0x116>
  {
    hmsc->bot_data_length = params[4];
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3304      	adds	r3, #4
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	461a      	mov	r2, r3
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	461a      	mov	r2, r3
 800a582:	4603      	mov	r3, r0
 800a584:	70fb      	strb	r3, [r7, #3]
 800a586:	460b      	mov	r3, r1
 800a588:	70bb      	strb	r3, [r7, #2]
 800a58a:	4613      	mov	r3, r2
 800a58c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a594:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d03e      	beq.n	800a61a <SCSI_SenseCode+0xa6>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	f241 0361 	movw	r3, #4193	; 0x1061
 800a5a2:	4413      	add	r3, r2
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a5ae:	78b9      	ldrb	r1, [r7, #2]
 800a5b0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	f241 0361 	movw	r3, #4193	; 0x1061
 800a5ba:	4413      	add	r3, r2
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a5c4:	00db      	lsls	r3, r3, #3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	787a      	ldrb	r2, [r7, #1]
 800a5ca:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	f241 0361 	movw	r3, #4193	; 0x1061
 800a5d2:	4413      	add	r3, r2
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	4413      	add	r3, r2
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	f241 0361 	movw	r3, #4193	; 0x1061
 800a5ea:	4413      	add	r3, r2
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	b2d9      	uxtb	r1, r3
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	f241 0361 	movw	r3, #4193	; 0x1061
 800a5f8:	4413      	add	r3, r2
 800a5fa:	460a      	mov	r2, r1
 800a5fc:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	f241 0361 	movw	r3, #4193	; 0x1061
 800a604:	4413      	add	r3, r2
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d107      	bne.n	800a61c <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	f241 0361 	movw	r3, #4193	; 0x1061
 800a612:	4413      	add	r3, r2
 800a614:	2200      	movs	r2, #0
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	e000      	b.n	800a61c <SCSI_SenseCode+0xa8>
    return;
 800a61a:	bf00      	nop
  }
}
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b086      	sub	sp, #24
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	460b      	mov	r3, r1
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a63a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d102      	bne.n	800a648 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800a642:	f04f 33ff 	mov.w	r3, #4294967295
 800a646:	e043      	b.n	800a6d0 <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	f241 0362 	movw	r3, #4194	; 0x1062
 800a64e:	4413      	add	r3, r2
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d10f      	bne.n	800a676 <SCSI_StartStopUnit+0x50>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3304      	adds	r3, #4
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f003 0303 	and.w	r3, r3, #3
 800a660:	2b02      	cmp	r3, #2
 800a662:	d108      	bne.n	800a676 <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a664:	7af9      	ldrb	r1, [r7, #11]
 800a666:	2324      	movs	r3, #36	; 0x24
 800a668:	2205      	movs	r2, #5
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f7ff ff82 	bl	800a574 <SCSI_SenseCode>

    return -1;
 800a670:	f04f 33ff 	mov.w	r3, #4294967295
 800a674:	e02c      	b.n	800a6d0 <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3304      	adds	r3, #4
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	f003 0303 	and.w	r3, r3, #3
 800a680:	2b01      	cmp	r3, #1
 800a682:	d106      	bne.n	800a692 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	f241 0362 	movw	r3, #4194	; 0x1062
 800a68a:	4413      	add	r3, r2
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	e01a      	b.n	800a6c8 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3304      	adds	r3, #4
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d106      	bne.n	800a6ae <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	f241 0362 	movw	r3, #4194	; 0x1062
 800a6a6:	4413      	add	r3, r2
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	e00c      	b.n	800a6c8 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 0303 	and.w	r3, r3, #3
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d105      	bne.n	800a6c8 <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	f241 0362 	movw	r3, #4194	; 0x1062
 800a6c2:	4413      	add	r3, r2
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	60da      	str	r2, [r3, #12]

  return 0;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800a6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f8:	e015      	b.n	800a726 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d106      	bne.n	800a712 <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	f241 0362 	movw	r3, #4194	; 0x1062
 800a70a:	4413      	add	r3, r2
 800a70c:	2200      	movs	r2, #0
 800a70e:	701a      	strb	r2, [r3, #0]
 800a710:	e005      	b.n	800a71e <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	f241 0362 	movw	r3, #4194	; 0x1062
 800a718:	4413      	add	r3, r2
 800a71a:	2201      	movs	r2, #1
 800a71c:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2200      	movs	r2, #0
 800a722:	60da      	str	r2, [r3, #12]

  return 0;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	371c      	adds	r7, #28
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	460b      	mov	r3, r1
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a746:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <SCSI_Read10+0x22>
  {
    return -1;
 800a74e:	f04f 33ff 	mov.w	r3, #4294967295
 800a752:	e0a2      	b.n	800a89a <SCSI_Read10+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	7a1b      	ldrb	r3, [r3, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f040 8094 	bne.w	800a886 <SCSI_Read10+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	f241 031c 	movw	r3, #4124	; 0x101c
 800a764:	4413      	add	r3, r2
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	db0c      	blt.n	800a788 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	f241 031d 	movw	r3, #4125	; 0x101d
 800a774:	4413      	add	r3, r2
 800a776:	7819      	ldrb	r1, [r3, #0]
 800a778:	2320      	movs	r3, #32
 800a77a:	2205      	movs	r2, #5
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7ff fef9 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800a782:	f04f 33ff 	mov.w	r3, #4294967295
 800a786:	e088      	b.n	800a89a <SCSI_Read10+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	f241 0362 	movw	r3, #4194	; 0x1062
 800a78e:	4413      	add	r3, r2
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2b02      	cmp	r3, #2
 800a794:	d108      	bne.n	800a7a8 <SCSI_Read10+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a796:	7af9      	ldrb	r1, [r7, #11]
 800a798:	233a      	movs	r3, #58	; 0x3a
 800a79a:	2202      	movs	r2, #2
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff fee9 	bl	800a574 <SCSI_SenseCode>

      return -1;
 800a7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a6:	e078      	b.n	800a89a <SCSI_Read10+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	7afa      	ldrb	r2, [r7, #11]
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	4798      	blx	r3
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d008      	beq.n	800a7ce <SCSI_Read10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a7bc:	7af9      	ldrb	r1, [r7, #11]
 800a7be:	233a      	movs	r3, #58	; 0x3a
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7ff fed6 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800a7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7cc:	e065      	b.n	800a89a <SCSI_Read10+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3302      	adds	r3, #2
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3303      	adds	r3, #3
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7de:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a7e8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	3205      	adds	r2, #5
 800a7ee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a7f0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7f2:	6979      	ldr	r1, [r7, #20]
 800a7f4:	f241 036c 	movw	r3, #4204	; 0x106c
 800a7f8:	440b      	add	r3, r1
 800a7fa:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3307      	adds	r3, #7
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	021b      	lsls	r3, r3, #8
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	3208      	adds	r2, #8
 800a808:	7812      	ldrb	r2, [r2, #0]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	6979      	ldr	r1, [r7, #20]
 800a80e:	f241 0370 	movw	r3, #4208	; 0x1070
 800a812:	440b      	add	r3, r1
 800a814:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	f241 036c 	movw	r3, #4204	; 0x106c
 800a81c:	4413      	add	r3, r2
 800a81e:	6818      	ldr	r0, [r3, #0]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	f241 0370 	movw	r3, #4208	; 0x1070
 800a826:	4413      	add	r3, r2
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	7af9      	ldrb	r1, [r7, #11]
 800a82c:	4602      	mov	r2, r0
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f000 fb03 	bl	800ae3a <SCSI_CheckAddressRange>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	da02      	bge.n	800a840 <SCSI_Read10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a83a:	f04f 33ff 	mov.w	r3, #4294967295
 800a83e:	e02c      	b.n	800a89a <SCSI_Read10+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	f241 0318 	movw	r3, #4120	; 0x1018
 800a846:	4413      	add	r3, r2
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	6979      	ldr	r1, [r7, #20]
 800a84c:	f241 0370 	movw	r3, #4208	; 0x1070
 800a850:	440b      	add	r3, r1
 800a852:	6819      	ldr	r1, [r3, #0]
 800a854:	6978      	ldr	r0, [r7, #20]
 800a856:	f241 0364 	movw	r3, #4196	; 0x1064
 800a85a:	4403      	add	r3, r0
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	fb03 f301 	mul.w	r3, r3, r1
 800a862:	429a      	cmp	r2, r3
 800a864:	d00c      	beq.n	800a880 <SCSI_Read10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	f241 031d 	movw	r3, #4125	; 0x101d
 800a86c:	4413      	add	r3, r2
 800a86e:	7819      	ldrb	r1, [r3, #0]
 800a870:	2320      	movs	r3, #32
 800a872:	2205      	movs	r2, #5
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff fe7d 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800a87a:	f04f 33ff 	mov.w	r3, #4294967295
 800a87e:	e00c      	b.n	800a89a <SCSI_Read10+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2202      	movs	r2, #2
 800a884:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a88c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a88e:	7afb      	ldrb	r3, [r7, #11]
 800a890:	4619      	mov	r1, r3
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 fafb 	bl	800ae8e <SCSI_ProcessRead>
 800a898:	4603      	mov	r3, r0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3718      	adds	r7, #24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8b6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d102      	bne.n	800a8c4 <SCSI_Read12+0x22>
  {
    return -1;
 800a8be:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c2:	e0ac      	b.n	800aa1e <SCSI_Read12+0x17c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	7a1b      	ldrb	r3, [r3, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f040 809e 	bne.w	800aa0a <SCSI_Read12+0x168>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	f241 031c 	movw	r3, #4124	; 0x101c
 800a8d4:	4413      	add	r3, r2
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	b25b      	sxtb	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	db0c      	blt.n	800a8f8 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	f241 031d 	movw	r3, #4125	; 0x101d
 800a8e4:	4413      	add	r3, r2
 800a8e6:	7819      	ldrb	r1, [r3, #0]
 800a8e8:	2320      	movs	r3, #32
 800a8ea:	2205      	movs	r2, #5
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff fe41 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800a8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f6:	e092      	b.n	800aa1e <SCSI_Read12+0x17c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	f241 0362 	movw	r3, #4194	; 0x1062
 800a8fe:	4413      	add	r3, r2
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2b02      	cmp	r3, #2
 800a904:	d108      	bne.n	800a918 <SCSI_Read12+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a906:	7af9      	ldrb	r1, [r7, #11]
 800a908:	233a      	movs	r3, #58	; 0x3a
 800a90a:	2202      	movs	r2, #2
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff fe31 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800a912:	f04f 33ff 	mov.w	r3, #4294967295
 800a916:	e082      	b.n	800aa1e <SCSI_Read12+0x17c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	7afa      	ldrb	r2, [r7, #11]
 800a922:	4610      	mov	r0, r2
 800a924:	4798      	blx	r3
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d008      	beq.n	800a93e <SCSI_Read12+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a92c:	7af9      	ldrb	r1, [r7, #11]
 800a92e:	233a      	movs	r3, #58	; 0x3a
 800a930:	2202      	movs	r2, #2
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fe1e 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800a938:	f04f 33ff 	mov.w	r3, #4294967295
 800a93c:	e06f      	b.n	800aa1e <SCSI_Read12+0x17c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3302      	adds	r3, #2
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3303      	adds	r3, #3
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a94e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3304      	adds	r3, #4
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a958:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	3205      	adds	r2, #5
 800a95e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a960:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a962:	6979      	ldr	r1, [r7, #20]
 800a964:	f241 036c 	movw	r3, #4204	; 0x106c
 800a968:	440b      	add	r3, r1
 800a96a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3306      	adds	r3, #6
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3307      	adds	r3, #7
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a97c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3308      	adds	r3, #8
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a986:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	3209      	adds	r2, #9
 800a98c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a98e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a990:	6979      	ldr	r1, [r7, #20]
 800a992:	f241 0370 	movw	r3, #4208	; 0x1070
 800a996:	440b      	add	r3, r1
 800a998:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	f241 036c 	movw	r3, #4204	; 0x106c
 800a9a0:	4413      	add	r3, r2
 800a9a2:	6818      	ldr	r0, [r3, #0]
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	f241 0370 	movw	r3, #4208	; 0x1070
 800a9aa:	4413      	add	r3, r2
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	7af9      	ldrb	r1, [r7, #11]
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f000 fa41 	bl	800ae3a <SCSI_CheckAddressRange>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	da02      	bge.n	800a9c4 <SCSI_Read12+0x122>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c2:	e02c      	b.n	800aa1e <SCSI_Read12+0x17c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	f241 0318 	movw	r3, #4120	; 0x1018
 800a9ca:	4413      	add	r3, r2
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	6979      	ldr	r1, [r7, #20]
 800a9d0:	f241 0370 	movw	r3, #4208	; 0x1070
 800a9d4:	440b      	add	r3, r1
 800a9d6:	6819      	ldr	r1, [r3, #0]
 800a9d8:	6978      	ldr	r0, [r7, #20]
 800a9da:	f241 0364 	movw	r3, #4196	; 0x1064
 800a9de:	4403      	add	r3, r0
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	fb03 f301 	mul.w	r3, r3, r1
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d00c      	beq.n	800aa04 <SCSI_Read12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	f241 031d 	movw	r3, #4125	; 0x101d
 800a9f0:	4413      	add	r3, r2
 800a9f2:	7819      	ldrb	r1, [r3, #0]
 800a9f4:	2320      	movs	r3, #32
 800a9f6:	2205      	movs	r2, #5
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff fdbb 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800a9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800aa02:	e00c      	b.n	800aa1e <SCSI_Read12+0x17c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2202      	movs	r2, #2
 800aa08:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aa10:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800aa12:	7afb      	ldrb	r3, [r7, #11]
 800aa14:	4619      	mov	r1, r3
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f000 fa39 	bl	800ae8e <SCSI_ProcessRead>
 800aa1c:	4603      	mov	r3, r0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b086      	sub	sp, #24
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	607a      	str	r2, [r7, #4]
 800aa32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa3a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d102      	bne.n	800aa48 <SCSI_Write10+0x22>
  {
    return -1;
 800aa42:	f04f 33ff 	mov.w	r3, #4294967295
 800aa46:	e0c8      	b.n	800abda <SCSI_Write10+0x1b4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	7a1b      	ldrb	r3, [r3, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f040 80be 	bne.w	800abce <SCSI_Write10+0x1a8>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	f241 0318 	movw	r3, #4120	; 0x1018
 800aa58:	4413      	add	r3, r2
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10c      	bne.n	800aa7a <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	f241 031d 	movw	r3, #4125	; 0x101d
 800aa66:	4413      	add	r3, r2
 800aa68:	7819      	ldrb	r1, [r3, #0]
 800aa6a:	2320      	movs	r3, #32
 800aa6c:	2205      	movs	r2, #5
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7ff fd80 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800aa74:	f04f 33ff 	mov.w	r3, #4294967295
 800aa78:	e0af      	b.n	800abda <SCSI_Write10+0x1b4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	f241 031c 	movw	r3, #4124	; 0x101c
 800aa80:	4413      	add	r3, r2
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	b25b      	sxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	da0c      	bge.n	800aaa4 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	f241 031d 	movw	r3, #4125	; 0x101d
 800aa90:	4413      	add	r3, r2
 800aa92:	7819      	ldrb	r1, [r3, #0]
 800aa94:	2320      	movs	r3, #32
 800aa96:	2205      	movs	r2, #5
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f7ff fd6b 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800aa9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa2:	e09a      	b.n	800abda <SCSI_Write10+0x1b4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	7afa      	ldrb	r2, [r7, #11]
 800aaae:	4610      	mov	r0, r2
 800aab0:	4798      	blx	r3
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d008      	beq.n	800aaca <SCSI_Write10+0xa4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aab8:	7af9      	ldrb	r1, [r7, #11]
 800aaba:	233a      	movs	r3, #58	; 0x3a
 800aabc:	2202      	movs	r2, #2
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f7ff fd58 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295
 800aac8:	e087      	b.n	800abda <SCSI_Write10+0x1b4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	7afa      	ldrb	r2, [r7, #11]
 800aad4:	4610      	mov	r0, r2
 800aad6:	4798      	blx	r3
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d008      	beq.n	800aaf0 <SCSI_Write10+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800aade:	7af9      	ldrb	r1, [r7, #11]
 800aae0:	2327      	movs	r3, #39	; 0x27
 800aae2:	2202      	movs	r2, #2
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f7ff fd45 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800aaea:	f04f 33ff 	mov.w	r3, #4294967295
 800aaee:	e074      	b.n	800abda <SCSI_Write10+0x1b4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3302      	adds	r3, #2
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3303      	adds	r3, #3
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab00:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3304      	adds	r3, #4
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ab0a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	3205      	adds	r2, #5
 800ab10:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ab12:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab14:	6979      	ldr	r1, [r7, #20]
 800ab16:	f241 036c 	movw	r3, #4204	; 0x106c
 800ab1a:	440b      	add	r3, r1
 800ab1c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3307      	adds	r3, #7
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	3208      	adds	r2, #8
 800ab2a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	6979      	ldr	r1, [r7, #20]
 800ab30:	f241 0370 	movw	r3, #4208	; 0x1070
 800ab34:	440b      	add	r3, r1
 800ab36:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	f241 036c 	movw	r3, #4204	; 0x106c
 800ab3e:	4413      	add	r3, r2
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	f241 0370 	movw	r3, #4208	; 0x1070
 800ab48:	4413      	add	r3, r2
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	7af9      	ldrb	r1, [r7, #11]
 800ab4e:	4602      	mov	r2, r0
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 f972 	bl	800ae3a <SCSI_CheckAddressRange>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da02      	bge.n	800ab62 <SCSI_Write10+0x13c>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ab5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab60:	e03b      	b.n	800abda <SCSI_Write10+0x1b4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	f241 0370 	movw	r3, #4208	; 0x1070
 800ab68:	4413      	add	r3, r2
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	6979      	ldr	r1, [r7, #20]
 800ab6e:	f241 0364 	movw	r3, #4196	; 0x1064
 800ab72:	440b      	add	r3, r1
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	fb03 f302 	mul.w	r3, r3, r2
 800ab7a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	f241 0318 	movw	r3, #4120	; 0x1018
 800ab82:	4413      	add	r3, r2
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d00c      	beq.n	800aba6 <SCSI_Write10+0x180>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	f241 031d 	movw	r3, #4125	; 0x101d
 800ab92:	4413      	add	r3, r2
 800ab94:	7819      	ldrb	r1, [r3, #0]
 800ab96:	2320      	movs	r3, #32
 800ab98:	2205      	movs	r2, #5
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f7ff fcea 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800aba0:	f04f 33ff 	mov.w	r3, #4294967295
 800aba4:	e019      	b.n	800abda <SCSI_Write10+0x1b4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abac:	bf28      	it	cs
 800abae:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800abb2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2201      	movs	r2, #1
 800abb8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f103 0210 	add.w	r2, r3, #16
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	2101      	movs	r1, #1
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f002 f896 	bl	800ccf6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	e005      	b.n	800abda <SCSI_Write10+0x1b4>
    return SCSI_ProcessWrite(pdev, lun);
 800abce:	7afb      	ldrb	r3, [r7, #11]
 800abd0:	4619      	mov	r1, r3
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f9ef 	bl	800afb6 <SCSI_ProcessWrite>
 800abd8:	4603      	mov	r3, r0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b086      	sub	sp, #24
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	460b      	mov	r3, r1
 800abec:	607a      	str	r2, [r7, #4]
 800abee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abf6:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d102      	bne.n	800ac04 <SCSI_Write12+0x22>
  {
    return -1;
 800abfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ac02:	e0d8      	b.n	800adb6 <SCSI_Write12+0x1d4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	7a1b      	ldrb	r3, [r3, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f040 80ce 	bne.w	800adaa <SCSI_Write12+0x1c8>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	f241 0318 	movw	r3, #4120	; 0x1018
 800ac14:	4413      	add	r3, r2
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10c      	bne.n	800ac36 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	f241 031d 	movw	r3, #4125	; 0x101d
 800ac22:	4413      	add	r3, r2
 800ac24:	7819      	ldrb	r1, [r3, #0]
 800ac26:	2320      	movs	r3, #32
 800ac28:	2205      	movs	r2, #5
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f7ff fca2 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800ac30:	f04f 33ff 	mov.w	r3, #4294967295
 800ac34:	e0bf      	b.n	800adb6 <SCSI_Write12+0x1d4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	f241 031c 	movw	r3, #4124	; 0x101c
 800ac3c:	4413      	add	r3, r2
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	b25b      	sxtb	r3, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	da0c      	bge.n	800ac60 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	f241 031d 	movw	r3, #4125	; 0x101d
 800ac4c:	4413      	add	r3, r2
 800ac4e:	7819      	ldrb	r1, [r3, #0]
 800ac50:	2320      	movs	r3, #32
 800ac52:	2205      	movs	r2, #5
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f7ff fc8d 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5e:	e0aa      	b.n	800adb6 <SCSI_Write12+0x1d4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	7afa      	ldrb	r2, [r7, #11]
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	4798      	blx	r3
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <SCSI_Write12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ac74:	7af9      	ldrb	r1, [r7, #11]
 800ac76:	233a      	movs	r3, #58	; 0x3a
 800ac78:	2202      	movs	r2, #2
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f7ff fc7a 	bl	800a574 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	2205      	movs	r2, #5
 800ac84:	721a      	strb	r2, [r3, #8]
      return -1;
 800ac86:	f04f 33ff 	mov.w	r3, #4294967295
 800ac8a:	e094      	b.n	800adb6 <SCSI_Write12+0x1d4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	7afa      	ldrb	r2, [r7, #11]
 800ac96:	4610      	mov	r0, r2
 800ac98:	4798      	blx	r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00b      	beq.n	800acb8 <SCSI_Write12+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800aca0:	7af9      	ldrb	r1, [r7, #11]
 800aca2:	2327      	movs	r3, #39	; 0x27
 800aca4:	2202      	movs	r2, #2
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff fc64 	bl	800a574 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	2205      	movs	r2, #5
 800acb0:	721a      	strb	r2, [r3, #8]
      return -1;
 800acb2:	f04f 33ff 	mov.w	r3, #4294967295
 800acb6:	e07e      	b.n	800adb6 <SCSI_Write12+0x1d4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3302      	adds	r3, #2
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3303      	adds	r3, #3
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800acc8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3304      	adds	r3, #4
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800acd2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	3205      	adds	r2, #5
 800acd8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800acda:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800acdc:	6979      	ldr	r1, [r7, #20]
 800acde:	f241 036c 	movw	r3, #4204	; 0x106c
 800ace2:	440b      	add	r3, r1
 800ace4:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3306      	adds	r3, #6
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3307      	adds	r3, #7
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800acf6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3308      	adds	r3, #8
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ad00:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	3209      	adds	r2, #9
 800ad06:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ad08:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ad0a:	6979      	ldr	r1, [r7, #20]
 800ad0c:	f241 0370 	movw	r3, #4208	; 0x1070
 800ad10:	440b      	add	r3, r1
 800ad12:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	f241 036c 	movw	r3, #4204	; 0x106c
 800ad1a:	4413      	add	r3, r2
 800ad1c:	6818      	ldr	r0, [r3, #0]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	f241 0370 	movw	r3, #4208	; 0x1070
 800ad24:	4413      	add	r3, r2
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	7af9      	ldrb	r1, [r7, #11]
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 f884 	bl	800ae3a <SCSI_CheckAddressRange>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	da02      	bge.n	800ad3e <SCSI_Write12+0x15c>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ad38:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3c:	e03b      	b.n	800adb6 <SCSI_Write12+0x1d4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	f241 0370 	movw	r3, #4208	; 0x1070
 800ad44:	4413      	add	r3, r2
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	6979      	ldr	r1, [r7, #20]
 800ad4a:	f241 0364 	movw	r3, #4196	; 0x1064
 800ad4e:	440b      	add	r3, r1
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	fb03 f302 	mul.w	r3, r3, r2
 800ad56:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	f241 0318 	movw	r3, #4120	; 0x1018
 800ad5e:	4413      	add	r3, r2
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d00c      	beq.n	800ad82 <SCSI_Write12+0x1a0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	f241 031d 	movw	r3, #4125	; 0x101d
 800ad6e:	4413      	add	r3, r2
 800ad70:	7819      	ldrb	r1, [r3, #0]
 800ad72:	2320      	movs	r3, #32
 800ad74:	2205      	movs	r2, #5
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff fbfc 	bl	800a574 <SCSI_SenseCode>
      return -1;
 800ad7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad80:	e019      	b.n	800adb6 <SCSI_Write12+0x1d4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad88:	bf28      	it	cs
 800ad8a:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ad8e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2201      	movs	r2, #1
 800ad94:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f103 0210 	add.w	r2, r3, #16
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2101      	movs	r1, #1
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f001 ffa8 	bl	800ccf6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	e005      	b.n	800adb6 <SCSI_Write12+0x1d4>
    return SCSI_ProcessWrite(pdev, lun);
 800adaa:	7afb      	ldrb	r3, [r7, #11]
 800adac:	4619      	mov	r1, r3
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 f901 	bl	800afb6 <SCSI_ProcessWrite>
 800adb4:	4603      	mov	r3, r0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	460b      	mov	r3, r1
 800adc8:	607a      	str	r2, [r7, #4]
 800adca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800add2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d102      	bne.n	800ade0 <SCSI_Verify10+0x22>
  {
    return -1;
 800adda:	f04f 33ff 	mov.w	r3, #4294967295
 800adde:	e028      	b.n	800ae32 <SCSI_Verify10+0x74>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	3301      	adds	r3, #1
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	2b00      	cmp	r3, #0
 800adec:	d008      	beq.n	800ae00 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800adee:	7af9      	ldrb	r1, [r7, #11]
 800adf0:	2324      	movs	r3, #36	; 0x24
 800adf2:	2205      	movs	r2, #5
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff fbbd 	bl	800a574 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800adfa:	f04f 33ff 	mov.w	r3, #4294967295
 800adfe:	e018      	b.n	800ae32 <SCSI_Verify10+0x74>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	f241 036c 	movw	r3, #4204	; 0x106c
 800ae06:	4413      	add	r3, r2
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	f241 0370 	movw	r3, #4208	; 0x1070
 800ae10:	4413      	add	r3, r2
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	7af9      	ldrb	r1, [r7, #11]
 800ae16:	4602      	mov	r2, r0
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 f80e 	bl	800ae3a <SCSI_CheckAddressRange>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	da02      	bge.n	800ae2a <SCSI_Verify10+0x6c>
  {
    return -1; /* error */
 800ae24:	f04f 33ff 	mov.w	r3, #4294967295
 800ae28:	e003      	b.n	800ae32 <SCSI_Verify10+0x74>
  }

  hmsc->bot_data_length = 0U;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	60da      	str	r2, [r3, #12]

  return 0;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b086      	sub	sp, #24
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	607a      	str	r2, [r7, #4]
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	460b      	mov	r3, r1
 800ae48:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae50:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d102      	bne.n	800ae5e <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800ae58:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5c:	e013      	b.n	800ae86 <SCSI_CheckAddressRange+0x4c>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	441a      	add	r2, r3
 800ae64:	6979      	ldr	r1, [r7, #20]
 800ae66:	f241 0368 	movw	r3, #4200	; 0x1068
 800ae6a:	440b      	add	r3, r1
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d908      	bls.n	800ae84 <SCSI_CheckAddressRange+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ae72:	7af9      	ldrb	r1, [r7, #11]
 800ae74:	2321      	movs	r3, #33	; 0x21
 800ae76:	2205      	movs	r2, #5
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f7ff fb7b 	bl	800a574 <SCSI_SenseCode>
    return -1;
 800ae7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae82:	e000      	b.n	800ae86 <SCSI_CheckAddressRange+0x4c>
  }

  return 0;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ae8e:	b5b0      	push	{r4, r5, r7, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	460b      	mov	r3, r1
 800ae98:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aea0:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	f241 0370 	movw	r3, #4208	; 0x1070
 800aea8:	4413      	add	r3, r2
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	68f9      	ldr	r1, [r7, #12]
 800aeae:	f241 0364 	movw	r3, #4196	; 0x1064
 800aeb2:	440b      	add	r3, r1
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	fb03 f302 	mul.w	r3, r3, r2
 800aeba:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <SCSI_ProcessRead+0x3a>
  {
    return -1;
 800aec2:	f04f 33ff 	mov.w	r3, #4294967295
 800aec6:	e072      	b.n	800afae <SCSI_ProcessRead+0x120>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aece:	bf28      	it	cs
 800aed0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aed4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aedc:	691c      	ldr	r4, [r3, #16]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f103 0110 	add.w	r1, r3, #16
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	f241 036c 	movw	r3, #4204	; 0x106c
 800aeea:	4413      	add	r3, r2
 800aeec:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	f241 0364 	movw	r3, #4196	; 0x1064
 800aef4:	4413      	add	r3, r2
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800af00:	b29b      	uxth	r3, r3
 800af02:	78f8      	ldrb	r0, [r7, #3]
 800af04:	462a      	mov	r2, r5
 800af06:	47a0      	blx	r4
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da08      	bge.n	800af20 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800af0e:	78f9      	ldrb	r1, [r7, #3]
 800af10:	2311      	movs	r3, #17
 800af12:	2204      	movs	r2, #4
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fb2d 	bl	800a574 <SCSI_SenseCode>
    return -1;
 800af1a:	f04f 33ff 	mov.w	r3, #4294967295
 800af1e:	e046      	b.n	800afae <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f103 0210 	add.w	r2, r3, #16
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2181      	movs	r1, #129	; 0x81
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f001 fec2 	bl	800ccb4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	f241 036c 	movw	r3, #4204	; 0x106c
 800af36:	4413      	add	r3, r2
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	68f9      	ldr	r1, [r7, #12]
 800af3c:	f241 0364 	movw	r3, #4196	; 0x1064
 800af40:	440b      	add	r3, r1
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	4619      	mov	r1, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	fbb3 f3f1 	udiv	r3, r3, r1
 800af4c:	441a      	add	r2, r3
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	f241 036c 	movw	r3, #4204	; 0x106c
 800af54:	440b      	add	r3, r1
 800af56:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	f241 0370 	movw	r3, #4208	; 0x1070
 800af5e:	4413      	add	r3, r2
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	f241 0364 	movw	r3, #4196	; 0x1064
 800af68:	440b      	add	r3, r1
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	4619      	mov	r1, r3
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	fbb3 f3f1 	udiv	r3, r3, r1
 800af74:	1ad2      	subs	r2, r2, r3
 800af76:	68f9      	ldr	r1, [r7, #12]
 800af78:	f241 0370 	movw	r3, #4208	; 0x1070
 800af7c:	440b      	add	r3, r1
 800af7e:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	f241 0338 	movw	r3, #4152	; 0x1038
 800af86:	4413      	add	r3, r2
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	1ad2      	subs	r2, r2, r3
 800af8e:	68f9      	ldr	r1, [r7, #12]
 800af90:	f241 0338 	movw	r3, #4152	; 0x1038
 800af94:	440b      	add	r3, r1
 800af96:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	f241 0370 	movw	r3, #4208	; 0x1070
 800af9e:	4413      	add	r3, r2
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2203      	movs	r2, #3
 800afaa:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bdb0      	pop	{r4, r5, r7, pc}

0800afb6 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800afb6:	b5b0      	push	{r4, r5, r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	460b      	mov	r3, r1
 800afc0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afc8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	f241 0370 	movw	r3, #4208	; 0x1070
 800afd0:	4413      	add	r3, r2
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	68f9      	ldr	r1, [r7, #12]
 800afd6:	f241 0364 	movw	r3, #4196	; 0x1064
 800afda:	440b      	add	r3, r1
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	fb03 f302 	mul.w	r3, r3, r2
 800afe2:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d102      	bne.n	800aff0 <SCSI_ProcessWrite+0x3a>
  {
    return -1;
 800afea:	f04f 33ff 	mov.w	r3, #4294967295
 800afee:	e086      	b.n	800b0fe <SCSI_ProcessWrite+0x148>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff6:	bf28      	it	cs
 800aff8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800affc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b004:	695c      	ldr	r4, [r3, #20]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f103 0110 	add.w	r1, r3, #16
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	f241 036c 	movw	r3, #4204	; 0x106c
 800b012:	4413      	add	r3, r2
 800b014:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	f241 0364 	movw	r3, #4196	; 0x1064
 800b01c:	4413      	add	r3, r2
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800b028:	b29b      	uxth	r3, r3
 800b02a:	78f8      	ldrb	r0, [r7, #3]
 800b02c:	462a      	mov	r2, r5
 800b02e:	47a0      	blx	r4
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	da08      	bge.n	800b048 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800b036:	78f9      	ldrb	r1, [r7, #3]
 800b038:	2303      	movs	r3, #3
 800b03a:	2204      	movs	r2, #4
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff fa99 	bl	800a574 <SCSI_SenseCode>
    return -1;
 800b042:	f04f 33ff 	mov.w	r3, #4294967295
 800b046:	e05a      	b.n	800b0fe <SCSI_ProcessWrite+0x148>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	f241 036c 	movw	r3, #4204	; 0x106c
 800b04e:	4413      	add	r3, r2
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68f9      	ldr	r1, [r7, #12]
 800b054:	f241 0364 	movw	r3, #4196	; 0x1064
 800b058:	440b      	add	r3, r1
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	4619      	mov	r1, r3
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	fbb3 f3f1 	udiv	r3, r3, r1
 800b064:	441a      	add	r2, r3
 800b066:	68f9      	ldr	r1, [r7, #12]
 800b068:	f241 036c 	movw	r3, #4204	; 0x106c
 800b06c:	440b      	add	r3, r1
 800b06e:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	f241 0370 	movw	r3, #4208	; 0x1070
 800b076:	4413      	add	r3, r2
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	f241 0364 	movw	r3, #4196	; 0x1064
 800b080:	440b      	add	r3, r1
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	4619      	mov	r1, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	fbb3 f3f1 	udiv	r3, r3, r1
 800b08c:	1ad2      	subs	r2, r2, r3
 800b08e:	68f9      	ldr	r1, [r7, #12]
 800b090:	f241 0370 	movw	r3, #4208	; 0x1070
 800b094:	440b      	add	r3, r1
 800b096:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	f241 0338 	movw	r3, #4152	; 0x1038
 800b09e:	4413      	add	r3, r2
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	1ad2      	subs	r2, r2, r3
 800b0a6:	68f9      	ldr	r1, [r7, #12]
 800b0a8:	f241 0338 	movw	r3, #4152	; 0x1038
 800b0ac:	440b      	add	r3, r1
 800b0ae:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	f241 0370 	movw	r3, #4208	; 0x1070
 800b0b6:	4413      	add	r3, r2
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d104      	bne.n	800b0c8 <SCSI_ProcessWrite+0x112>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7fe fcc9 	bl	8009a58 <MSC_BOT_SendCSW>
 800b0c6:	e019      	b.n	800b0fc <SCSI_ProcessWrite+0x146>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	f241 0370 	movw	r3, #4208	; 0x1070
 800b0ce:	4413      	add	r3, r2
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	68f9      	ldr	r1, [r7, #12]
 800b0d4:	f241 0364 	movw	r3, #4196	; 0x1064
 800b0d8:	440b      	add	r3, r1
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	fb03 f302 	mul.w	r3, r3, r2
 800b0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e4:	bf28      	it	cs
 800b0e6:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800b0ea:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f103 0210 	add.w	r2, r3, #16
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f001 fdfd 	bl	800ccf6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bdb0      	pop	{r4, r5, r7, pc}

0800b106 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b106:	b480      	push	{r7}
 800b108:	b087      	sub	sp, #28
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	60f8      	str	r0, [r7, #12]
 800b10e:	60b9      	str	r1, [r7, #8]
 800b110:	4613      	mov	r3, r2
 800b112:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b114:	88fb      	ldrh	r3, [r7, #6]
 800b116:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d102      	bne.n	800b124 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b11e:	f04f 33ff 	mov.w	r3, #4294967295
 800b122:	e013      	b.n	800b14c <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b124:	8afa      	ldrh	r2, [r7, #22]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b12a:	e00b      	b.n	800b144 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b12c:	8afb      	ldrh	r3, [r7, #22]
 800b12e:	3b01      	subs	r3, #1
 800b130:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b132:	8afb      	ldrh	r3, [r7, #22]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	441a      	add	r2, r3
 800b138:	8afb      	ldrh	r3, [r7, #22]
 800b13a:	7811      	ldrb	r1, [r2, #0]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4413      	add	r3, r2
 800b140:	460a      	mov	r2, r1
 800b142:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b144:	8afb      	ldrh	r3, [r7, #22]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1f0      	bne.n	800b12c <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	371c      	adds	r7, #28
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	4613      	mov	r3, r2
 800b164:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e01f      	b.n	800b1b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	79fa      	ldrb	r2, [r7, #7]
 800b1a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f001 fc2d 	bl	800ca04 <USBD_LL_Init>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e016      	b.n	800b1fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00b      	beq.n	800b1fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ec:	f107 020e 	add.w	r2, r7, #14
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	4798      	blx	r3
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f001 fc48 	bl	800caa4 <USBD_LL_Start>
 800b214:	4603      	mov	r3, r0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b240:	2303      	movs	r3, #3
 800b242:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d009      	beq.n	800b262 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	78fa      	ldrb	r2, [r7, #3]
 800b258:	4611      	mov	r1, r2
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
 800b25e:	4603      	mov	r3, r0
 800b260:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b262:	7bfb      	ldrb	r3, [r7, #15]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d007      	beq.n	800b292 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	78fa      	ldrb	r2, [r7, #3]
 800b28c:	4611      	mov	r1, r2
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4798      	blx	r3
  }

  return USBD_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 ff90 	bl	800c1d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2d0:	f003 031f 	and.w	r3, r3, #31
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d01a      	beq.n	800b30e <USBD_LL_SetupStage+0x72>
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d822      	bhi.n	800b322 <USBD_LL_SetupStage+0x86>
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <USBD_LL_SetupStage+0x4a>
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d00a      	beq.n	800b2fa <USBD_LL_SetupStage+0x5e>
 800b2e4:	e01d      	b.n	800b322 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fa62 	bl	800b7b8 <USBD_StdDevReq>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2f8:	e020      	b.n	800b33c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fac6 	bl	800b894 <USBD_StdItfReq>
 800b308:	4603      	mov	r3, r0
 800b30a:	73fb      	strb	r3, [r7, #15]
      break;
 800b30c:	e016      	b.n	800b33c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fb05 	bl	800b926 <USBD_StdEPReq>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
      break;
 800b320:	e00c      	b.n	800b33c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b328:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 fc36 	bl	800cba2 <USBD_LL_StallEP>
 800b336:	4603      	mov	r3, r0
 800b338:	73fb      	strb	r3, [r7, #15]
      break;
 800b33a:	bf00      	nop
  }

  return ret;
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	460b      	mov	r3, r1
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d138      	bne.n	800b3cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b360:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d14a      	bne.n	800b402 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	689a      	ldr	r2, [r3, #8]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	429a      	cmp	r2, r3
 800b376:	d913      	bls.n	800b3a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	1ad2      	subs	r2, r2, r3
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	4293      	cmp	r3, r2
 800b390:	bf28      	it	cs
 800b392:	4613      	movcs	r3, r2
 800b394:	461a      	mov	r2, r3
 800b396:	6879      	ldr	r1, [r7, #4]
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 fff2 	bl	800c382 <USBD_CtlContinueRx>
 800b39e:	e030      	b.n	800b402 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	2b03      	cmp	r3, #3
 800b3aa:	d10b      	bne.n	800b3c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 ffed 	bl	800c3a4 <USBD_CtlSendStatus>
 800b3ca:	e01a      	b.n	800b402 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d114      	bne.n	800b402 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00e      	beq.n	800b402 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	7afa      	ldrb	r2, [r7, #11]
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	4798      	blx	r3
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	e000      	b.n	800b404 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	460b      	mov	r3, r1
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b41a:	7afb      	ldrb	r3, [r7, #11]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d16b      	bne.n	800b4f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3314      	adds	r3, #20
 800b424:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d156      	bne.n	800b4de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d914      	bls.n	800b466 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	689a      	ldr	r2, [r3, #8]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	1ad2      	subs	r2, r2, r3
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	461a      	mov	r2, r3
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 ff84 	bl	800c360 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b458:	2300      	movs	r3, #0
 800b45a:	2200      	movs	r2, #0
 800b45c:	2100      	movs	r1, #0
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f001 fc49 	bl	800ccf6 <USBD_LL_PrepareReceive>
 800b464:	e03b      	b.n	800b4de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d11c      	bne.n	800b4ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	685a      	ldr	r2, [r3, #4]
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d316      	bcc.n	800b4ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b488:	429a      	cmp	r2, r3
 800b48a:	d20f      	bcs.n	800b4ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b48c:	2200      	movs	r2, #0
 800b48e:	2100      	movs	r1, #0
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f000 ff65 	bl	800c360 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b49e:	2300      	movs	r3, #0
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f001 fc26 	bl	800ccf6 <USBD_LL_PrepareReceive>
 800b4aa:	e018      	b.n	800b4de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d10b      	bne.n	800b4d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d005      	beq.n	800b4d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4d0:	2180      	movs	r1, #128	; 0x80
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f001 fb65 	bl	800cba2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 ff76 	bl	800c3ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d122      	bne.n	800b52e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff fe98 	bl	800b21e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4f6:	e01a      	b.n	800b52e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	2b03      	cmp	r3, #3
 800b502:	d114      	bne.n	800b52e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00e      	beq.n	800b52e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	7afa      	ldrb	r2, [r7, #11]
 800b51a:	4611      	mov	r1, r2
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	4798      	blx	r3
 800b520:	4603      	mov	r3, r0
 800b522:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	e000      	b.n	800b530 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b568:	2303      	movs	r3, #3
 800b56a:	e02f      	b.n	800b5cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00f      	beq.n	800b596 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d009      	beq.n	800b596 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6852      	ldr	r2, [r2, #4]
 800b58e:	b2d2      	uxtb	r2, r2
 800b590:	4611      	mov	r1, r2
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b596:	2340      	movs	r3, #64	; 0x40
 800b598:	2200      	movs	r2, #0
 800b59a:	2100      	movs	r1, #0
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f001 fa9c 	bl	800cada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2240      	movs	r2, #64	; 0x40
 800b5ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5b2:	2340      	movs	r3, #64	; 0x40
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2180      	movs	r1, #128	; 0x80
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f001 fa8e 	bl	800cada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2240      	movs	r2, #64	; 0x40
 800b5c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	78fa      	ldrb	r2, [r7, #3]
 800b5e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b602:	b2da      	uxtb	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2204      	movs	r2, #4
 800b60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b04      	cmp	r3, #4
 800b632:	d106      	bne.n	800b642 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d101      	bne.n	800b666 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b662:	2303      	movs	r3, #3
 800b664:	e012      	b.n	800b68c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b03      	cmp	r3, #3
 800b670:	d10b      	bne.n	800b68a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b678:	69db      	ldr	r3, [r3, #28]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e014      	b.n	800b6d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d10d      	bne.n	800b6d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d007      	beq.n	800b6d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	78fa      	ldrb	r2, [r7, #3]
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d101      	bne.n	800b6fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e014      	b.n	800b724 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b03      	cmp	r3, #3
 800b704:	d10d      	bne.n	800b722 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d007      	beq.n	800b722 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	78fa      	ldrb	r2, [r7, #3]
 800b71c:	4611      	mov	r1, r2
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b082      	sub	sp, #8
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d009      	beq.n	800b770 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	6852      	ldr	r2, [r2, #4]
 800b768:	b2d2      	uxtb	r2, r2
 800b76a:	4611      	mov	r1, r2
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	4798      	blx	r3
  }

  return USBD_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b087      	sub	sp, #28
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	3301      	adds	r3, #1
 800b790:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b798:	8a3b      	ldrh	r3, [r7, #16]
 800b79a:	021b      	lsls	r3, r3, #8
 800b79c:	b21a      	sxth	r2, r3
 800b79e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	b21b      	sxth	r3, r3
 800b7a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b7a8:	89fb      	ldrh	r3, [r7, #14]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	371c      	adds	r7, #28
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
	...

0800b7b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7ce:	2b40      	cmp	r3, #64	; 0x40
 800b7d0:	d005      	beq.n	800b7de <USBD_StdDevReq+0x26>
 800b7d2:	2b40      	cmp	r3, #64	; 0x40
 800b7d4:	d853      	bhi.n	800b87e <USBD_StdDevReq+0xc6>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00b      	beq.n	800b7f2 <USBD_StdDevReq+0x3a>
 800b7da:	2b20      	cmp	r3, #32
 800b7dc:	d14f      	bne.n	800b87e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	6839      	ldr	r1, [r7, #0]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	4798      	blx	r3
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f0:	e04a      	b.n	800b888 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	785b      	ldrb	r3, [r3, #1]
 800b7f6:	2b09      	cmp	r3, #9
 800b7f8:	d83b      	bhi.n	800b872 <USBD_StdDevReq+0xba>
 800b7fa:	a201      	add	r2, pc, #4	; (adr r2, 800b800 <USBD_StdDevReq+0x48>)
 800b7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b800:	0800b855 	.word	0x0800b855
 800b804:	0800b869 	.word	0x0800b869
 800b808:	0800b873 	.word	0x0800b873
 800b80c:	0800b85f 	.word	0x0800b85f
 800b810:	0800b873 	.word	0x0800b873
 800b814:	0800b833 	.word	0x0800b833
 800b818:	0800b829 	.word	0x0800b829
 800b81c:	0800b873 	.word	0x0800b873
 800b820:	0800b84b 	.word	0x0800b84b
 800b824:	0800b83d 	.word	0x0800b83d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f9de 	bl	800bbec <USBD_GetDescriptor>
          break;
 800b830:	e024      	b.n	800b87c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fb43 	bl	800bec0 <USBD_SetAddress>
          break;
 800b83a:	e01f      	b.n	800b87c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fb82 	bl	800bf48 <USBD_SetConfig>
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]
          break;
 800b848:	e018      	b.n	800b87c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fc21 	bl	800c094 <USBD_GetConfig>
          break;
 800b852:	e013      	b.n	800b87c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b854:	6839      	ldr	r1, [r7, #0]
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fc52 	bl	800c100 <USBD_GetStatus>
          break;
 800b85c:	e00e      	b.n	800b87c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fc81 	bl	800c168 <USBD_SetFeature>
          break;
 800b866:	e009      	b.n	800b87c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fc90 	bl	800c190 <USBD_ClrFeature>
          break;
 800b870:	e004      	b.n	800b87c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fce7 	bl	800c248 <USBD_CtlError>
          break;
 800b87a:	bf00      	nop
      }
      break;
 800b87c:	e004      	b.n	800b888 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fce1 	bl	800c248 <USBD_CtlError>
      break;
 800b886:	bf00      	nop
  }

  return ret;
 800b888:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop

0800b894 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8aa:	2b40      	cmp	r3, #64	; 0x40
 800b8ac:	d005      	beq.n	800b8ba <USBD_StdItfReq+0x26>
 800b8ae:	2b40      	cmp	r3, #64	; 0x40
 800b8b0:	d82f      	bhi.n	800b912 <USBD_StdItfReq+0x7e>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <USBD_StdItfReq+0x26>
 800b8b6:	2b20      	cmp	r3, #32
 800b8b8:	d12b      	bne.n	800b912 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d81d      	bhi.n	800b904 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	889b      	ldrh	r3, [r3, #4]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d813      	bhi.n	800b8fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	4798      	blx	r3
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	88db      	ldrh	r3, [r3, #6]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d110      	bne.n	800b90e <USBD_StdItfReq+0x7a>
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10d      	bne.n	800b90e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fd56 	bl	800c3a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8f8:	e009      	b.n	800b90e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fca3 	bl	800c248 <USBD_CtlError>
          break;
 800b902:	e004      	b.n	800b90e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fc9e 	bl	800c248 <USBD_CtlError>
          break;
 800b90c:	e000      	b.n	800b910 <USBD_StdItfReq+0x7c>
          break;
 800b90e:	bf00      	nop
      }
      break;
 800b910:	e004      	b.n	800b91c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fc97 	bl	800c248 <USBD_CtlError>
      break;
 800b91a:	bf00      	nop
  }

  return ret;
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	889b      	ldrh	r3, [r3, #4]
 800b938:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b942:	2b40      	cmp	r3, #64	; 0x40
 800b944:	d007      	beq.n	800b956 <USBD_StdEPReq+0x30>
 800b946:	2b40      	cmp	r3, #64	; 0x40
 800b948:	f200 8145 	bhi.w	800bbd6 <USBD_StdEPReq+0x2b0>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00c      	beq.n	800b96a <USBD_StdEPReq+0x44>
 800b950:	2b20      	cmp	r3, #32
 800b952:	f040 8140 	bne.w	800bbd6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
 800b964:	4603      	mov	r3, r0
 800b966:	73fb      	strb	r3, [r7, #15]
      break;
 800b968:	e13a      	b.n	800bbe0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	785b      	ldrb	r3, [r3, #1]
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d007      	beq.n	800b982 <USBD_StdEPReq+0x5c>
 800b972:	2b03      	cmp	r3, #3
 800b974:	f300 8129 	bgt.w	800bbca <USBD_StdEPReq+0x2a4>
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d07f      	beq.n	800ba7c <USBD_StdEPReq+0x156>
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d03c      	beq.n	800b9fa <USBD_StdEPReq+0xd4>
 800b980:	e123      	b.n	800bbca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d002      	beq.n	800b994 <USBD_StdEPReq+0x6e>
 800b98e:	2b03      	cmp	r3, #3
 800b990:	d016      	beq.n	800b9c0 <USBD_StdEPReq+0x9a>
 800b992:	e02c      	b.n	800b9ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b994:	7bbb      	ldrb	r3, [r7, #14]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00d      	beq.n	800b9b6 <USBD_StdEPReq+0x90>
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	2b80      	cmp	r3, #128	; 0x80
 800b99e:	d00a      	beq.n	800b9b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 f8fc 	bl	800cba2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9aa:	2180      	movs	r1, #128	; 0x80
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f001 f8f8 	bl	800cba2 <USBD_LL_StallEP>
 800b9b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9b4:	e020      	b.n	800b9f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fc45 	bl	800c248 <USBD_CtlError>
              break;
 800b9be:	e01b      	b.n	800b9f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	885b      	ldrh	r3, [r3, #2]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10e      	bne.n	800b9e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00b      	beq.n	800b9e6 <USBD_StdEPReq+0xc0>
 800b9ce:	7bbb      	ldrb	r3, [r7, #14]
 800b9d0:	2b80      	cmp	r3, #128	; 0x80
 800b9d2:	d008      	beq.n	800b9e6 <USBD_StdEPReq+0xc0>
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	88db      	ldrh	r3, [r3, #6]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f001 f8de 	bl	800cba2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fcdc 	bl	800c3a4 <USBD_CtlSendStatus>

              break;
 800b9ec:	e004      	b.n	800b9f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fc29 	bl	800c248 <USBD_CtlError>
              break;
 800b9f6:	bf00      	nop
          }
          break;
 800b9f8:	e0ec      	b.n	800bbd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d002      	beq.n	800ba0c <USBD_StdEPReq+0xe6>
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d016      	beq.n	800ba38 <USBD_StdEPReq+0x112>
 800ba0a:	e030      	b.n	800ba6e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00d      	beq.n	800ba2e <USBD_StdEPReq+0x108>
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
 800ba14:	2b80      	cmp	r3, #128	; 0x80
 800ba16:	d00a      	beq.n	800ba2e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f001 f8c0 	bl	800cba2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba22:	2180      	movs	r1, #128	; 0x80
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f001 f8bc 	bl	800cba2 <USBD_LL_StallEP>
 800ba2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba2c:	e025      	b.n	800ba7a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fc09 	bl	800c248 <USBD_CtlError>
              break;
 800ba36:	e020      	b.n	800ba7a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	885b      	ldrh	r3, [r3, #2]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d11b      	bne.n	800ba78 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d004      	beq.n	800ba54 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f001 f8c6 	bl	800cbe0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fca5 	bl	800c3a4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	4798      	blx	r3
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ba6c:	e004      	b.n	800ba78 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fbe9 	bl	800c248 <USBD_CtlError>
              break;
 800ba76:	e000      	b.n	800ba7a <USBD_StdEPReq+0x154>
              break;
 800ba78:	bf00      	nop
          }
          break;
 800ba7a:	e0ab      	b.n	800bbd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d002      	beq.n	800ba8e <USBD_StdEPReq+0x168>
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d032      	beq.n	800baf2 <USBD_StdEPReq+0x1cc>
 800ba8c:	e097      	b.n	800bbbe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d007      	beq.n	800baa4 <USBD_StdEPReq+0x17e>
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	2b80      	cmp	r3, #128	; 0x80
 800ba98:	d004      	beq.n	800baa4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fbd3 	bl	800c248 <USBD_CtlError>
                break;
 800baa2:	e091      	b.n	800bbc8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da0b      	bge.n	800bac4 <USBD_StdEPReq+0x19e>
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	3310      	adds	r3, #16
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	3304      	adds	r3, #4
 800bac2:	e00b      	b.n	800badc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bac4:	7bbb      	ldrb	r3, [r7, #14]
 800bac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	4413      	add	r3, r2
 800bada:	3304      	adds	r3, #4
 800badc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2202      	movs	r2, #2
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fc1d 	bl	800c32a <USBD_CtlSendData>
              break;
 800baf0:	e06a      	b.n	800bbc8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800baf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	da11      	bge.n	800bb1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	f003 020f 	and.w	r2, r3, #15
 800bb00:	6879      	ldr	r1, [r7, #4]
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	440b      	add	r3, r1
 800bb0c:	3324      	adds	r3, #36	; 0x24
 800bb0e:	881b      	ldrh	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d117      	bne.n	800bb44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fb96 	bl	800c248 <USBD_CtlError>
                  break;
 800bb1c:	e054      	b.n	800bbc8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	f003 020f 	and.w	r2, r3, #15
 800bb24:	6879      	ldr	r1, [r7, #4]
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	440b      	add	r3, r1
 800bb30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d104      	bne.n	800bb44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fb83 	bl	800c248 <USBD_CtlError>
                  break;
 800bb42:	e041      	b.n	800bbc8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	da0b      	bge.n	800bb64 <USBD_StdEPReq+0x23e>
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb52:	4613      	mov	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	3310      	adds	r3, #16
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	4413      	add	r3, r2
 800bb60:	3304      	adds	r3, #4
 800bb62:	e00b      	b.n	800bb7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	4413      	add	r3, r2
 800bb7a:	3304      	adds	r3, #4
 800bb7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb7e:	7bbb      	ldrb	r3, [r7, #14]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <USBD_StdEPReq+0x264>
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
 800bb86:	2b80      	cmp	r3, #128	; 0x80
 800bb88:	d103      	bne.n	800bb92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	e00e      	b.n	800bbb0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 f841 	bl	800cc1e <USBD_LL_IsStallEP>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2201      	movs	r2, #1
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	e002      	b.n	800bbb0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fbb7 	bl	800c32a <USBD_CtlSendData>
              break;
 800bbbc:	e004      	b.n	800bbc8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fb41 	bl	800c248 <USBD_CtlError>
              break;
 800bbc6:	bf00      	nop
          }
          break;
 800bbc8:	e004      	b.n	800bbd4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fb3b 	bl	800c248 <USBD_CtlError>
          break;
 800bbd2:	bf00      	nop
      }
      break;
 800bbd4:	e004      	b.n	800bbe0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fb35 	bl	800c248 <USBD_CtlError>
      break;
 800bbde:	bf00      	nop
  }

  return ret;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
	...

0800bbec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	885b      	ldrh	r3, [r3, #2]
 800bc06:	0a1b      	lsrs	r3, r3, #8
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	2b06      	cmp	r3, #6
 800bc0e:	f200 8128 	bhi.w	800be62 <USBD_GetDescriptor+0x276>
 800bc12:	a201      	add	r2, pc, #4	; (adr r2, 800bc18 <USBD_GetDescriptor+0x2c>)
 800bc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc18:	0800bc35 	.word	0x0800bc35
 800bc1c:	0800bc4d 	.word	0x0800bc4d
 800bc20:	0800bc8d 	.word	0x0800bc8d
 800bc24:	0800be63 	.word	0x0800be63
 800bc28:	0800be63 	.word	0x0800be63
 800bc2c:	0800be03 	.word	0x0800be03
 800bc30:	0800be2f 	.word	0x0800be2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	7c12      	ldrb	r2, [r2, #16]
 800bc40:	f107 0108 	add.w	r1, r7, #8
 800bc44:	4610      	mov	r0, r2
 800bc46:	4798      	blx	r3
 800bc48:	60f8      	str	r0, [r7, #12]
      break;
 800bc4a:	e112      	b.n	800be72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7c1b      	ldrb	r3, [r3, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10d      	bne.n	800bc70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5c:	f107 0208 	add.w	r2, r7, #8
 800bc60:	4610      	mov	r0, r2
 800bc62:	4798      	blx	r3
 800bc64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc6e:	e100      	b.n	800be72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc78:	f107 0208 	add.w	r2, r7, #8
 800bc7c:	4610      	mov	r0, r2
 800bc7e:	4798      	blx	r3
 800bc80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	3301      	adds	r3, #1
 800bc86:	2202      	movs	r2, #2
 800bc88:	701a      	strb	r2, [r3, #0]
      break;
 800bc8a:	e0f2      	b.n	800be72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	885b      	ldrh	r3, [r3, #2]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	f200 80ac 	bhi.w	800bdf0 <USBD_GetDescriptor+0x204>
 800bc98:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <USBD_GetDescriptor+0xb4>)
 800bc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9e:	bf00      	nop
 800bca0:	0800bcb9 	.word	0x0800bcb9
 800bca4:	0800bced 	.word	0x0800bced
 800bca8:	0800bd21 	.word	0x0800bd21
 800bcac:	0800bd55 	.word	0x0800bd55
 800bcb0:	0800bd89 	.word	0x0800bd89
 800bcb4:	0800bdbd 	.word	0x0800bdbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00b      	beq.n	800bcdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	7c12      	ldrb	r2, [r2, #16]
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4798      	blx	r3
 800bcd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcda:	e091      	b.n	800be00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fab2 	bl	800c248 <USBD_CtlError>
            err++;
 800bce4:	7afb      	ldrb	r3, [r7, #11]
 800bce6:	3301      	adds	r3, #1
 800bce8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcea:	e089      	b.n	800be00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00b      	beq.n	800bd10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	7c12      	ldrb	r2, [r2, #16]
 800bd04:	f107 0108 	add.w	r1, r7, #8
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd0e:	e077      	b.n	800be00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fa98 	bl	800c248 <USBD_CtlError>
            err++;
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd1e:	e06f      	b.n	800be00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	7c12      	ldrb	r2, [r2, #16]
 800bd38:	f107 0108 	add.w	r1, r7, #8
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	4798      	blx	r3
 800bd40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd42:	e05d      	b.n	800be00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fa7e 	bl	800c248 <USBD_CtlError>
            err++;
 800bd4c:	7afb      	ldrb	r3, [r7, #11]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	72fb      	strb	r3, [r7, #11]
          break;
 800bd52:	e055      	b.n	800be00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00b      	beq.n	800bd78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	7c12      	ldrb	r2, [r2, #16]
 800bd6c:	f107 0108 	add.w	r1, r7, #8
 800bd70:	4610      	mov	r0, r2
 800bd72:	4798      	blx	r3
 800bd74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd76:	e043      	b.n	800be00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fa64 	bl	800c248 <USBD_CtlError>
            err++;
 800bd80:	7afb      	ldrb	r3, [r7, #11]
 800bd82:	3301      	adds	r3, #1
 800bd84:	72fb      	strb	r3, [r7, #11]
          break;
 800bd86:	e03b      	b.n	800be00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00b      	beq.n	800bdac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd9a:	695b      	ldr	r3, [r3, #20]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	7c12      	ldrb	r2, [r2, #16]
 800bda0:	f107 0108 	add.w	r1, r7, #8
 800bda4:	4610      	mov	r0, r2
 800bda6:	4798      	blx	r3
 800bda8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdaa:	e029      	b.n	800be00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fa4a 	bl	800c248 <USBD_CtlError>
            err++;
 800bdb4:	7afb      	ldrb	r3, [r7, #11]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdba:	e021      	b.n	800be00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00b      	beq.n	800bde0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	7c12      	ldrb	r2, [r2, #16]
 800bdd4:	f107 0108 	add.w	r1, r7, #8
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
 800bddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdde:	e00f      	b.n	800be00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bde0:	6839      	ldr	r1, [r7, #0]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fa30 	bl	800c248 <USBD_CtlError>
            err++;
 800bde8:	7afb      	ldrb	r3, [r7, #11]
 800bdea:	3301      	adds	r3, #1
 800bdec:	72fb      	strb	r3, [r7, #11]
          break;
 800bdee:	e007      	b.n	800be00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fa28 	bl	800c248 <USBD_CtlError>
          err++;
 800bdf8:	7afb      	ldrb	r3, [r7, #11]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bdfe:	bf00      	nop
      }
      break;
 800be00:	e037      	b.n	800be72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7c1b      	ldrb	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d109      	bne.n	800be1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be12:	f107 0208 	add.w	r2, r7, #8
 800be16:	4610      	mov	r0, r2
 800be18:	4798      	blx	r3
 800be1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be1c:	e029      	b.n	800be72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fa11 	bl	800c248 <USBD_CtlError>
        err++;
 800be26:	7afb      	ldrb	r3, [r7, #11]
 800be28:	3301      	adds	r3, #1
 800be2a:	72fb      	strb	r3, [r7, #11]
      break;
 800be2c:	e021      	b.n	800be72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	7c1b      	ldrb	r3, [r3, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10d      	bne.n	800be52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3e:	f107 0208 	add.w	r2, r7, #8
 800be42:	4610      	mov	r0, r2
 800be44:	4798      	blx	r3
 800be46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3301      	adds	r3, #1
 800be4c:	2207      	movs	r2, #7
 800be4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be50:	e00f      	b.n	800be72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f9f7 	bl	800c248 <USBD_CtlError>
        err++;
 800be5a:	7afb      	ldrb	r3, [r7, #11]
 800be5c:	3301      	adds	r3, #1
 800be5e:	72fb      	strb	r3, [r7, #11]
      break;
 800be60:	e007      	b.n	800be72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f9ef 	bl	800c248 <USBD_CtlError>
      err++;
 800be6a:	7afb      	ldrb	r3, [r7, #11]
 800be6c:	3301      	adds	r3, #1
 800be6e:	72fb      	strb	r3, [r7, #11]
      break;
 800be70:	bf00      	nop
  }

  if (err != 0U)
 800be72:	7afb      	ldrb	r3, [r7, #11]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d11e      	bne.n	800beb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	88db      	ldrh	r3, [r3, #6]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d016      	beq.n	800beae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800be80:	893b      	ldrh	r3, [r7, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00e      	beq.n	800bea4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	88da      	ldrh	r2, [r3, #6]
 800be8a:	893b      	ldrh	r3, [r7, #8]
 800be8c:	4293      	cmp	r3, r2
 800be8e:	bf28      	it	cs
 800be90:	4613      	movcs	r3, r2
 800be92:	b29b      	uxth	r3, r3
 800be94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be96:	893b      	ldrh	r3, [r7, #8]
 800be98:	461a      	mov	r2, r3
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fa44 	bl	800c32a <USBD_CtlSendData>
 800bea2:	e009      	b.n	800beb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f9ce 	bl	800c248 <USBD_CtlError>
 800beac:	e004      	b.n	800beb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fa78 	bl	800c3a4 <USBD_CtlSendStatus>
 800beb4:	e000      	b.n	800beb8 <USBD_GetDescriptor+0x2cc>
    return;
 800beb6:	bf00      	nop
  }
}
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop

0800bec0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	889b      	ldrh	r3, [r3, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d131      	bne.n	800bf36 <USBD_SetAddress+0x76>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	88db      	ldrh	r3, [r3, #6]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d12d      	bne.n	800bf36 <USBD_SetAddress+0x76>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	885b      	ldrh	r3, [r3, #2]
 800bede:	2b7f      	cmp	r3, #127	; 0x7f
 800bee0:	d829      	bhi.n	800bf36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	885b      	ldrh	r3, [r3, #2]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	d104      	bne.n	800bf04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 f9a3 	bl	800c248 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf02:	e01d      	b.n	800bf40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	7bfa      	ldrb	r2, [r7, #15]
 800bf08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf0c:	7bfb      	ldrb	r3, [r7, #15]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 feb0 	bl	800cc76 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fa44 	bl	800c3a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d004      	beq.n	800bf2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2202      	movs	r2, #2
 800bf26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf2a:	e009      	b.n	800bf40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf34:	e004      	b.n	800bf40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 f985 	bl	800c248 <USBD_CtlError>
  }
}
 800bf3e:	bf00      	nop
 800bf40:	bf00      	nop
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	885b      	ldrh	r3, [r3, #2]
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	4b4c      	ldr	r3, [pc, #304]	; (800c090 <USBD_SetConfig+0x148>)
 800bf5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf60:	4b4b      	ldr	r3, [pc, #300]	; (800c090 <USBD_SetConfig+0x148>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d905      	bls.n	800bf74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f96c 	bl	800c248 <USBD_CtlError>
    return USBD_FAIL;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e088      	b.n	800c086 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d002      	beq.n	800bf86 <USBD_SetConfig+0x3e>
 800bf80:	2b03      	cmp	r3, #3
 800bf82:	d025      	beq.n	800bfd0 <USBD_SetConfig+0x88>
 800bf84:	e071      	b.n	800c06a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bf86:	4b42      	ldr	r3, [pc, #264]	; (800c090 <USBD_SetConfig+0x148>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d01c      	beq.n	800bfc8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bf8e:	4b40      	ldr	r3, [pc, #256]	; (800c090 <USBD_SetConfig+0x148>)
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf98:	4b3d      	ldr	r3, [pc, #244]	; (800c090 <USBD_SetConfig+0x148>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff f948 	bl	800b234 <USBD_SetClassConfig>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d004      	beq.n	800bfb8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f949 	bl	800c248 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfb6:	e065      	b.n	800c084 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f9f3 	bl	800c3a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2203      	movs	r2, #3
 800bfc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bfc6:	e05d      	b.n	800c084 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f9eb 	bl	800c3a4 <USBD_CtlSendStatus>
      break;
 800bfce:	e059      	b.n	800c084 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bfd0:	4b2f      	ldr	r3, [pc, #188]	; (800c090 <USBD_SetConfig+0x148>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d112      	bne.n	800bffe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bfe0:	4b2b      	ldr	r3, [pc, #172]	; (800c090 <USBD_SetConfig+0x148>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfea:	4b29      	ldr	r3, [pc, #164]	; (800c090 <USBD_SetConfig+0x148>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff f93b 	bl	800b26c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f9d4 	bl	800c3a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bffc:	e042      	b.n	800c084 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bffe:	4b24      	ldr	r3, [pc, #144]	; (800c090 <USBD_SetConfig+0x148>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d02a      	beq.n	800c062 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	b2db      	uxtb	r3, r3
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff f929 	bl	800b26c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c01a:	4b1d      	ldr	r3, [pc, #116]	; (800c090 <USBD_SetConfig+0x148>)
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	461a      	mov	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c024:	4b1a      	ldr	r3, [pc, #104]	; (800c090 <USBD_SetConfig+0x148>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff f902 	bl	800b234 <USBD_SetClassConfig>
 800c030:	4603      	mov	r3, r0
 800c032:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c034:	7bfb      	ldrb	r3, [r7, #15]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00f      	beq.n	800c05a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f903 	bl	800c248 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff f90e 	bl	800b26c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2202      	movs	r2, #2
 800c054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c058:	e014      	b.n	800c084 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f9a2 	bl	800c3a4 <USBD_CtlSendStatus>
      break;
 800c060:	e010      	b.n	800c084 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f99e 	bl	800c3a4 <USBD_CtlSendStatus>
      break;
 800c068:	e00c      	b.n	800c084 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f8eb 	bl	800c248 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c072:	4b07      	ldr	r3, [pc, #28]	; (800c090 <USBD_SetConfig+0x148>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7ff f8f7 	bl	800b26c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c07e:	2303      	movs	r3, #3
 800c080:	73fb      	strb	r3, [r7, #15]
      break;
 800c082:	bf00      	nop
  }

  return ret;
 800c084:	7bfb      	ldrb	r3, [r7, #15]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	24000184 	.word	0x24000184

0800c094 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	88db      	ldrh	r3, [r3, #6]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d004      	beq.n	800c0b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f8cd 	bl	800c248 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0ae:	e023      	b.n	800c0f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	dc02      	bgt.n	800c0c2 <USBD_GetConfig+0x2e>
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dc03      	bgt.n	800c0c8 <USBD_GetConfig+0x34>
 800c0c0:	e015      	b.n	800c0ee <USBD_GetConfig+0x5a>
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d00b      	beq.n	800c0de <USBD_GetConfig+0x4a>
 800c0c6:	e012      	b.n	800c0ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f927 	bl	800c32a <USBD_CtlSendData>
        break;
 800c0dc:	e00c      	b.n	800c0f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f91f 	bl	800c32a <USBD_CtlSendData>
        break;
 800c0ec:	e004      	b.n	800c0f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f8a9 	bl	800c248 <USBD_CtlError>
        break;
 800c0f6:	bf00      	nop
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c110:	b2db      	uxtb	r3, r3
 800c112:	3b01      	subs	r3, #1
 800c114:	2b02      	cmp	r3, #2
 800c116:	d81e      	bhi.n	800c156 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	88db      	ldrh	r3, [r3, #6]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d004      	beq.n	800c12a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f890 	bl	800c248 <USBD_CtlError>
        break;
 800c128:	e01a      	b.n	800c160 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2201      	movs	r2, #1
 800c12e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	f043 0202 	orr.w	r2, r3, #2
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	330c      	adds	r3, #12
 800c14a:	2202      	movs	r2, #2
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 f8eb 	bl	800c32a <USBD_CtlSendData>
      break;
 800c154:	e004      	b.n	800c160 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f875 	bl	800c248 <USBD_CtlError>
      break;
 800c15e:	bf00      	nop
  }
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	885b      	ldrh	r3, [r3, #2]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d106      	bne.n	800c188 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f90e 	bl	800c3a4 <USBD_CtlSendStatus>
  }
}
 800c188:	bf00      	nop
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d80b      	bhi.n	800c1c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	885b      	ldrh	r3, [r3, #2]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d10c      	bne.n	800c1ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f8f3 	bl	800c3a4 <USBD_CtlSendStatus>
      }
      break;
 800c1be:	e004      	b.n	800c1ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f840 	bl	800c248 <USBD_CtlError>
      break;
 800c1c8:	e000      	b.n	800c1cc <USBD_ClrFeature+0x3c>
      break;
 800c1ca:	bf00      	nop
  }
}
 800c1cc:	bf00      	nop
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	781a      	ldrb	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	781a      	ldrb	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f7ff fabb 	bl	800b77a <SWAPBYTE>
 800c204:	4603      	mov	r3, r0
 800c206:	461a      	mov	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3301      	adds	r3, #1
 800c210:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3301      	adds	r3, #1
 800c216:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f7ff faae 	bl	800b77a <SWAPBYTE>
 800c21e:	4603      	mov	r3, r0
 800c220:	461a      	mov	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3301      	adds	r3, #1
 800c22a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3301      	adds	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7ff faa1 	bl	800b77a <SWAPBYTE>
 800c238:	4603      	mov	r3, r0
 800c23a:	461a      	mov	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	80da      	strh	r2, [r3, #6]
}
 800c240:	bf00      	nop
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c252:	2180      	movs	r1, #128	; 0x80
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fca4 	bl	800cba2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c25a:	2100      	movs	r1, #0
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fca0 	bl	800cba2 <USBD_LL_StallEP>
}
 800c262:	bf00      	nop
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b086      	sub	sp, #24
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c276:	2300      	movs	r3, #0
 800c278:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d036      	beq.n	800c2ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c284:	6938      	ldr	r0, [r7, #16]
 800c286:	f000 f836 	bl	800c2f6 <USBD_GetLen>
 800c28a:	4603      	mov	r3, r0
 800c28c:	3301      	adds	r3, #1
 800c28e:	b29b      	uxth	r3, r3
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c298:	7dfb      	ldrb	r3, [r7, #23]
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	4413      	add	r3, r2
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	7812      	ldrb	r2, [r2, #0]
 800c2a2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	2203      	movs	r2, #3
 800c2b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c2ba:	e013      	b.n	800c2e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c2bc:	7dfb      	ldrb	r3, [r7, #23]
 800c2be:	68ba      	ldr	r2, [r7, #8]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	7812      	ldrb	r2, [r2, #0]
 800c2c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	613b      	str	r3, [r7, #16]
    idx++;
 800c2ce:	7dfb      	ldrb	r3, [r7, #23]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	4413      	add	r3, r2
 800c2da:	2200      	movs	r2, #0
 800c2dc:	701a      	strb	r2, [r3, #0]
    idx++;
 800c2de:	7dfb      	ldrb	r3, [r7, #23]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e7      	bne.n	800c2bc <USBD_GetString+0x52>
 800c2ec:	e000      	b.n	800c2f0 <USBD_GetString+0x86>
    return;
 800c2ee:	bf00      	nop
  }
}
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b085      	sub	sp, #20
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2fe:	2300      	movs	r3, #0
 800c300:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c306:	e005      	b.n	800c314 <USBD_GetLen+0x1e>
  {
    len++;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	3301      	adds	r3, #1
 800c30c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	3301      	adds	r3, #1
 800c312:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1f5      	bne.n	800c308 <USBD_GetLen+0x12>
  }

  return len;
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3714      	adds	r7, #20
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr

0800c32a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2202      	movs	r2, #2
 800c33a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	2100      	movs	r1, #0
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 fcaf 	bl	800ccb4 <USBD_LL_Transmit>

  return USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	2100      	movs	r1, #0
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f000 fc9e 	bl	800ccb4 <USBD_LL_Transmit>

  return USBD_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	60b9      	str	r1, [r7, #8]
 800c38c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	2100      	movs	r1, #0
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f000 fcae 	bl	800ccf6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2204      	movs	r2, #4
 800c3b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fc7a 	bl	800ccb4 <USBD_LL_Transmit>

  return USBD_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2205      	movs	r2, #5
 800c3d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2100      	movs	r1, #0
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fc88 	bl	800ccf6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	4913      	ldr	r1, [pc, #76]	; (800c444 <MX_USB_DEVICE_Init+0x54>)
 800c3f8:	4813      	ldr	r0, [pc, #76]	; (800c448 <MX_USB_DEVICE_Init+0x58>)
 800c3fa:	f7fe fead 	bl	800b158 <USBD_Init>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d001      	beq.n	800c408 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c404:	f7f4 f9da 	bl	80007bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800c408:	4910      	ldr	r1, [pc, #64]	; (800c44c <MX_USB_DEVICE_Init+0x5c>)
 800c40a:	480f      	ldr	r0, [pc, #60]	; (800c448 <MX_USB_DEVICE_Init+0x58>)
 800c40c:	f7fe fed4 	bl	800b1b8 <USBD_RegisterClass>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c416:	f7f4 f9d1 	bl	80007bc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c41a:	490d      	ldr	r1, [pc, #52]	; (800c450 <MX_USB_DEVICE_Init+0x60>)
 800c41c:	480a      	ldr	r0, [pc, #40]	; (800c448 <MX_USB_DEVICE_Init+0x58>)
 800c41e:	f7fd f947 	bl	80096b0 <USBD_MSC_RegisterStorage>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d001      	beq.n	800c42c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c428:	f7f4 f9c8 	bl	80007bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c42c:	4806      	ldr	r0, [pc, #24]	; (800c448 <MX_USB_DEVICE_Init+0x58>)
 800c42e:	f7fe feea 	bl	800b206 <USBD_Start>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c438:	f7f4 f9c0 	bl	80007bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c43c:	f7f6 f9a2 	bl	8002784 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c440:	bf00      	nop
 800c442:	bd80      	pop	{r7, pc}
 800c444:	240000f8 	.word	0x240000f8
 800c448:	240012ec 	.word	0x240012ec
 800c44c:	24000010 	.word	0x24000010
 800c450:	24000148 	.word	0x24000148

0800c454 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	6039      	str	r1, [r7, #0]
 800c45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2212      	movs	r2, #18
 800c464:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c466:	4b03      	ldr	r3, [pc, #12]	; (800c474 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	24000114 	.word	0x24000114

0800c478 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	6039      	str	r1, [r7, #0]
 800c482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	2204      	movs	r2, #4
 800c488:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c48a:	4b03      	ldr	r3, [pc, #12]	; (800c498 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr
 800c498:	24000128 	.word	0x24000128

0800c49c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6039      	str	r1, [r7, #0]
 800c4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d105      	bne.n	800c4ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	4907      	ldr	r1, [pc, #28]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4b2:	4808      	ldr	r0, [pc, #32]	; (800c4d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4b4:	f7ff fed9 	bl	800c26a <USBD_GetString>
 800c4b8:	e004      	b.n	800c4c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	4904      	ldr	r1, [pc, #16]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4be:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4c0:	f7ff fed3 	bl	800c26a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4c4:	4b02      	ldr	r3, [pc, #8]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	240015bc 	.word	0x240015bc
 800c4d4:	0800ce58 	.word	0x0800ce58

0800c4d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	6039      	str	r1, [r7, #0]
 800c4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	4904      	ldr	r1, [pc, #16]	; (800c4f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4e8:	4804      	ldr	r0, [pc, #16]	; (800c4fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4ea:	f7ff febe 	bl	800c26a <USBD_GetString>
  return USBD_StrDesc;
 800c4ee:	4b02      	ldr	r3, [pc, #8]	; (800c4f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	240015bc 	.word	0x240015bc
 800c4fc:	0800ce6c 	.word	0x0800ce6c

0800c500 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	6039      	str	r1, [r7, #0]
 800c50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	221a      	movs	r2, #26
 800c510:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c512:	f000 f843 	bl	800c59c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c516:	4b02      	ldr	r3, [pc, #8]	; (800c520 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	2400012c 	.word	0x2400012c

0800c524 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d105      	bne.n	800c542 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4907      	ldr	r1, [pc, #28]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c53a:	4808      	ldr	r0, [pc, #32]	; (800c55c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c53c:	f7ff fe95 	bl	800c26a <USBD_GetString>
 800c540:	e004      	b.n	800c54c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	4904      	ldr	r1, [pc, #16]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c546:	4805      	ldr	r0, [pc, #20]	; (800c55c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c548:	f7ff fe8f 	bl	800c26a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c54c:	4b02      	ldr	r3, [pc, #8]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	240015bc 	.word	0x240015bc
 800c55c:	0800ce80 	.word	0x0800ce80

0800c560 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	6039      	str	r1, [r7, #0]
 800c56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	4907      	ldr	r1, [pc, #28]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c576:	4808      	ldr	r0, [pc, #32]	; (800c598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c578:	f7ff fe77 	bl	800c26a <USBD_GetString>
 800c57c:	e004      	b.n	800c588 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	4904      	ldr	r1, [pc, #16]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c582:	4805      	ldr	r0, [pc, #20]	; (800c598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c584:	f7ff fe71 	bl	800c26a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c588:	4b02      	ldr	r3, [pc, #8]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	240015bc 	.word	0x240015bc
 800c598:	0800ce8c 	.word	0x0800ce8c

0800c59c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <Get_SerialNum+0x44>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5a8:	4b0e      	ldr	r3, [pc, #56]	; (800c5e4 <Get_SerialNum+0x48>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5ae:	4b0e      	ldr	r3, [pc, #56]	; (800c5e8 <Get_SerialNum+0x4c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d009      	beq.n	800c5d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c5c2:	2208      	movs	r2, #8
 800c5c4:	4909      	ldr	r1, [pc, #36]	; (800c5ec <Get_SerialNum+0x50>)
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 f814 	bl	800c5f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c5cc:	2204      	movs	r2, #4
 800c5ce:	4908      	ldr	r1, [pc, #32]	; (800c5f0 <Get_SerialNum+0x54>)
 800c5d0:	68b8      	ldr	r0, [r7, #8]
 800c5d2:	f000 f80f 	bl	800c5f4 <IntToUnicode>
  }
}
 800c5d6:	bf00      	nop
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	1ff1e800 	.word	0x1ff1e800
 800c5e4:	1ff1e804 	.word	0x1ff1e804
 800c5e8:	1ff1e808 	.word	0x1ff1e808
 800c5ec:	2400012e 	.word	0x2400012e
 800c5f0:	2400013e 	.word	0x2400013e

0800c5f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	4613      	mov	r3, r2
 800c600:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c606:	2300      	movs	r3, #0
 800c608:	75fb      	strb	r3, [r7, #23]
 800c60a:	e027      	b.n	800c65c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	0f1b      	lsrs	r3, r3, #28
 800c610:	2b09      	cmp	r3, #9
 800c612:	d80b      	bhi.n	800c62c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	0f1b      	lsrs	r3, r3, #28
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
 800c61c:	005b      	lsls	r3, r3, #1
 800c61e:	4619      	mov	r1, r3
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	440b      	add	r3, r1
 800c624:	3230      	adds	r2, #48	; 0x30
 800c626:	b2d2      	uxtb	r2, r2
 800c628:	701a      	strb	r2, [r3, #0]
 800c62a:	e00a      	b.n	800c642 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	0f1b      	lsrs	r3, r3, #28
 800c630:	b2da      	uxtb	r2, r3
 800c632:	7dfb      	ldrb	r3, [r7, #23]
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	4619      	mov	r1, r3
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	440b      	add	r3, r1
 800c63c:	3237      	adds	r2, #55	; 0x37
 800c63e:	b2d2      	uxtb	r2, r2
 800c640:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	011b      	lsls	r3, r3, #4
 800c646:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	3301      	adds	r3, #1
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	4413      	add	r3, r2
 800c652:	2200      	movs	r2, #0
 800c654:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c656:	7dfb      	ldrb	r3, [r7, #23]
 800c658:	3301      	adds	r3, #1
 800c65a:	75fb      	strb	r3, [r7, #23]
 800c65c:	7dfa      	ldrb	r2, [r7, #23]
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	429a      	cmp	r2, r3
 800c662:	d3d3      	bcc.n	800c60c <IntToUnicode+0x18>
  }
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	371c      	adds	r7, #28
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c672:	b480      	push	{r7}
 800c674:	b083      	sub	sp, #12
 800c676:	af00      	add	r7, sp, #0
 800c678:	4603      	mov	r3, r0
 800c67a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c67c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c67e:	4618      	mov	r0, r3
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c68a:	b480      	push	{r7}
 800c68c:	b085      	sub	sp, #20
 800c68e:	af00      	add	r7, sp, #0
 800c690:	4603      	mov	r3, r0
 800c692:	60b9      	str	r1, [r7, #8]
 800c694:	607a      	str	r2, [r7, #4]
 800c696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c69e:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6a6:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c6a8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	4603      	mov	r3, r0
 800c6be:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b083      	sub	sp, #12
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c6d8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b085      	sub	sp, #20
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	73fb      	strb	r3, [r7, #15]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800c6fa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3714      	adds	r7, #20
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	607a      	str	r2, [r7, #4]
 800c712:	461a      	mov	r2, r3
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]
 800c718:	4613      	mov	r3, r2
 800c71a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800c71c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c72a:	b480      	push	{r7}
 800c72c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c72e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c730:	4618      	mov	r0, r3
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
	...

0800c73c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b0b8      	sub	sp, #224	; 0xe0
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c744:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c748:	2200      	movs	r2, #0
 800c74a:	601a      	str	r2, [r3, #0]
 800c74c:	605a      	str	r2, [r3, #4]
 800c74e:	609a      	str	r2, [r3, #8]
 800c750:	60da      	str	r2, [r3, #12]
 800c752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c754:	f107 0310 	add.w	r3, r7, #16
 800c758:	22bc      	movs	r2, #188	; 0xbc
 800c75a:	2100      	movs	r1, #0
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 fb67 	bl	800ce30 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a2b      	ldr	r2, [pc, #172]	; (800c814 <HAL_PCD_MspInit+0xd8>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d14e      	bne.n	800c80a <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c76c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c770:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c772:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c77a:	f107 0310 	add.w	r3, r7, #16
 800c77e:	4618      	mov	r0, r3
 800c780:	f7f6 ff80 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800c78a:	f7f4 f817 	bl	80007bc <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c78e:	f7f5 fff9 	bl	8002784 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c792:	4b21      	ldr	r3, [pc, #132]	; (800c818 <HAL_PCD_MspInit+0xdc>)
 800c794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c798:	4a1f      	ldr	r2, [pc, #124]	; (800c818 <HAL_PCD_MspInit+0xdc>)
 800c79a:	f043 0301 	orr.w	r3, r3, #1
 800c79e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c7a2:	4b1d      	ldr	r3, [pc, #116]	; (800c818 <HAL_PCD_MspInit+0xdc>)
 800c7a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c7b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c7b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800c7ca:	230a      	movs	r3, #10
 800c7cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4811      	ldr	r0, [pc, #68]	; (800c81c <HAL_PCD_MspInit+0xe0>)
 800c7d8:	f7f4 fbc8 	bl	8000f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c7dc:	4b0e      	ldr	r3, [pc, #56]	; (800c818 <HAL_PCD_MspInit+0xdc>)
 800c7de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c7e2:	4a0d      	ldr	r2, [pc, #52]	; (800c818 <HAL_PCD_MspInit+0xdc>)
 800c7e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c7e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	; (800c818 <HAL_PCD_MspInit+0xdc>)
 800c7ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c7f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7f6:	60bb      	str	r3, [r7, #8]
 800c7f8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	2065      	movs	r0, #101	; 0x65
 800c800:	f7f4 fb03 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c804:	2065      	movs	r0, #101	; 0x65
 800c806:	f7f4 fb1a 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c80a:	bf00      	nop
 800c80c:	37e0      	adds	r7, #224	; 0xe0
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	40080000 	.word	0x40080000
 800c818:	58024400 	.word	0x58024400
 800c81c:	58020000 	.word	0x58020000

0800c820 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c834:	4619      	mov	r1, r3
 800c836:	4610      	mov	r0, r2
 800c838:	f7fe fd30 	bl	800b29c <USBD_LL_SetupStage>
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	460b      	mov	r3, r1
 800c84e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c856:	78fa      	ldrb	r2, [r7, #3]
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	4613      	mov	r3, r2
 800c85c:	00db      	lsls	r3, r3, #3
 800c85e:	1a9b      	subs	r3, r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	440b      	add	r3, r1
 800c864:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	78fb      	ldrb	r3, [r7, #3]
 800c86c:	4619      	mov	r1, r3
 800c86e:	f7fe fd6a 	bl	800b346 <USBD_LL_DataOutStage>
}
 800c872:	bf00      	nop
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b082      	sub	sp, #8
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	460b      	mov	r3, r1
 800c884:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c88c:	78fa      	ldrb	r2, [r7, #3]
 800c88e:	6879      	ldr	r1, [r7, #4]
 800c890:	4613      	mov	r3, r2
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	440b      	add	r3, r1
 800c89a:	3348      	adds	r3, #72	; 0x48
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f7fe fdb3 	bl	800b40c <USBD_LL_DataInStage>
}
 800c8a6:	bf00      	nop
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b082      	sub	sp, #8
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fe fec7 	bl	800b650 <USBD_LL_SOF>
}
 800c8c2:	bf00      	nop
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73fb      	strb	r3, [r7, #15]
 800c8e2:	e008      	b.n	800c8f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d102      	bne.n	800c8f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	73fb      	strb	r3, [r7, #15]
 800c8f0:	e001      	b.n	800c8f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c8f2:	f7f3 ff63 	bl	80007bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8fc:	7bfa      	ldrb	r2, [r7, #15]
 800c8fe:	4611      	mov	r1, r2
 800c900:	4618      	mov	r0, r3
 800c902:	f7fe fe67 	bl	800b5d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fe fe13 	bl	800b538 <USBD_LL_Reset>
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
	...

0800c91c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fe fe62 	bl	800b5f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	6812      	ldr	r2, [r2, #0]
 800c93e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c942:	f043 0301 	orr.w	r3, r3, #1
 800c946:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a1b      	ldr	r3, [r3, #32]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d005      	beq.n	800c95c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c950:	4b04      	ldr	r3, [pc, #16]	; (800c964 <HAL_PCD_SuspendCallback+0x48>)
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	4a03      	ldr	r2, [pc, #12]	; (800c964 <HAL_PCD_SuspendCallback+0x48>)
 800c956:	f043 0306 	orr.w	r3, r3, #6
 800c95a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	e000ed00 	.word	0xe000ed00

0800c968 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe fe52 	bl	800b620 <USBD_LL_Resume>
}
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c996:	78fa      	ldrb	r2, [r7, #3]
 800c998:	4611      	mov	r1, r2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fe fea0 	bl	800b6e0 <USBD_LL_IsoOUTIncomplete>
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9ba:	78fa      	ldrb	r2, [r7, #3]
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fe fe68 	bl	800b694 <USBD_LL_IsoINIncomplete>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe fea6 	bl	800b72c <USBD_LL_DevConnected>
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7fe fea3 	bl	800b742 <USBD_LL_DevDisconnected>
}
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d13e      	bne.n	800ca92 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ca14:	4a21      	ldr	r2, [pc, #132]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a1f      	ldr	r2, [pc, #124]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca24:	4b1d      	ldr	r3, [pc, #116]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca26:	4a1e      	ldr	r2, [pc, #120]	; (800caa0 <USBD_LL_Init+0x9c>)
 800ca28:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800ca2a:	4b1c      	ldr	r3, [pc, #112]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca2c:	2209      	movs	r2, #9
 800ca2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ca30:	4b1a      	ldr	r3, [pc, #104]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca32:	2202      	movs	r2, #2
 800ca34:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 800ca36:	4b19      	ldr	r3, [pc, #100]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca38:	2201      	movs	r2, #1
 800ca3a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca3c:	4b17      	ldr	r3, [pc, #92]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca3e:	2202      	movs	r2, #2
 800ca40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca42:	4b16      	ldr	r3, [pc, #88]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca44:	2200      	movs	r2, #0
 800ca46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ca48:	4b14      	ldr	r3, [pc, #80]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ca4e:	4b13      	ldr	r3, [pc, #76]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ca54:	4b11      	ldr	r3, [pc, #68]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ca5a:	4b10      	ldr	r3, [pc, #64]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ca60:	4b0e      	ldr	r3, [pc, #56]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ca66:	480d      	ldr	r0, [pc, #52]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca68:	f7f4 fc49 	bl	80012fe <HAL_PCD_Init>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ca72:	f7f3 fea3 	bl	80007bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ca76:	2180      	movs	r1, #128	; 0x80
 800ca78:	4808      	ldr	r0, [pc, #32]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca7a:	f7f5 fe08 	bl	800268e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ca7e:	2240      	movs	r2, #64	; 0x40
 800ca80:	2100      	movs	r1, #0
 800ca82:	4806      	ldr	r0, [pc, #24]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca84:	f7f5 fdbc 	bl	8002600 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ca88:	2280      	movs	r2, #128	; 0x80
 800ca8a:	2101      	movs	r1, #1
 800ca8c:	4803      	ldr	r0, [pc, #12]	; (800ca9c <USBD_LL_Init+0x98>)
 800ca8e:	f7f5 fdb7 	bl	8002600 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	240017bc 	.word	0x240017bc
 800caa0:	40080000 	.word	0x40080000

0800caa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800caba:	4618      	mov	r0, r3
 800cabc:	f7f4 fd43 	bl	8001546 <HAL_PCD_Start>
 800cac0:	4603      	mov	r3, r0
 800cac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 f962 	bl	800cd90 <USBD_Get_USB_Status>
 800cacc:	4603      	mov	r3, r0
 800cace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	4608      	mov	r0, r1
 800cae4:	4611      	mov	r1, r2
 800cae6:	461a      	mov	r2, r3
 800cae8:	4603      	mov	r3, r0
 800caea:	70fb      	strb	r3, [r7, #3]
 800caec:	460b      	mov	r3, r1
 800caee:	70bb      	strb	r3, [r7, #2]
 800caf0:	4613      	mov	r3, r2
 800caf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb02:	78bb      	ldrb	r3, [r7, #2]
 800cb04:	883a      	ldrh	r2, [r7, #0]
 800cb06:	78f9      	ldrb	r1, [r7, #3]
 800cb08:	f7f5 f954 	bl	8001db4 <HAL_PCD_EP_Open>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f000 f93c 	bl	800cd90 <USBD_Get_USB_Status>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b084      	sub	sp, #16
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb36:	2300      	movs	r3, #0
 800cb38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb40:	78fa      	ldrb	r2, [r7, #3]
 800cb42:	4611      	mov	r1, r2
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7f5 f99d 	bl	8001e84 <HAL_PCD_EP_Close>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb4e:	7bfb      	ldrb	r3, [r7, #15]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 f91d 	bl	800cd90 <USBD_Get_USB_Status>
 800cb56:	4603      	mov	r3, r0
 800cb58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb74:	2300      	movs	r3, #0
 800cb76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb7e:	78fa      	ldrb	r2, [r7, #3]
 800cb80:	4611      	mov	r1, r2
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7f5 fb2f 	bl	80021e6 <HAL_PCD_EP_Flush>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 f8fe 	bl	800cd90 <USBD_Get_USB_Status>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b084      	sub	sp, #16
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	460b      	mov	r3, r1
 800cbac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbbc:	78fa      	ldrb	r2, [r7, #3]
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7f5 fa56 	bl	8002072 <HAL_PCD_EP_SetStall>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 f8df 	bl	800cd90 <USBD_Get_USB_Status>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbfa:	78fa      	ldrb	r2, [r7, #3]
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7f5 fa9b 	bl	800213a <HAL_PCD_EP_ClrStall>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 f8c0 	bl	800cd90 <USBD_Get_USB_Status>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b085      	sub	sp, #20
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc30:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	da0b      	bge.n	800cc52 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc3a:	78fb      	ldrb	r3, [r7, #3]
 800cc3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc40:	68f9      	ldr	r1, [r7, #12]
 800cc42:	4613      	mov	r3, r2
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	1a9b      	subs	r3, r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	440b      	add	r3, r1
 800cc4c:	333e      	adds	r3, #62	; 0x3e
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	e00b      	b.n	800cc6a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc52:	78fb      	ldrb	r3, [r7, #3]
 800cc54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc58:	68f9      	ldr	r1, [r7, #12]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	440b      	add	r3, r1
 800cc64:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc68:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc90:	78fa      	ldrb	r2, [r7, #3]
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7f5 f868 	bl	8001d6a <HAL_PCD_SetAddress>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 f875 	bl	800cd90 <USBD_Get_USB_Status>
 800cca6:	4603      	mov	r3, r0
 800cca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	607a      	str	r2, [r7, #4]
 800ccbe:	603b      	str	r3, [r7, #0]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ccd2:	7af9      	ldrb	r1, [r7, #11]
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	f7f5 f981 	bl	8001fde <HAL_PCD_EP_Transmit>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 f854 	bl	800cd90 <USBD_Get_USB_Status>
 800cce8:	4603      	mov	r3, r0
 800ccea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccec:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b086      	sub	sp, #24
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	607a      	str	r2, [r7, #4]
 800cd00:	603b      	str	r3, [r7, #0]
 800cd02:	460b      	mov	r3, r1
 800cd04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd14:	7af9      	ldrb	r1, [r7, #11]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	f7f5 f8fd 	bl	8001f18 <HAL_PCD_EP_Receive>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 f833 	bl	800cd90 <USBD_Get_USB_Status>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	460b      	mov	r3, r1
 800cd42:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd4a:	78fa      	ldrb	r2, [r7, #3]
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f5 f92d 	bl	8001fae <HAL_PCD_EP_GetRxCount>
 800cd54:	4603      	mov	r3, r0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
	...

0800cd60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cd68:	4b03      	ldr	r3, [pc, #12]	; (800cd78 <USBD_static_malloc+0x18>)
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	24000188 	.word	0x24000188

0800cd7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]

}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	2b03      	cmp	r3, #3
 800cda2:	d817      	bhi.n	800cdd4 <USBD_Get_USB_Status+0x44>
 800cda4:	a201      	add	r2, pc, #4	; (adr r2, 800cdac <USBD_Get_USB_Status+0x1c>)
 800cda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdaa:	bf00      	nop
 800cdac:	0800cdbd 	.word	0x0800cdbd
 800cdb0:	0800cdc3 	.word	0x0800cdc3
 800cdb4:	0800cdc9 	.word	0x0800cdc9
 800cdb8:	0800cdcf 	.word	0x0800cdcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc0:	e00b      	b.n	800cdda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc6:	e008      	b.n	800cdda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	73fb      	strb	r3, [r7, #15]
    break;
 800cdcc:	e005      	b.n	800cdda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd2:	e002      	b.n	800cdda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd8:	bf00      	nop
  }
  return usb_status;
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <__libc_init_array>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	4d0d      	ldr	r5, [pc, #52]	; (800ce20 <__libc_init_array+0x38>)
 800cdec:	4c0d      	ldr	r4, [pc, #52]	; (800ce24 <__libc_init_array+0x3c>)
 800cdee:	1b64      	subs	r4, r4, r5
 800cdf0:	10a4      	asrs	r4, r4, #2
 800cdf2:	2600      	movs	r6, #0
 800cdf4:	42a6      	cmp	r6, r4
 800cdf6:	d109      	bne.n	800ce0c <__libc_init_array+0x24>
 800cdf8:	4d0b      	ldr	r5, [pc, #44]	; (800ce28 <__libc_init_array+0x40>)
 800cdfa:	4c0c      	ldr	r4, [pc, #48]	; (800ce2c <__libc_init_array+0x44>)
 800cdfc:	f000 f820 	bl	800ce40 <_init>
 800ce00:	1b64      	subs	r4, r4, r5
 800ce02:	10a4      	asrs	r4, r4, #2
 800ce04:	2600      	movs	r6, #0
 800ce06:	42a6      	cmp	r6, r4
 800ce08:	d105      	bne.n	800ce16 <__libc_init_array+0x2e>
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce10:	4798      	blx	r3
 800ce12:	3601      	adds	r6, #1
 800ce14:	e7ee      	b.n	800cdf4 <__libc_init_array+0xc>
 800ce16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce1a:	4798      	blx	r3
 800ce1c:	3601      	adds	r6, #1
 800ce1e:	e7f2      	b.n	800ce06 <__libc_init_array+0x1e>
 800ce20:	0800ced0 	.word	0x0800ced0
 800ce24:	0800ced0 	.word	0x0800ced0
 800ce28:	0800ced0 	.word	0x0800ced0
 800ce2c:	0800ced4 	.word	0x0800ced4

0800ce30 <memset>:
 800ce30:	4402      	add	r2, r0
 800ce32:	4603      	mov	r3, r0
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d100      	bne.n	800ce3a <memset+0xa>
 800ce38:	4770      	bx	lr
 800ce3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce3e:	e7f9      	b.n	800ce34 <memset+0x4>

0800ce40 <_init>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr

0800ce4c <_fini>:
 800ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4e:	bf00      	nop
 800ce50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce52:	bc08      	pop	{r3}
 800ce54:	469e      	mov	lr, r3
 800ce56:	4770      	bx	lr
